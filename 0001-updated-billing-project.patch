From f338fb5b6d4768faf90b4ee4dcc1622975bc3395 Mon Sep 17 00:00:00 2001
From: kiran <kiran12b0@gmail.com>
Date: Wed, 30 Jan 2013 14:27:49 -0800
Subject: [PATCH] updated-billing-project

updated-billing-1-31-2013

working-billing

10-2-2013
---
 mifosng-provider/logo.jpg                          |  Bin 0 -> 4409 bytes
 .../java/org/mifosng/platform/GeneratePdf.java     |  340 +++
 .../main/java/org/mifosplatform/GeneratePdf.java   |   55 +
 .../src/main/java/org/mifosplatform/Hai.java       |   10 +
 .../configuration/data/PeriodData.java             |   30 +
 .../service/BillingReadPlatformService.java        |   10 +
 .../service/PaymentsReadPlatformService.java       |    5 +
 .../service/PeriodReadPlatformService.java         |   11 +
 .../service/PeriodReadPlatformServiceImpl.java     |   51 +
 .../infrastructure/core/service/FileUtils.java     |    3 +-
 .../service/GmailBackedPlatformEmailService.java   |    6 +-
 .../dataqueries/api/ReportsApiResource.java.rej    |   76 +
 .../service/ReadReportingService.java.rej          |   11 +
 .../service/ReadReportingServiceImpl.java          |    2 +
 .../service/ReadReportingServiceImpl.java.rej      |  118 +
 .../service/ReadWriteNonCoreDataServiceImpl.java   |    2 +
 .../adjustment/commands/AdjustmentCommand.java     |  145 ++
 .../adjustment/data/AdjustmentCodeData.java        |   35 +
 .../portfolio/adjustment/data/AdjustmentData.java  |  145 ++
 .../portfolio/adjustment/domain/Adjustment.java    |  135 ++
 .../domain/AdjustmentCommandValidator.java         |   37 +
 .../adjustment/domain/AdjustmentRepository.java    |    7 +
 .../portfolio/adjustment/domain/ClientBalance.java |   81 +
 .../adjustment/domain/ClientBalanceRepository.java |    9 +
 .../service/AdjustmentReadPlatformService.java     |   12 +
 .../service/AdjustmentReadPlatformServiceImpl.java |   94 +
 .../service/AdjustmentWritePlatformService.java    |    8 +
 ...tmentWritePlatformServiceJpaRepositoryImpl.java |  135 ++
 .../ClientBalanceReadPlatformServiceImpl.java      |  107 +
 .../adjustment/service/UpdateClientBalance.java    |   58 +
 .../adjustments/api/AdjustmentApiResource.java     |  110 +
 .../billingcycle/api/BillingCycleApiResource.java  |   91 +
 .../billingcycle/command/BillingCycleCommand.java  |   50 +
 .../billingcycle/data/BillingCycleData.java        |   35 +
 .../data/SavingBillingEnumaration.java             |   36 +
 .../billingcycle/domain/BillingCycle.java          |   85 +
 .../billingcycle/domain/FrequenctType.java         |   63 +
 .../domain/SavingBillingEnumaration.java           |   45 +
 .../domain/domain/BillingCycleRepository.java      |   11 +
 .../service/BillingCycleReadPlatformService.java   |    9 +
 .../BillingCycleReadPlatformServiceImpl.java       |   51 +
 .../service/BillingCycleWritePlatformService.java  |   11 +
 .../BillingCycleWritePlatformServiceImp.java       |   76 +
 .../billingcycle/service/BillingDays.java          |   17 +
 .../api/BillingMasterApiResourse.java              |  152 ++
 .../billingmaster/command/BillMasterCommand.java   |   25 +
 .../billingorder/api/BillingOrderApiResourse.java  |  131 ++
 .../billingorder/commands/BillingOrderCommand.java |  118 +
 .../billingorder/commands/InvoiceCommand.java      |   78 +
 .../billingorder/commands/InvoiceTaxCommand.java   |   57 +
 .../billingorder/data/BillDetailsData.java         |  132 ++
 .../portfolio/billingorder/data/BillRuleData.java  |   19 +
 .../billingorder/data/BillingOrderData.java        |  157 ++
 .../billingorder/domain/BillingOrder.java          |  180 ++
 .../domain/BillingOrderRepository.java             |    9 +
 .../portfolio/billingorder/domain/ClientOrder.java |  202 ++
 .../billingorder/domain/ClientOrderRepository.java |    9 +
 .../portfolio/billingorder/domain/Invoice.java     |  166 ++
 .../billingorder/domain/InvoiceRepository.java     |   10 +
 .../portfolio/billingorder/domain/InvoiceTax.java  |  118 +
 .../billingorder/domain/InvoiceTaxRepository.java  |    9 +
 .../BillingOrderNoRecordsFoundException.java       |   15 +
 .../service/BillingOrderReadPlatformService.java   |   23 +
 ...lingOrderReadPlatformServiceImplementation.java |  189 ++
 .../service/BillingOrderWritePlatformService.java  |   26 +
 ...ingOrderWritePlatformServiceImplementation.java |  274 +++
 .../billingorder/service/GenerateBill.java         |  356 +++
 .../service/GenerateBillingOrderService.java       |   23 +
 .../GenerateBillingOrderServiceImplementation.java |  293 +++
 ...onPortfolioApiJsonBillingSerializerService.java |  285 +++
 ...rtfolioApiBillingDataConversionServiceImpl.java | 1081 +++++++++
 .../PortfolioApiDataBillingConversionService.java  |   72 +
 .../PortfolioApiJsonBillingSerializerService.java  |   79 +
 .../portfolio/billmaster/domain/BillDetail.java    |  100 +
 .../billmaster/domain/BillDetailRepository.java    |    9 +
 .../portfolio/billmaster/domain/BillMaster.java    |  228 ++
 .../domain/BillMasterCommandValidator.java         |   38 +
 .../billmaster/domain/BillMasterRepository.java    |    9 +
 .../service/BillMasterReadPlatformService.java     |   19 +
 ...illMasterReadPlatformServiceImplementation.java |  307 +++
 .../service/BillMasterWritePlatformService.java    |   23 +
 ...llMasterWritePlatformServiceImplementation.java |  569 +++++
 .../charge/api/ChargeCodeApiResource.java          |   37 +
 .../charge/commands/ChargeCodeCommand.java         |   48 +
 .../portfolio/charge/commands/ChargeCommand.java   |  123 +
 .../portfolio/charge/data/CategoryOptionData.java  |   26 +
 .../portfolio/charge/data/ChargeCodeData.java      |   25 +
 .../portfolio/charge/data/ChargesData.java         |   40 +
 .../portfolio/charge/domain/Charge.java            |    5 +
 .../portfolio/charge/service/ChargeCode.java       |   36 +
 .../chargecode/domain/ChargeCodeRepository.java    |   11 +
 .../service/ChargeCodeReadPlatformService.java     |    5 +
 .../service/ChargeCodeReadPlatformServiceImpl.java |    5 +
 .../service/ChargeCodeWritePlatformService.java    |    7 +
 ...eCodeWritePlatformServiceJpaRepositoryImpl.java |   39 +
 .../portfolio/client/api/ClientsApiResource.java   |    6 +-
 .../portfolio/client/data/ClientData.java          |   24 +-
 .../client/service/ClientReadPlatformService.java  |    4 +
 .../service/ClientReadPlatformServiceImpl.java     |   55 +-
 .../clientbalance/data/ClientBalanceData.java      |   42 +
 .../api/DiscountMasterApiResource.java             |  147 ++
 .../discountmaster/commands/Discount.java          |   40 +
 .../commands/DiscountMasterCommand.java            |   74 +
 .../discountmaster/commands/DiscountValues.java    |   19 +
 .../discountmaster/data/DiscountMasterData.java    |   54 +
 .../discountmaster/domain/DiscountMaster.java      |   66 +
 .../domain/DiscountMasterRepository.java           |    9 +
 .../service/DiscountMasterReadPlatformService.java |   10 +
 .../DiscountMasterReadPlatformServiceImpl.java     |   74 +
 .../DiscountMasterWritePlatformService.java        |   14 +
 ...asterWritePlatformServicejpaRepositoryImpl.java |   95 +
 .../api/FinancialTransactionApiResource.java       |   76 +
 .../data/FinancialTransactionsData.java            |  108 +
 .../portfolio/order/api/OrdersApiResource.java     |  241 ++
 .../portfolio/order/command/OrdersCommand.java     |  112 +
 .../portfolio/order/data/OrderData.java            |  219 ++
 .../portfolio/order/data/OrderPriceData.java       |  111 +
 .../portfolio/order/data/OrderingData.java         |   19 +
 .../order/data/SavingStatusEnumaration.java        |   36 +
 .../portfolio/order/domain/Order.java              |  170 ++
 .../order/domain/OrderCommanValidator.java         |   33 +
 .../portfolio/order/domain/OrderLine.java          |   92 +
 .../order/domain/OrderLineRepository.java          |   11 +
 .../portfolio/order/domain/OrderPrice.java         |  202 ++
 .../order/domain/OrderPriceRepository.java         |   12 +
 .../order/domain/OrderReadPlatformImpl.java        |  143 ++
 .../portfolio/order/domain/OrderRepository.java    |   10 +
 .../order/service/OrderReadPlatformService.java    |   22 +
 .../service/OrderReadPlatformServiceImpl.java      |  732 ++++++
 .../order/service/OrderWritePlatformService.java   |   18 +
 .../service/OrderWritePlatformServiceImpl.java     |  245 ++
 .../portfolio/payment/command/Paymentcommand.java  |   79 +
 .../portfolio/payment/domain/Payment.java          |   94 +
 .../payment/domain/PaymentRepository.java          |   10 +
 .../portfolio/payment/domain/PaymentValidator.java |   33 +
 .../service/PaymentWritePlatformService.java       |   13 +
 .../service/PaymentWritePlatformServiceImpl.java   |   87 +
 .../payment/service/PaymentsCommandValidator.java  |   37 +
 .../payments/api/PaymentsApiResource.java          |  109 +
 .../portfolio/paymodes/api/PaymodeApiResource.java |   93 +
 .../paymodes/commands/PaymodeCommand.java          |   52 +
 .../portfolio/paymodes/data/PaymodeData.java       |   38 +
 .../portfolio/paymodes/data/PaymodeTypesData.java  |   32 +
 .../paymodes/data/SavingCategoryEnumaration.java   |   35 +
 .../portfolio/paymodes/domain/CategoryType.java    |   52 +
 .../portfolio/paymodes/domain/Paymode.java         |   43 +
 .../paymodes/domain/PaymodeCommandValidator.java   |   32 +
 .../paymodes/domain/PaymodeRepository.java         |   12 +
 .../service/PaymodeReadPlatformService.java        |   14 +
 .../service/PaymodeWritePlatformService.java       |    9 +
 .../service/PaymodeWritePlatformServiceImpl.java   |   58 +
 .../service/paymodeReadPlatformServiceImpl.java    |   56 +
 .../portfolio/payterms/api/PaytermApiResource.java |   81 +
 .../payterms/commands/PaytermsCommand.java         |   39 +
 .../portfolio/payterms/data/PaytermData.java       |   20 +
 .../payterms/domain/PaytermsRepository.java        |   11 +
 .../portfolio/payterms/domain/payterms.java        |   68 +
 .../service/PaytermsWritePlatformService.java      |   10 +
 .../service/PaytermsWritePlatformServiceImpl.java  |   62 +
 .../portfolio/plan/api/PlansApiResource.java       |  264 +++
 .../portfolio/plan/commands/PlansCommand.java      |  135 ++
 .../portfolio/plan/data/EnumData.java              |   32 +
 .../portfolio/plan/data/PlanCodeData.java          |   38 +
 .../portfolio/plan/data/PlanData.java              |  272 +++
 .../portfolio/plan/data/ServiceData.java           |  148 ++
 .../portfolio/plan/data/ServiceDetailsData.java    |   29 +
 .../portfolio/plan/data/SinglePlandata.java        |  177 ++
 .../portfolio/plan/domain/BillingCycleType.java    |   46 +
 .../portfolio/plan/domain/BillingTypeEnum.java     |   48 +
 .../plan/domain/SavingBillingCycleEnum.java        |   30 +
 .../portfolio/plan/domain/StatusTypeEnum.java      |   50 +
 .../plan/exceptions/PlanNotFundException.java      |   12 +
 .../portfolio/plan/service/ChargeVariant.java      |   48 +
 .../plan/service/PlanCommandValidator.java         |   33 +
 .../plan/service/PlanReadPlatformService.java      |   22 +
 .../plan/service/PlanReadPlatformServiceImpl.java  |  236 ++
 .../plan/service/PlanWritePlatformService.java     |   19 +
 .../plan/service/PlanWritePlatformServiceImpl.java |  178 ++
 .../portfolio/pricing/api/PricingApiResource.java  |  209 ++
 .../portfolio/pricing/commands/PricingCommand.java |   82 +
 .../portfolio/pricing/data/PriceData.java          |   58 +
 .../portfolio/pricing/data/PricingData.java        |  121 +
 .../pricing/data/SavingChargeVaraint.java          |   34 +
 .../portfolio/pricing/domain/Price.java            |  111 +
 .../portfolio/pricing/domain/PriceRepository.java  |   12 +
 .../pricing/domain/PricingCommandValidator.java    |   33 +
 .../pricing/exceptions/ChargeCOdeExists.java       |   11 +
 .../pricing/service/PriceReadPlatformService.java  |   25 +
 .../service/PriceReadPlatformServiceImpl.java      |  304 +++
 .../pricing/service/PriceWritePlatformService.java |   22 +
 .../service/PriceWritePlatformServiceImpl.java     |  109 +
 .../portfolio/savingplan/domain/Plan.java          |  171 ++
 .../savingplan/domain/PlanRepository.java          |   11 +
 .../savingplan/domain/ServiceDescription.java      |   58 +
 .../domain/ServiceDescriptionRepository.java       |   10 +
 .../savingplan/domain/ServiceDetails.java          |   70 +
 .../domain/ServiceDetailsRepository.java           |   11 +
 .../savingplan/domain/ServiceRepository.java       |   11 +
 .../portfolio/savingplan/domain/ServiceType.java   |   58 +
 ...oogleGsonPortfolioApiJsonSerializerService.java |   61 +-
 .../PortfolioApiDataConversionService.java         |   49 +
 .../PortfolioApiDataConversionServiceImpl.java     | 2446 +++++++++++++-------
 .../PortfolioApiJsonSerializerService.java         |   19 +
 .../api/ServiceMasterApiResource.java              |  161 ++
 .../commands/ServiceMasterCommand.java             |   55 +
 .../servicemaster/commands/ServicesCommand.java    |   39 +
 .../data/SericeMasterOptionsData.java              |   50 +
 .../servicemaster/domain/ServiceMaster.java        |   89 +
 .../domain/ServiceMasterCommandValidator.java      |   36 +
 .../domain/ServiceMasterRepository.java            |    6 +
 .../servicemaster/exceptions/ServiceCodeExist.java |   12 +
 .../service/ServiceMasterReadPlatformService.java  |   17 +
 .../ServiceMasterReadPlatformServiceImpl.java      |  118 +
 .../service/ServiceMasterWritePlatformService.java |   13 +
 ...asterWritePlatformServicejpaRepositoryImpl.java |   87 +
 .../api/ServiceWritePlatformServiceImpl.java       |   54 +
 .../services/api/ServicesApiResource.java          |   94 +
 .../services/data/SavingServiceEnumaration.java    |   27 +
 .../portfolio/services/data/ServiceMasterData.java |   30 +
 .../portfolio/services/data/ServicesData.java      |   31 +
 .../service/ServiceReadPlatformService.java        |   11 +
 .../service/ServiceReadPlatformServiceImpl.java    |   29 +
 .../services/service/ServiceTypeEnum.java          |   42 +
 .../service/ServiceWritePlatformService.java       |   10 +
 .../subscription/api/SubscriptionApiResource.java  |  172 ++
 .../subscription/commands/SubscriptionCommand.java |   78 +
 .../subscription/data/SubscriptionData.java        |  105 +
 .../subscription/domain/Subscription.java          |   91 +
 .../domain/SubscriptionCommandValidator.java       |   33 +
 .../domain/SubscriptionReadPlatformService.java    |   15 +
 .../SubscriptionReadPlatformServiceImpl.java       |   89 +
 .../domain/SubscriptionRepository.java             |   12 +
 .../subscription/domain/SubscriptionType.java      |   38 +
 .../domain/SubscriptionTypeRepository.java         |   11 +
 .../service/SubcriptionWritePlatformService.java   |   16 +
 .../SubcriptionWritePlatformServiceImp.java        |  101 +
 .../taxmaster/api/TaxMappingRateApiResource.java   |   90 +
 .../taxmaster/api/TaxMasterApiResource.java        |  109 +
 .../taxmaster/commands/TaxMappingRateCommand.java  |   52 +
 .../taxmaster/commands/TaxMasterCommand.java       |   42 +
 .../taxmaster/data/TaxMappingRateData.java         |   66 +
 .../taxmaster/data/TaxMappingRateOptionsData.java  |   20 +
 .../portfolio/taxmaster/data/TaxMasterData.java    |   23 +
 .../taxmaster/data/TaxMasterDataOptions.java       |   14 +
 .../portfolio/taxmaster/data/TaxMasterOptions.java |   18 +
 .../portfolio/taxmaster/domain/TaxMappingRate.java |   44 +
 .../taxmaster/domain/TaxMappingRateRepository.java |    9 +
 .../portfolio/taxmaster/domain/TaxMaster.java      |   36 +
 .../taxmaster/domain/TaxMasterRepository.java      |   11 +
 .../service/TaxMappingRateReadPlatformService.java |   11 +
 .../TaxMappingRateReadPlatformServiceImpl.java     |   76 +
 .../TaxMappingRateWritePlatformService.java        |    7 +
 ...gRateWritePlatformServiceJpaRepositoryImpl.java |   43 +
 .../service/TaxMasterReadPlatformService.java      |   14 +
 .../service/TaxMasterReadPlatformServiceImpl.java  |   89 +
 .../service/TaxMasterWritePlatformService.java     |    8 +
 ...asterWritePlatformServiceJpaRepositoryImpl.java |   37 +
 .../service/ClientBalanceReadPlatformService.java  |   10 +
 .../useradministration/domain/AppUser.java         |  863 +++----
 mifosng-provider/src/main/java/rest/MainPost.java  |   79 +
 .../src/main/java/rest/reply/OXMapper.java         |   13 +
 .../src/main/java/rest/reply/PaypalAckStatus.java  |   17 +
 .../main/java/rest/reply/PaypalFailureDetail.java  |   74 +
 .../src/main/java/rest/reply/PaypalPayReply.java   |    6 +
 .../src/main/java/rest/request/PaypalPayDso.java   |   92 +
 .../src/main/java/rest/request/PaypalReciver.java  |   38 +
 .../java/rest/request/PaypalRequestEnvelope.java   |   17 +
 267 files changed, 21518 insertions(+), 1254 deletions(-)
 create mode 100644 mifosng-provider/logo.jpg
 create mode 100644 mifosng-provider/src/main/java/org/mifosng/platform/GeneratePdf.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/GeneratePdf.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/Hai.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/data/PeriodData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/BillingReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PaymentsReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java.rej
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java.rej
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java.rej
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/commands/AdjustmentCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentCodeData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/Adjustment.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalance.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalanceRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformServiceJpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/ClientBalanceReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/UpdateClientBalance.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustments/api/AdjustmentApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/api/BillingCycleApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/command/BillingCycleCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/BillingCycleData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/SavingBillingEnumaration.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/BillingCycle.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/FrequenctType.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/SavingBillingEnumaration.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/domain/BillingCycleRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformServiceImp.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingDays.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/api/BillingMasterApiResourse.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/command/BillMasterCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/api/BillingOrderApiResourse.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/BillingOrderCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceTaxCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillDetailsData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillRuleData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillingOrderData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrder.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrderRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrder.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrderRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/Invoice.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTax.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTaxRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/exceptions/BillingOrderNoRecordsFoundException.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformServiceImplementation.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformServiceImplementation.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBill.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderServiceImplementation.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/GoogleGsonPortfolioApiJsonBillingSerializerService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiBillingDataConversionServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiDataBillingConversionService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiJsonBillingSerializerService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetail.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetailRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMaster.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformServiceImplementation.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformServiceImplementation.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/api/ChargeCodeApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCodeCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/CategoryOptionData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargeCodeData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargesData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/service/ChargeCode.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/domain/ChargeCodeRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformServiceJpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/clientbalance/data/ClientBalanceData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/api/DiscountMasterApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/Discount.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountMasterCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountValues.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/data/DiscountMasterData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMaster.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMasterRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformServicejpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/api/FinancialTransactionApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/data/FinancialTransactionsData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/api/OrdersApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/command/OrdersCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderPriceData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderingData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/SavingStatusEnumaration.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/Order.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderCommanValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLine.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLineRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPrice.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPriceRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderReadPlatformImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/command/Paymentcommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/Payment.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentsCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payments/api/PaymentsApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/api/PaymodeApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/commands/PaymodeCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeTypesData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/SavingCategoryEnumaration.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/CategoryType.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/Paymode.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/paymodeReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/api/PaytermApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/commands/PaytermsCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/data/PaytermData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/PaytermsRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/payterms.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/api/PlansApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/commands/PlansCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/EnumData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanCodeData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceDetailsData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/SinglePlandata.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingCycleType.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingTypeEnum.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/SavingBillingCycleEnum.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/StatusTypeEnum.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/exceptions/PlanNotFundException.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/ChargeVariant.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/api/PricingApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/commands/PricingCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PriceData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PricingData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/SavingChargeVaraint.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/Price.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PriceRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PricingCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/exceptions/ChargeCOdeExists.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/Plan.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/PlanRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescription.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescriptionRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetails.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetailsRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceType.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/api/ServiceMasterApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServiceMasterCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServicesCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/data/SericeMasterOptionsData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMaster.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/exceptions/ServiceCodeExist.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformServicejpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServiceWritePlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServicesApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/SavingServiceEnumaration.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServiceMasterData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServicesData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceTypeEnum.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/api/SubscriptionApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/commands/SubscriptionCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/data/SubscriptionData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/Subscription.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionCommandValidator.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionType.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionTypeRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformServiceImp.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMappingRateApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMasterApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMappingRateCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMasterCommand.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateOptionsData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterData.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterDataOptions.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterOptions.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRate.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRateRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMaster.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMasterRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformServiceJpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformServiceImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformServiceJpaRepositoryImpl.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/portfolioadjustment/service/ClientBalanceReadPlatformService.java
 create mode 100644 mifosng-provider/src/main/java/rest/MainPost.java
 create mode 100644 mifosng-provider/src/main/java/rest/reply/OXMapper.java
 create mode 100644 mifosng-provider/src/main/java/rest/reply/PaypalAckStatus.java
 create mode 100644 mifosng-provider/src/main/java/rest/reply/PaypalFailureDetail.java
 create mode 100644 mifosng-provider/src/main/java/rest/reply/PaypalPayReply.java
 create mode 100644 mifosng-provider/src/main/java/rest/request/PaypalPayDso.java
 create mode 100644 mifosng-provider/src/main/java/rest/request/PaypalReciver.java
 create mode 100644 mifosng-provider/src/main/java/rest/request/PaypalRequestEnvelope.java

diff --git a/mifosng-provider/logo.jpg b/mifosng-provider/logo.jpg
new file mode 100644
index 0000000000000000000000000000000000000000..2d3554fb601a227253423309e7ebb6f0d8b142d4
GIT binary patch
literal 4409
zcmb7@`8U+>`^R51gE6u+wqzOmzGaQczR$?M)u6>vSwpsz?4%fBhRBjJwy}#LvZbuq
z_Zdq<A}VV{`Fj8G`2)Vs`<&}K_jx|A$GOja&UHF-`WZNnHbNNzAP@*}Jv+cD70?H0
zAv82J5ZbdsOG`@!Wu%9miRIim7$cm8l@-nchqH0=USMPA=77Vw1i85R`1twx*)9l)
z2q8px5&Ve%AfU5RC>@lUo}L-O4rfRFzjfLH!07=rkN^P*0bn=?0tcOb0Qdj^42Jyo
z-2Vwm572>VXdz(OnXPpm06`!SFoYHg&_n+Vfxr+NS~@rY6=YRl)3u@(y6qpu&Y@_X
zS}?{b>=GBBQTzUao{@cY8nN?ip63kwAO3&vvksvF)6#*UXQmwd3=Tf~73lv0|AlGb
zw1Nt{tZe>KR<~0N=-7o6J4b(QFP%~VM#z~Dhrj`Cz<((6-)KvUV}q|r{f4OiW~Txq
z1)$jBIe0@3nGoudhwH)zPb(OPR_zf!&SvDFvs8iK^dR-Wx>L)LV()$JYfV6<mWt&!
z$sSOxD0g_K{JFZlutsFNm2GKiGmpDyJ&_iH>P2J={n+Z*Z@6Vk8qH-w`G6R!FTS7f
zQ|3Lm(<<{ytHV~R(xY_pqT<x<AiD$(3w{V0ztJ{&oai&B>K*1zSDfW#`?@jO+8AvO
z+eI`@jE(e(3Hn}VY@)pHIv`+cQ!Q_1g<SiYJ83jHAKuw?nITTcv$>tYc538+%LonX
zf7c2c_q(J-9GKO@k&1T+_bqG!XMEcVv0(fU@xK=9<>b8|`=j?4RnYFNm7k5C5$kcG
zOyvtOK4Vdl-^f?+f}`vqLp7$Q3sT(Ni<w1h=BT$DS&>Hm6{ShL1^I7spL}T!K2rIP
z4Jhh;Vj6|#e37Ke4240KNx$pwEZbKy;I%kd3l1DO`*TC-M&9j49Y%H6kB;<->Xvw1
zKxE0j`R<C%G5_rIGg~!UB`(i@?RCN%+O?2{@6{91`$}T$dQ=&Kx>#VT9~baKsavJs
z9nZ>^)PucpcW+`Hn)jtOJ37HHGPGlVB8Dk<l8)}HQOT_uwItcdtD8|HzA1}*=GE9V
zuH&vI&&Qt<u9r8*Po@Qw@bD`{=Xma09mG@&)GdYMKj>BouENY!$I!gq;`0I$=V2l%
zk5zmQnM{OZW0rlINrT<%y&5{$mOV4E$4@8JL>?6Fx`ZG<lWgQ1i}x$>qaOFrmieIi
z)vh6^2~CcF3YP5C{A0y;Z*A4)j@)=X#qYI7@4q%9jp*a_4I^MkebV7}n!*njKhRsY
zh7%2xJ)KC8LX|5@Zsh)S2Thp9LwH#(OBqk_7N4LkwT(QmjF<Fc7BxOb*+1ByjL)<#
z`;hU>=b=nl53}%9H+J&T36Z~}J;8OgR3s{rjpwj(MRyN*3b@r_tMq)7-7^<HV-LpL
zNp-^H;+k1eb!2u$btUp$eP@wrc42Hy|D5=WQuVN7oom`gb$fr#!%6wCwt<`XCq0xk
zE6V%7!)ylQ;k(y+{&*<W+#;;ZQD_Ao^`>gRuKkP4D|*uLy|hE;S>E;G{kUnR<OR&r
zCH`rNLGy!KFHg93oZo3&;PW`==pq*e15$I2?%6eyqiTIiww7${4C)5F{J$(3u@_8^
zCmn(Fr!Cs(bog34U<=1_q>rb7<I7BBbWw%K+CSU8)MHS^FU&@EV(zCP3b>1_uq0aS
zDK$%CaMS9lfhS*2fQG`dRt9TDu)c?s_FE*xSJTYS3tMDGQ_+uGF4KBlx_r?6ivKPH
zETQ&NA&WmHU0wsV|3H9$oZF&&bY)yx(F4yendQ$XtCn_2FU>!nDr~b9po(cuxT%qF
ze_ubbcGO0P>RuhVzeUSssoK9-1c0++<K+3X^h-~HDtx{NsiVx-?rOnM@p5dBg*NWN
zaeCE9c?#Wjs^N1VotTS%(q3H+&UbH+T-}a}JzzNeM`3mv7rCNkYTc(8L(-2dFWp~*
ziho+WwiL)}GjvoebVSwGw7-`8KuXZf3gTUjCtv+Kpt@hS`PRBh87X?zAko9&<#1EX
zAI5dRJ3PN>d(4S~U*gO&=I)=*vzdC$&=%S^{uVsu@kse&_9ZL{>3Vn6o$nMl7}LD=
z+=~3;g1{tq7_AXoS9`N{eNLRnQBtJtI5g|c#ZB)o;q6~sYLRlN1`4z}Vrw8Q<^D+F
zsHF1Y_LAa^w<?Y$)U~-4wJVNd-ZLofoa6p(8(Y*QggFrr{#7!;690feBY#hNtoEvJ
z3>~Afr+HzQVwU&eGp<!<^$x8Patucg(JY%-fp1&Rh32FY{P)*xEGa8lYoWxhgdSHb
zpl3)~y#A2txE7)Mei>588$*ub9lYJ$?ASDIK?gmh4dCLR^{O|L{t{D_s+qL)1dY&M
zH2Cr1%3lj4VL`R)Jo(>q&{f)=I3_qkmp2dxM1+UPnC9hW8-#iHfierpJm?$^S>ebB
z->VoNhZmF3=or@zPGf-rQJI#yjdtzDMJr8e$vTMqjb?eGNSOgZhZ3(DS!(@UbJq!0
zkmV~=_L(9go4<kXT!yaAe7_r1O|nA_lIX`?oHPo{lE-FyQI;Jde*=lsz&@2{n+#6M
zvH>C*I05mdwe-D7)V5&vMHn-gJltrvmlFSkJ%+U?n^3oPkKdfiifVfuY%y>%Cf6)<
zJWJuTG1g%U;~^on-_aeULUvMb*l`-jn<LCkELl{I&*rns$iEMC3u5kZ!qClL!%1~<
zgc-g8i+ojD(ujT3*W1}M@;&Qj>3yD{ta}8<gPdocPD0XYV$GTCNsJu8C6;j8O6n=_
z(5vA%I+1RwJ~o>XXO!WfK7yAtIY+Aza4AS2b?Kd8_q^>LRkja0?FN2+;OHwcB%Wh!
zaviT@3Wj~P(hbiV9bhr-6l1g4etcs<dx7~B;JY<>`B%hP#`S;OA&1|)O%B3~d%sam
zfhK1*$r@psvQ3@n_gu+*Aab_Od&|@rCOi4$sycbeX!o%Afw6cfmh#+JB8)YCc-n6C
z`eNt8;2Zo7Nllwt>eaG$WhNu7%`PbA;M**s>%+JUHo1z^ugU(Al265ePFX)KgYw-8
zr0GgfvvG;l8U{W4mu&M7S;_4mSp7jtQhj6S!Q!;jZNHzTKO4z!kL>X$DtmI8+q=|P
z-Y4Y=hhB1lnc`39j`Arz>3o&%HNheiZVl!|y)W0$n4~_xwMej0#L0-l-%*O`kQD8@
zuAWFqZSZAmK4A>m7RyrA(y)Hq=SUbJ4pYNm&t;30zxlQi%ZW+62&^(oxwqJItH4_e
zvY>(PifZ%B4Xsx0799^jV@G!;&b*<)0INge%h2T9lF-Px-zt~eXe+Vp_Q|_`bDZb>
zH`EWd{LuW7$9rlA5e?H1eFxP-MFTe+qrDrJ=Rr^jlvdHTzx(4Qo1Du9pGo*?PREC<
zOjBb?f5Vhr>V$t7;!($S^RvzDMz9UP;?K0c(vxV3KIDw))A3FSq4=%b1l~wSi{KH9
z=L9ta$!Rm5PItLpP@H@|;L1e&jN&h=&YQV^Y&F2#blW`$sy=7Y!Pfa_`TB)ByUfQn
zrrOd`+Fdtqjtzd<rG$kXMe%nz-4TqlabW`AemRo#^yi_oGvDJ0-!DlA>M0ieTn^;r
z0AG|@mm$14kfvNSz+C_wq1cSl)?t3`Xxb21ev!^KC4AYzUsD=K3@m~S%9iv#ew6EZ
zt~^vJ|IosM{|ik7Q&<GLF=E)WZ1L;a<&j~Wjg_*hV9D?5Z0huhjq`PjowtgbU53>Y
zbLr!PlWf^bfakq?ugXI-4(jr>KhXc<&Yr3AXJZF0cE>tOy$-n<e6sC`)jk?0Z0uDy
zHOg8~7X4gxNor`&uqX6*teiimC45i!h6M!3vv5s@D>Ge<Uy1ASH9Z&3pIG0-kiN^;
z-O3w8rrKa-CG;X#aemNg^d^=2%lU8Co5@9`)csx?*LPlW4qW~{lnsPrV3AuBdrq$7
z1&-X|gP7(m$I5A^0!)p|(|Vjn@u=wZ=tScjOrV-q1k%wv%JDtq$DiDClg1J&IJ0Hx
z99(iZQ;`^-XGK#2-F9R2+)J2s9PnT!H^L8J;K9U`o{VV6ZBHwozm?=I5)bqEdiO?&
zD9n8|=<?KWQ7LhO-Jas6mUcJG;GLz~sw?V>WkDA&u$^CR$}*SUGLzRt`AOteS3P~1
ziSQs#EMo=fP5N;JfM02~G=T@hN}j+MIOEb^JZT1x$@Httw?9e&uh>%JG*fDtCpb*~
zWoRo4C(t0^U{ZxLukUq_XV{D^hBiQ6skK4-OrImb!UZIV<svj|NFh(HS-AC8E72H%
z01Pv8?J1BF&Qi^@@CLOopf`|+kXoO7S%*mbGG>}6i$$8KO$z%R<V_ZO6RFs=<!xV#
z`{kdUUSIT*GWqq8{Tc6$I}L7OXOLqqZ{%9vIZ9*7fW-95S$PeGq)HQ%I6vZ#&}|WP
zGDpoy8DmYfAN!a0x>`BkXJl!>^a4BdD}0~|q^x*Q2%8`2a{bNLmxL)h<Kl6m#GwMl
z`&NYjZ&1a`J|bMDx6vlpO15>iX7dj&kuGYC1YU@cPD0$Pyc$=&6B!l|+B?bywW%2M
zc(H1lZ=J~T^r@VQBQ}!TWY?j%{L&9fC1$5kL6^{AT`$GH-|rm$R=9xq!B}kJ+aahn
z<&aNaNzz_+$&Ipi%s{PD4{kd#7JYXj30p^_P5W^hJ$fS#cLi2l4Lo1n41VNHtre2=
z(KpQ4`Cx>z?zQH_=+g5tt8Ed4y~c%%F+8b~@%C$<O|dli$5B74-J7T$))~Yi$yI|K
z&@R$OCUiH1Gab`ZPIa(sxoeRxO0<3Q`*r~b{dF{tyOgC(xEi!Zea)U>zOaQ&75(Y?
z4PuL9mSJ|0eW^>q*cMs}oi-y!TtdUvMegRp6=h6r?*-NE`WEgA>gw-vXLCNfV(YDL
zi_S4sOhC@#x$UKJiG3LUq;+0*De>ql@Xm=*_;pt#-&k-PSZuMcvU%S8RcJqpHiyaj
zuMr;l_2KG^&;bJ<U4o!tYeS<U$nW)dh<)pCb`|mWu_wVfeyZtRHzY5v_aK_4jZP@N
zlgA{@W&J8!+2>gqTA#{(>6yHkPUF*Sx`r@r|E6p-F?xO{c+Ru}Q%}(x2%eA{yEQpO
zf<1F*D)aKVZW=BenZM|4_OZ6$#y|lnun*q0R@P{BPZ_k$nY1LX<+QO_Mv$s(y<<>#
z^8(+@r^fm88^1K}WI#=yu%eAEhLJ0Uo?E}g7w%8k?;Za3)4SXK03-pkFj*JQ$A$;$
zYBnUpp;@z}!aY?VsrggDmV{ws7gb)Z!!_@ksGG`Zs9UQ6M=w;oDtuNI3nCmt0^C|T
zs86n>5<YqeC=+E|q2my)?y4>u1AXqc=^>Z>GH0^cq!1<70mfnUWGIW##M%f_z;Ghn
z^YSO@;H%~5Er&N-3oBxxQ$@Cx4R&Iv>+&f79UjLa_8nGSxf(B^P#C#Y`7l{^7w!Ia
zWZ4vj9;siILd2e}hx3N*>{R?rak>8Dkp+R5os>6`@}_MrP83o=jQT091_Ru7348_j
z`l_5Vx;Gr=p74E`eD_jOKvY1Pp%0U|3zgdXH8t4aHj6vXTCb7ira?JB+|DXdj9Z&7
z6-NrFtPupA1_^j@t5x~6%u4GCGqaxvZ?SCsZQS~g`huHL#>3oO_TB>|yH<3R`5dMK
z_Dk>G!^Jxuo-ggb)~80L$ao%?DjTAxuV9=x*_HP0F3!Pk9WWPE3q&RLGS27W1SKtC
QCJ0P+OR^a};&k@^0LiZ&fB*mh

literal 0
HcmV?d00001

diff --git a/mifosng-provider/src/main/java/org/mifosng/platform/GeneratePdf.java b/mifosng-provider/src/main/java/org/mifosng/platform/GeneratePdf.java
new file mode 100644
index 0000000..9e22241
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosng/platform/GeneratePdf.java
@@ -0,0 +1,340 @@
+package org.mifosng.platform;
+
+import java.io.FileOutputStream;
+import java.sql.DriverManager;
+import java.sql.ResultSet;
+
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+
+import com.lowagie.text.Document;
+import com.lowagie.text.Element;
+import com.lowagie.text.Font;
+import com.lowagie.text.FontFactory;
+import com.lowagie.text.Paragraph;
+import com.lowagie.text.pdf.CMYKColor;
+import com.lowagie.text.pdf.PdfContentByte;
+import com.lowagie.text.pdf.PdfPCell;
+import com.lowagie.text.pdf.PdfPTable;
+import com.lowagie.text.pdf.PdfWriter;
+import com.mysql.jdbc.Connection;
+import com.mysql.jdbc.Statement;
+
+public class GeneratePdf {
+
+public static void main(String[] args) throws Exception {
+
+Class.forName("com.mysql.jdbc.Driver");
+Connection conn = (Connection) DriverManager.getConnection(
+"jdbc:mysql://localhost:3306/mifostenant-default", "root",
+"mysql");
+Statement stmt = (Statement) conn.createStatement();
+ResultSet rs = stmt
+.executeQuery("select *from bill_master b,bill_details be where b.id = be.bill_id;");
+// ResultSet rs1 = stmt.executeQuery("select * from bill_details");
+
+for(int i=0;rs.next();i++)
+{
+Document document = new Document();
+
+PdfWriter writer = PdfWriter.getInstance(document,
+new FileOutputStream("tableTilePDF" + i + ".pdf"));
+document.open();
+PdfContentByte pdfContentByte = writer.getDirectContent();
+Font b = new Font(Font.BOLD + Font.BOLD,8);
+Font b1 = new Font(Font.BOLD + Font.UNDERLINE + Font.BOLDITALIC+Font.TIMES_ROMAN,8);
+
+
+pdfContentByte.beginText();
+
+PdfPTable table = new PdfPTable(11);
+table.setWidthPercentage(100);
+
+PdfPCell cell1 = new PdfPCell(
+(new Paragraph("Bill Invoice", FontFactory.getFont(FontFactory.HELVETICA,12, Font.BOLD))));
+cell1.setColspan(11);
+cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
+cell1.setPadding(10.0f);
+table.addCell(cell1);
+PdfPCell cell = new PdfPCell();
+cell.setColspan(2);
+Paragraph para = new Paragraph("Name :", b1);
+Paragraph addr = new Paragraph("Address :", b);
+Paragraph branch = new Paragraph("Branch :", b);
+branch.setSpacingBefore(12);
+
+cell.addElement(para);
+cell.addElement(addr);
+cell.addElement(branch);
+cell.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell);
+PdfPCell cell0 = new PdfPCell();
+Paragraph add0 = new Paragraph("", b);
+Paragraph add1 = new Paragraph(""/*+rs.getString("address_no")+","+rs.getString("street"), b*/);
+add1.setSpacingBefore(10);
+Paragraph add2 = new Paragraph(""/*+rs.getString("city")+","+rs.getString("state")+"-"+rs.getString("zip"), b*/);
+cell0.setColspan(4);
+cell0.disableBorderSide(PdfPCell.LEFT);
+cell0.addElement(add0);
+cell0.addElement(add1);
+cell0.addElement(add2);
+table.addCell(cell0);
+//
+// Image image = Image.getInstance("logo.jpg");
+// image.scaleAbsolute(60,60);
+PdfPCell cell2 = new PdfPCell();
+// cell2.addElement(image);
+cell2.disableBorderSide(PdfPCell.TOP);
+cell2.disableBorderSide(PdfPCell.BOTTOM);
+cell2.disableBorderSide(PdfPCell.LEFT);
+cell2.disableBorderSide(PdfPCell.RIGHT);
+cell2.setColspan(2);
+table.addCell(cell2);
+PdfPCell cell02 = new PdfPCell();
+Paragraph addr1 = new Paragraph("Hugo Technologies LLP",
+FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD,
+new CMYKColor(0, 255, 255,17)));
+Paragraph addr2 = new Paragraph("# 501, Sai Balaji Cubicles,", b);
+Paragraph addr3 = new Paragraph("Raghavendra Society, Kondapur,", b);
+Paragraph addr4 = new Paragraph(" Hyderabad - 500 084, AP, India.",b);
+Paragraph addr5 = new Paragraph(" Tel: +91-40-65141823",b);
+Paragraph addr6 = new Paragraph("www.hugotechnologies.com",b);
+cell02.addElement(addr1);
+cell02.addElement(addr2);
+cell02.addElement(addr3);
+cell02.addElement(addr4);
+cell02.addElement(addr5);
+cell02.addElement(addr6);
+
+cell02.disableBorderSide(PdfPCell.TOP);
+cell02.disableBorderSide(PdfPCell.BOTTOM);
+cell02.disableBorderSide(PdfPCell.LEFT);
+cell2.disableBorderSide(PdfPCell.RIGHT);
+cell02.setColspan(3);
+table.addCell(cell02);
+PdfPCell cell3 = new PdfPCell();
+// cell3.setPadding (1.0f);
+Paragraph BillId = new Paragraph("Client Id: " + rs.getInt("Client_id"), b);
+cell3.setColspan(6);
+cell3.addElement(BillId);
+cell3.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell3);
+PdfPCell cell12 = new PdfPCell();
+Paragraph billNo = new Paragraph("BillNo:"
++ rs.getString("bill_no"), b);
+// billNo.setIndentationLeft(280);
+Paragraph billDate = new Paragraph("Bill Date:"
++ JdbcSupport.getLocalDate(rs, "bill_date"), b);
+// billDate.setIndentationLeft(280);
+Paragraph BillPeriod = new Paragraph("Bill Period:"
++ rs.getString("bill_Period"), b);
+// BillPeriod.setIndentationLeft(280);
+Paragraph dueDate = new Paragraph("Due Date:"
++ JdbcSupport.getLocalDate(rs, "due_date"), b);
+// dueDate.setIndentationLeft(280);
+
+// cell12.disableBorderSide(PdfPCell.TOP);
+// cell12.disableBorderSide(PdfPCell.BOTTOM);
+cell12.disableBorderSide(PdfPCell.LEFT);
+// cell12.disableBorderSide(PdfPCell.RIGHT);
+cell12.addElement(billNo);
+cell12.addElement(billDate);
+cell12.addElement(BillPeriod);
+cell12.setColspan(5);
+cell12.addElement(dueDate);
+table.addCell(cell12);
+PdfPCell cell4 = new PdfPCell();
+
+Paragraph previousbal = new Paragraph("Previous Balance", b);
+Paragraph previousamount = new Paragraph(""
++ rs.getDouble("previous_balance"), b);
+cell4.setColspan(2);
+cell4.addElement(previousbal);
+cell4.addElement(previousamount);
+cell4.disableBorderSide(PdfPCell.TOP);
+// cell5.disableBorderSide(PdfPCell.BOTTOM);
+// cell4.disableBorderSide(PdfPCell.LEFT);
+//cell4.disableBorderSide(PdfPCell.RIGHT);
+
+table.addCell(cell4);
+pdfContentByte.setTextMatrix(390, 405);
+
+PdfPCell cell5 = new PdfPCell();
+Paragraph adjstment = new Paragraph("Adjustment Amount", b);
+Paragraph adjstmentamount = new Paragraph(""
++ rs.getDouble("adjustment_amount"), b);
+cell5.setColspan(2);
+cell5.addElement(adjstment);
+cell5.addElement(adjstmentamount);
+cell5.disableBorderSide(PdfPCell.TOP);
+// cell5.disableBorderSide(PdfPCell.BOTTOM);
+cell5.disableBorderSide(PdfPCell.LEFT);
+//cell5.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell5);
+
+PdfPCell cell6 = new PdfPCell();
+Paragraph paid_amount = new Paragraph("Payments", b);
+Paragraph amount = new Paragraph("" + rs.getDouble("paid_amount"),
+b);
+cell6.setColspan(2);
+cell6.addElement(paid_amount);
+cell6.addElement(amount);
+cell6.disableBorderSide(PdfPCell.TOP);
+// cell5.disableBorderSide(PdfPCell.BOTTOM);
+cell6.disableBorderSide(PdfPCell.LEFT);
+//cell6.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell6);
+
+
+
+
+
+PdfPCell cell7 = new PdfPCell();
+Paragraph charge_amount = new Paragraph("Charge Amount", b);
+Paragraph chargeamount = new Paragraph(""
++ rs.getDouble("charges_amount"), b);
+cell7.setColspan(2);
+cell7.addElement(charge_amount);
+cell7.addElement(chargeamount);
+
+cell7.disableBorderSide(PdfPCell.TOP);
+// cell5.disableBorderSide(PdfPCell.BOTTOM);
+cell7.disableBorderSide(PdfPCell.LEFT);
+// cell7.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell7);
+
+PdfPCell cell8 = new PdfPCell();
+Paragraph due_amount = new Paragraph("Due Amount", b);
+Paragraph dueamount = new Paragraph(
+"" + rs.getDouble("due_amount"), b);
+cell8.setColspan(3);
+cell8.addElement(due_amount);
+cell8.addElement(dueamount);
+
+cell8.disableBorderSide(PdfPCell.TOP);
+// cell5.disableBorderSide(PdfPCell.BOTTOM);
+cell8.disableBorderSide(PdfPCell.LEFT);
+// cell8.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell8);
+                
+
+
+PdfPCell cell9 = new PdfPCell();
+cell9.setColspan(6);
+Paragraph billDetails = new Paragraph("Current Bill Details", b);
+cell9.setPadding(10.0f);
+cell9.setPaddingLeft(100.0f);
+cell9.addElement(billDetails);
+cell9.disableBorderSide(PdfPCell.TOP);
+cell9.disableBorderSide(PdfPCell.BOTTOM);
+cell9.disableBorderSide(PdfPCell.LEFT);
+cell9.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell9);
+
+PdfPCell cell10 = new PdfPCell();
+cell10.setColspan(5);
+Paragraph message = new Paragraph("Promotional Message", b);
+cell10.setPadding(10.0f);
+cell10.setPaddingLeft(100.0f);
+cell10.addElement(message);
+cell10.disableBorderSide(PdfPCell.TOP);
+cell10.disableBorderSide(PdfPCell.BOTTOM);
+cell10.disableBorderSide(PdfPCell.LEFT);
+cell10.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell10);
+
+
+PdfPCell cell23 = new PdfPCell();
+cell23.setColspan(1);
+Paragraph ID = new Paragraph("id", b);
+
+
+//cell10.disableBorderSide(PdfPCell.TOP);
+//cell10.disableBorderSide(PdfPCell.BOTTOM);
+//cell23.disableBorderSide(PdfPCell.LEFT);
+cell23.disableBorderSide(PdfPCell.RIGHT);
+
+
+PdfPCell cell26 = new PdfPCell();
+cell26.setColspan(2);
+Paragraph charge = new Paragraph("Transactions", b);
+
+
+
+cell26.addElement(charge);
+cell26.addElement(charge);
+cell26.addElement(charge);
+cell23.addElement(charge);
+//cell10.disableBorderSide(PdfPCell.TOP);
+//cell10.disableBorderSide(PdfPCell.BOTTOM);
+cell26.disableBorderSide(PdfPCell.LEFT);
+cell26.disableBorderSide(PdfPCell.RIGHT);
+//cell23.enableBorderSide(PdfPCell.BOTTOM);
+cell23.addElement(ID);
+table.addCell(cell23);
+table.addCell(cell26);
+PdfPCell cell27 = new PdfPCell();
+cell27.setColspan(0);
+Paragraph Date = new Paragraph("Date", b);
+
+cell27.addElement(Date);
+//cell10.disableBorderSide(PdfPCell.TOP);
+//cell10.disableBorderSide(PdfPCell.BOTTOM);
+cell27.disableBorderSide(PdfPCell.LEFT);
+cell27.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell27);
+
+PdfPCell cell28 = new PdfPCell();
+cell28.setColspan(1);
+Paragraph Amount = new Paragraph("Amount", b);
+
+cell28.addElement(Amount);
+//cell10.disableBorderSide(PdfPCell.TOP);
+//cell10.disableBorderSide(PdfPCell.BOTTOM);
+cell28.disableBorderSide(PdfPCell.LEFT);
+cell28.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell28);
+
+
+cell28.addElement(Amount);
+//cell10.disableBorderSide(PdfPCell.TOP);
+//cell10.disableBorderSide(PdfPCell.BOTTOM);
+cell28.disableBorderSide(PdfPCell.LEFT);
+cell28.disableBorderSide(PdfPCell.RIGHT);
+table.addCell(cell28);
+
+
+PdfPCell cell24 = new PdfPCell();
+cell24.setColspan(0);
+cell24.disableBorderSide(PdfPCell.TOP);
+cell24.disableBorderSide(PdfPCell.BOTTOM);
+table.addCell(cell24);
+PdfPCell cell25 = new PdfPCell();
+Paragraph charge1 = new Paragraph("Transactions", b);
+
+cell25.setColspan(5);
+cell25.setPadding(70f);
+cell25.addElement(charge1);
+table.addCell(cell25);
+
+
+
+
+
+
+pdfContentByte.endText();
+document.add(table);
+document.close();
+
+Runtime.getRuntime().exec(
+"rundll32 url.dll,FileProtocolHandler tableTilePDF"+i+".pdf");
+
+}
+rs.close();
+
+// rs1.close();
+
+
+
+
+}
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/GeneratePdf.java b/mifosng-provider/src/main/java/org/mifosplatform/GeneratePdf.java
new file mode 100644
index 0000000..1ee62a8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/GeneratePdf.java
@@ -0,0 +1,55 @@
+package org.mifosplatform;
+
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+
+import com.lowagie.text.Document;
+import com.lowagie.text.DocumentException;
+import com.lowagie.text.Element;
+import com.lowagie.text.Font;
+import com.lowagie.text.FontFactory;
+import com.lowagie.text.Image;
+import com.lowagie.text.Paragraph;
+import com.lowagie.text.pdf.CMYKColor;
+import com.lowagie.text.pdf.PdfWriter;
+
+public class GeneratePdf {
+
+	public static void main(String[] args) throws DocumentException, MalformedURLException, IOException {
+
+	      Document document = new Document();
+	      PdfWriter.getInstance(document, new FileOutputStream("pdf.pdf"));
+	      document.open();
+
+	      Paragraph paragraph=new Paragraph("FIXED DEPOSIT CERTIFICATE ",FontFactory.getFont(FontFactory.COURIER, 14, Font.BOLD,	new CMYKColor(0, 255, 0, 0)));
+
+	      paragraph.setAlignment(Element.ALIGN_CENTER);
+	      paragraph.setSpacingAfter(30);
+
+	      document.add(paragraph);
+	      Image img = Image.getInstance("logo.jpg");
+		    img.scaleAbsolute(70,80);
+		    img.setAbsolutePosition(450,670);
+	     document.add(img);
+	     Font font= FontFactory.getFont(FontFactory.COURIER, 10, Font.BOLD);
+	     document.add(new Paragraph(""));
+	      document.add(new Paragraph(""));
+	      document.add(new Paragraph("Extenal Id:",font));
+	      document.add(new Paragraph("Created Date:",font));
+	      document.add(new Paragraph("Mature date:",font));
+	      document.add(new Paragraph("Client Name:",font));
+	      document.add(new Paragraph("Amount:",font));
+	      document.add(new Paragraph("Interest Rate:",font));
+	      document.add(new Paragraph("Tenure:",font));
+	      document.add(new Paragraph("Maturity Amount:",font));
+
+
+
+	      document.close();
+	    } 
+	     
+
+	}
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/Hai.java b/mifosng-provider/src/main/java/org/mifosplatform/Hai.java
new file mode 100644
index 0000000..e7ea9ff
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/Hai.java
@@ -0,0 +1,10 @@
+package org.mifosplatform;
+
+
+public class Hai {
+	public  static void main(String[] args) {
+		
+		System.out.println("hai");
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/data/PeriodData.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/data/PeriodData.java
new file mode 100644
index 0000000..af6f482
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/data/PeriodData.java
@@ -0,0 +1,30 @@
+package org.mifosplatform.infrastructure.configuration.data;
+
+public class PeriodData {
+
+
+	private final String subscription_type;
+	private final Long id;
+	private final String day_name;
+
+	public PeriodData(final String subscription_type,final Long id,final String day_name)
+	{
+		this.subscription_type=subscription_type;
+		this.id=id;
+		this.day_name=day_name;
+	}
+
+	public String getDay_name() {
+		return day_name;
+	}
+
+	public String getSubscription_type() {
+		return subscription_type;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/BillingReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/BillingReadPlatformService.java
new file mode 100644
index 0000000..6420d49
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/BillingReadPlatformService.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.infrastructure.configuration.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+
+public interface BillingReadPlatformService {
+
+	 List<PeriodData> retrieveAllPlatformPeriod();
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PaymentsReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PaymentsReadPlatformService.java
new file mode 100644
index 0000000..1ffbe1b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PaymentsReadPlatformService.java
@@ -0,0 +1,5 @@
+package org.mifosplatform.infrastructure.configuration.service;
+
+public class PaymentsReadPlatformService {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformService.java
new file mode 100644
index 0000000..aa79df8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformService.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.infrastructure.configuration.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+
+public interface PeriodReadPlatformService {
+
+	 List<PeriodData> retrieveAllPlatformPeriod();
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformServiceImpl.java
new file mode 100644
index 0000000..b04977b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/configuration/service/PeriodReadPlatformServiceImpl.java
@@ -0,0 +1,51 @@
+package org.mifosplatform.infrastructure.configuration.service;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+
+@Service
+public class PeriodReadPlatformServiceImpl implements PeriodReadPlatformService{
+
+
+	  private final JdbcTemplate jdbcTemplate;
+	    private final PlatformSecurityContext context;
+
+	    @Autowired
+	    public PeriodReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+	        this.context = context;
+	        this.jdbcTemplate = new JdbcTemplate(dataSource);
+	    }
+	@Override
+	public List<PeriodData> retrieveAllPlatformPeriod() {
+		  context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.contract_type as subscription_type,s.contract_type as contract_type from contract_period s";
+
+	        RowMapper<PeriodData> rm = new PeriodMapper();
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] {});
+	}
+
+	 private static final class PeriodMapper implements RowMapper<PeriodData> {
+
+	        @Override
+	        public PeriodData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String type = rs.getString("subscription_type");
+	            String contractType = rs.getString("contract_type");
+
+	            return new PeriodData(type,id,contractType);
+	        }
+	 }
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/FileUtils.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/FileUtils.java
index 05879a9..9e0dda5 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/FileUtils.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/FileUtils.java
@@ -24,7 +24,8 @@ public class FileUtils {
 
     private final static Logger logger = LoggerFactory.getLogger(FileUtils.class);
 
-    public static final String MIFOSX_BASE_DIR = System.getProperty("user.home") + File.separator + ".mifosx";
+    public static final String MIFOSX_BASE_DIR = System.getProperty("user.home") + File.separator + "billing";
+   // public static final String MIFOSX_BASE_DIR = System.getProperty("user.home");
 
     public static Random random = new Random();
 
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/GmailBackedPlatformEmailService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/GmailBackedPlatformEmailService.java
index 0141a69..d2e3ca1 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/GmailBackedPlatformEmailService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/GmailBackedPlatformEmailService.java
@@ -14,10 +14,10 @@ public class GmailBackedPlatformEmailService implements PlatformEmailService {
     public void sendToUserAccount(final EmailDetail emailDetail, final String unencodedPassword) {
         Email email = new SimpleEmail();
 
-        String authuserName = "support@cloudmicrofinance.com";
+        String authuserName = "info@hugotechnologies.com";
 
-        String authuser = "support@cloudmicrofinance.com";
-        String authpwd = "support80";
+        String authuser = "manojanand@hugotechnologies.com";
+        String authpwd = "manoj@123";
 
         // Very Important, Don't use email.setAuthentication()
         email.setAuthenticator(new DefaultAuthenticator(authuser, authpwd));
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java.rej b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java.rej
new file mode 100644
index 0000000..a605c16
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java.rej
@@ -0,0 +1,76 @@
+diff a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/api/ReportsApiResource.java	(rejected hunks)
+@@ -1,5 +1,6 @@
+ package org.mifosplatform.infrastructure.dataqueries.api;
+ 
++import java.io.File;
+ import java.util.HashMap;
+ import java.util.Map;
+ import java.util.Set;
+@@ -13,6 +14,7 @@ import javax.ws.rs.core.Context;
+ import javax.ws.rs.core.MediaType;
+ import javax.ws.rs.core.MultivaluedMap;
+ import javax.ws.rs.core.Response;
++import javax.ws.rs.core.Response.ResponseBuilder;
+ import javax.ws.rs.core.StreamingOutput;
+ import javax.ws.rs.core.UriInfo;
+ 
+@@ -50,6 +52,22 @@ public class ReportsApiResource {
+ 
+         boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+         boolean exportCsv = ApiParameterHelper.exportCsv(uriInfo.getQueryParameters());
++        
++        boolean exportPdf = ApiParameterHelper.exportPdf(uriInfo.getQueryParameters());
++
++    			if(exportPdf)
++    		
++    			{	
++    				String result = this.readExtraDataAndReportingService
++    						.retrieveReportPDF(".", ".", extractedQueryParams);
++
++    				return Response
++    						.ok()
++    						.entity(result)
++    						.header("Content-Disposition",
++    								"attachment;filename=ReportList.pdf").build();
++    			
++    			}
+ 
+         if (!exportCsv) {
+             GenericResultsetData result = this.readExtraDataAndReportingService.retrieveGenericResultset(".", ".", extractedQueryParams);
+@@ -75,6 +93,7 @@ public class ReportsApiResource {
+         boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+         boolean exportCsv = ApiParameterHelper.exportCsv(uriInfo.getQueryParameters());
+         boolean parameterType = ApiParameterHelper.parameterType(uriInfo.getQueryParameters());
++        boolean exportPdf = ApiParameterHelper.exportPdf(uriInfo.getQueryParameters());
+ 
+         checkUserPermissionForReport(reportName, parameterType);
+ 
+@@ -89,6 +108,28 @@ public class ReportsApiResource {
+         } else {
+             parameterTypeValue = "parameter";
+         }
++        
++        
++     // PDF format
++		
++     		if(exportPdf)
++     		{	
++     			
++     			Map<String, String> reportParams = getReportParams(queryParams, false);
++     			String pdfFileName = this.readExtraDataAndReportingService
++     					.retrieveReportPDF(reportName, parameterTypeValue, reportParams);
++     			
++     			File file=new File(pdfFileName);
++
++     			ResponseBuilder response=Response.ok(file);
++     					response.header("Content-Disposition",
++     							"attachment; filename=\""
++     					+pdfFileName+"\"");
++     					response.header("content-Type","application/pdf");
++     					
++     					return response.build();
++     		
++     		}
+ 
+         if (!exportCsv) {
+ 
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java.rej b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java.rej
new file mode 100644
index 0000000..558edb5
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java.rej
@@ -0,0 +1,11 @@
+diff a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingService.java	(rejected hunks)
+@@ -15,5 +15,8 @@ public interface ReadReportingService {
+ 
+     Response processPentahoRequest(String reportName, String outputType, Map<String, String> queryParams);
+ 
++    String retrieveReportPDF(String name, String type,Map<String, String> extractedQueryParams);
++    
++    
+     String getReportType(String reportName);
+ }
+\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java
index c353858..c6ca499 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java
@@ -144,6 +144,8 @@ public class ReadReportingServiceImpl implements ReadReportingService {
         return writer;
     }
 
+
+
     @Override
     public GenericResultsetData retrieveGenericResultset(final String name, final String type, final Map<String, String> queryParams) {
 
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java.rej b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java.rej
new file mode 100644
index 0000000..caedb53
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java.rej
@@ -0,0 +1,118 @@
+diff a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadReportingServiceImpl.java	(rejected hunks)
+@@ -2,6 +2,8 @@ package org.mifosplatform.infrastructure.dataqueries.service;
+ 
+ import java.io.ByteArrayInputStream;
+ import java.io.ByteArrayOutputStream;
++import java.io.File;
++import java.io.FileOutputStream;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.io.OutputStream;
+@@ -18,6 +20,7 @@ import javax.ws.rs.core.StreamingOutput;
+ import org.apache.commons.lang.StringUtils;
+ import org.mifosng.platform.exceptions.PlatformDataIntegrityException;
+ import org.mifosng.platform.exceptions.ReportNotFoundException;
++import org.mifosng.platform.infrastructure.FileUtils;
+ import org.mifosplatform.infrastructure.dataqueries.data.GenericResultsetData;
+ import org.mifosplatform.infrastructure.dataqueries.data.ResultsetColumnHeader;
+ import org.mifosplatform.infrastructure.dataqueries.data.ResultsetDataRow;
+@@ -41,6 +44,11 @@ import org.slf4j.LoggerFactory;
+ import org.springframework.beans.factory.annotation.Autowired;
+ import org.springframework.stereotype.Service;
+ 
++import com.lowagie.text.Document;
++import com.lowagie.text.PageSize;
++import com.lowagie.text.pdf.PdfPTable;
++import com.lowagie.text.pdf.PdfWriter;
++
+ @Service
+ public class ReadReportingServiceImpl implements ReadReportingService {
+ 
+@@ -332,4 +342,85 @@ public class ReadReportingServiceImpl implements ReadReportingService {
+         }
+     }
+ 
+-}
+\ No newline at end of file
++	@Override
++public String retrieveReportPDF(final String reportName,final String type, final Map<String, String> queryParams) {
++
++		    	String fileLocation=FileUtils.MIFOSX_BASE_DIR+File.separator+"";
++		    	if(!new File(fileLocation).isDirectory())
++		    	{
++		    	 new File(fileLocation).mkdirs();	
++		    	}
++
++		    	String genaratePdf=fileLocation+File.separator+reportName+".pdf";
++		    	
++		    	
++		    try
++		    {
++		    GenericResultsetData result = retrieveGenericResultset(
++		    		reportName, type, queryParams);
++		    	
++
++		    List<ResultsetColumnHeader> columnHeaders = result.getColumnHeaders();
++		    List<ResultsetDataRow> data = result.getData();
++		    List<String> row;
++
++		    logger.info("NO. of Columns: " + columnHeaders.size());
++		    Integer chSize = columnHeaders.size();
++
++		    Document document = new Document(PageSize.B0.rotate());
++
++		    PdfWriter.getInstance(document,
++		    	      new FileOutputStream(new File(fileLocation+reportName+".pdf")));
++		    	document.open();
++		     
++		    PdfPTable table = new PdfPTable(chSize);
++		    table.setWidthPercentage(100);
++
++		    for (int i = 0; i < chSize; i++) {
++		    	 
++		    	table.addCell(columnHeaders.get(i).getColumnName());
++		    	
++		    }
++		    table.completeRow();
++
++		    Integer rSize;
++		    String currColType;
++		    String currVal;
++		    logger.info("NO. of Rows: " + data.size());
++		    for (int i = 0; i < data.size(); i++) {
++		    	row = data.get(i).getRow();
++		    	rSize = row.size();
++		    	for (int j = 0; j < rSize; j++) {
++		    		currColType = columnHeaders.get(j).getColumnType();
++		    		currVal = row.get(j);
++		    		if (currVal != null) {
++		    			if (currColType.equals("DECIMAL")
++		    					|| currColType.equals("DOUBLE")
++		    					|| currColType.equals("BIGINT")
++		    					|| currColType.equals("SMALLINT")
++		    					|| currColType.equals("INT"))
++		    			{
++		    				
++		    			table.addCell(currVal.toString());
++		    		}
++		    			else
++		    			{
++		    				table.addCell(currVal.toString());
++		    			}
++		    		}
++		    	}
++		    }
++		      table.completeRow();
++		      document.add(table);
++		    document.close();
++		    return genaratePdf;
++		    }
++		    				
++		    				catch (Exception e) {
++		    					throw new PlatformDataIntegrityException(
++		    							"error.msg.exception.error", e.getMessage());
++		    				}
++
++		    			}
++	}
++
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadWriteNonCoreDataServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadWriteNonCoreDataServiceImpl.java
index 4419b33..fad26ca 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadWriteNonCoreDataServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/dataqueries/service/ReadWriteNonCoreDataServiceImpl.java
@@ -531,6 +531,8 @@ public class ReadWriteNonCoreDataServiceImpl implements
 
 				if (rsch.getColumnType().equalsIgnoreCase("int"))
 					addCodesValueIfNecessary(rsch, "_cd");
+				if (rsch.getColumnType().equalsIgnoreCase("datetime"))
+					addCodesValueIfNecessary(rsch, "_cd");
 
 				rsch.setColumnDisplayType();
 
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/commands/AdjustmentCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/commands/AdjustmentCommand.java
new file mode 100644
index 0000000..dca1380
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/commands/AdjustmentCommand.java
@@ -0,0 +1,145 @@
+package org.mifosplatform.portfolio.adjustment.commands;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import org.joda.time.LocalDate;
+
+public class AdjustmentCommand {
+	//Long client_id;
+	LocalDate adjustment_date;
+	String adjustment_code;
+	String adjustment_type;
+	BigDecimal amount_paid;
+	Long bill_id;
+	Long external_id;
+	boolean is_deleted;
+	String Remarks;
+/*	Long createdby_id;
+	LocalDate created_date;
+	LocalDate lastmodified_date;
+	Long lastmodifiedby_id;*/
+
+	public AdjustmentCommand(LocalDate adjustment_date,String adjustment_code,String adjustment_type,BigDecimal amount_paid,Long bill_id,Long external_id,
+			String Remarks)
+	{
+		//this.client_id=client_id;
+		this.adjustment_date=adjustment_date;
+		this.adjustment_code=adjustment_code;
+		this.adjustment_type=adjustment_type;
+		this.amount_paid=amount_paid;
+		this.bill_id=bill_id;
+		this.external_id=external_id;
+		//this.is_deleted=is_deleted;
+		this.Remarks=Remarks;
+	/*	this.createdby_id=createdby_id;
+		this.created_date=created_date;
+		this.lastmodified_date=lastmodified_date;
+		this.lastmodifiedby_id=lastmodifiedby_id;*/
+
+	}
+
+
+
+
+	 public boolean isIs_deleted() {
+			return is_deleted;
+		}
+
+
+		public void setIs_deleted(boolean is_deleted) {
+			this.is_deleted = is_deleted;
+		}
+
+	public LocalDate getAdjustment_date() {
+		return adjustment_date;
+	}
+
+	public void setAdjustment_date(LocalDate adjustment_date) {
+		this.adjustment_date = adjustment_date;
+	}
+
+	public String getAdjustment_code() {
+		return adjustment_code;
+	}
+
+	public void setAdjustment_code(String adjustment_code) {
+		this.adjustment_code = adjustment_code;
+	}
+
+	public String getAdjustment_type() {
+		return adjustment_type;
+	}
+
+	public void setAdjustment_type(String adjustment_type) {
+		this.adjustment_type = adjustment_type;
+	}
+
+	public BigDecimal getAmount_paid() {
+		return amount_paid;
+	}
+
+	public void setAmount_paid(BigDecimal amount_paid) {
+		this.amount_paid = amount_paid;
+	}
+
+	public Long getBill_id() {
+		return bill_id;
+	}
+
+	public void setBill_id(Long bill_id) {
+		this.bill_id = bill_id;
+	}
+
+public Long getExternal_id() {
+		return external_id;
+	}
+
+	public void setExternal_id(Long external_id) {
+		this.external_id = external_id;
+	}
+
+
+
+	public String getRemarks() {
+		return Remarks;
+	}
+
+	public void setRemarks(String remarks) {
+		Remarks = remarks;
+	}
+
+/*	public Long getCreatedby_id() {
+		return createdby_id;
+	}
+
+	public void setCreatedby_id(Long createdby_id) {
+		this.createdby_id = createdby_id;
+	}
+
+	public LocalDate getCreated_date() {
+		return created_date;
+	}
+
+	public void setCreated_date(LocalDate created_date) {
+		this.created_date = created_date;
+	}
+
+	public LocalDate getLastmodified_date() {
+		return lastmodified_date;
+	}
+
+	public void setLastmodified_date(LocalDate lastmodified_date) {
+		this.lastmodified_date = lastmodified_date;
+	}
+
+	public Long getLastmodifiedby_id() {
+		return lastmodifiedby_id;
+	}
+
+	public void setLastmodifiedby_id(Long lastmodifiedby_id) {
+		this.lastmodifiedby_id = lastmodifiedby_id;
+	}*/
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentCodeData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentCodeData.java
new file mode 100644
index 0000000..07080fe
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentCodeData.java
@@ -0,0 +1,35 @@
+package org.mifosplatform.portfolio.adjustment.data;
+
+import java.util.Collection;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.discountmaster.commands.Discount;
+
+public class AdjustmentCodeData {
+
+	private final Collection<Discount> datass;
+	private final List<AdjustmentData> data;
+	private final LocalDate adjustment_date;
+
+	public AdjustmentCodeData(Collection<Discount> datass,
+			List<AdjustmentData> data) {
+		this.data=data;
+		this.datass=datass;
+		this.adjustment_date=new LocalDate();
+	}
+
+	public Collection<Discount> getDatass() {
+		return datass;
+	}
+
+	public List<AdjustmentData> getData() {
+		return data;
+	}
+
+	public LocalDate getStartDate() {
+		return adjustment_date;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentData.java
new file mode 100644
index 0000000..1c54314
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/data/AdjustmentData.java
@@ -0,0 +1,145 @@
+package org.mifosplatform.portfolio.adjustment.data;
+import java.math.BigDecimal;
+import java.util.Date;
+import org.joda.time.LocalDate;
+public class AdjustmentData {
+	Long id;
+	Long client_id;
+	LocalDate adjustment_date;
+	String adjustment_code;
+	String adjustment_type;
+	BigDecimal amount_paid;
+	Long bill_id;
+	Long external_id;
+	//boolean is_deleted;
+	String Remarks;
+/*	Long createdby_id;
+	LocalDate created_date;
+	LocalDate lastmodified_date;
+	Long lastmodifiedby_id;*/
+
+	public AdjustmentData(Long id,Long client_id,LocalDate adjustment_date,String adjustment_code,String adjustment_type,BigDecimal amount_paid,Long bill_id,Long external_id,
+			String Remarks)
+	{
+		this.id=id;
+		this.client_id=client_id;
+		this.adjustment_date=adjustment_date;
+		this.adjustment_code=adjustment_code;
+		this.adjustment_type=adjustment_type;
+		this.amount_paid=amount_paid;
+		this.bill_id=bill_id;
+		this.external_id=external_id;
+		//this.is_deleted=is_deleted;
+		this.Remarks=Remarks;
+	/*	this.createdby_id=createdby_id;
+		this.created_date=created_date;
+		this.lastmodified_date=lastmodified_date;
+		this.lastmodifiedby_id=lastmodifiedby_id;*/
+
+	}
+
+
+
+	public AdjustmentData(Long id, String adjustment_code,
+			String adjustment_description) {
+
+		this.id=id;
+		this.adjustment_code=adjustment_code;
+		this.adjustment_type=adjustment_description;
+		// TODO Auto-generated constructor stub
+	}
+
+
+
+	public LocalDate getAdjustment_date() {
+		return adjustment_date;
+	}
+
+	public void setAdjustment_date(LocalDate adjustment_date) {
+		this.adjustment_date = adjustment_date;
+	}
+
+	public String getAdjustment_code() {
+		return adjustment_code;
+	}
+
+	public void setAdjustment_code(String adjustment_code) {
+		this.adjustment_code = adjustment_code;
+	}
+
+	public String getAdjustment_type() {
+		return adjustment_type;
+	}
+
+	public void setAdjustment_type(String adjustment_type) {
+		this.adjustment_type = adjustment_type;
+	}
+
+	public BigDecimal getAmount_paid() {
+		return amount_paid;
+	}
+
+	public void setAmount_paid(BigDecimal amount_paid) {
+		this.amount_paid = amount_paid;
+	}
+
+	public Long getBill_id() {
+		return bill_id;
+	}
+
+	public void setBill_id(Long bill_id) {
+		this.bill_id = bill_id;
+	}
+
+public Long getExternal_id() {
+		return external_id;
+	}
+
+	public void setExternal_id(Long external_id) {
+		this.external_id = external_id;
+	}
+
+
+
+	public String getRemarks() {
+		return Remarks;
+	}
+
+	public void setRemarks(String remarks) {
+		Remarks = remarks;
+	}
+
+/*	public Long getCreatedby_id() {
+		return createdby_id;
+	}
+
+	public void setCreatedby_id(Long createdby_id) {
+		this.createdby_id = createdby_id;
+	}
+
+	public LocalDate getCreated_date() {
+		return created_date;
+	}
+
+	public void setCreated_date(LocalDate created_date) {
+		this.created_date = created_date;
+	}
+
+	public LocalDate getLastmodified_date() {
+		return lastmodified_date;
+	}
+
+	public void setLastmodified_date(LocalDate lastmodified_date) {
+		this.lastmodified_date = lastmodified_date;
+	}
+
+	public Long getLastmodifiedby_id() {
+		return lastmodifiedby_id;
+	}
+
+	public void setLastmodifiedby_id(Long lastmodifiedby_id) {
+		this.lastmodifiedby_id = lastmodifiedby_id;
+	}*/
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/Adjustment.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/Adjustment.java
new file mode 100644
index 0000000..56295ed
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/Adjustment.java
@@ -0,0 +1,135 @@
+package org.mifosplatform.portfolio.adjustment.domain;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.OneToMany;
+import javax.persistence.OrderBy;
+import javax.persistence.Table;
+
+import org.hibernate.annotations.LazyCollection;
+import org.hibernate.annotations.LazyCollectionOption;
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.domain.AbstractAuditableCustom;
+import org.mifosplatform.useradministration.domain.AppUser;
+
+@Entity
+@Table(name = "adjustment")
+public class Adjustment extends AbstractAuditableCustom<AppUser, Long> {
+
+	@Column(name = "client_id", nullable = false, length = 20)
+	private Long client_id;
+
+	@Column(name = "adjustment_date", nullable = false)
+	private Date adjustment_date;
+
+	@Column(name = "adjustment_code", nullable = false, length = 10)
+	private String adjustment_code;
+
+	@Column(name = "adjustment_type", nullable = false, length = 20)
+	private String adjustment_type;
+
+	@Column(name = "adjustment_amount", nullable = false, length = 20)
+	private BigDecimal amount_paid;
+
+	@Column(name = "bill_id", nullable = false, length = 20)
+	private Long bill_id;
+
+	@Column(name = "external_id", nullable = false, length = 20)
+	private Long external_id;
+	/*
+	 * @Column(name = "is_deleted", nullable = false) private boolean
+	 * is_deleted;
+	 */
+
+	@Column(name = "remarks", nullable = false, length = 200)
+	private String Remarks;
+
+	@OrderBy(value = "id")
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@OneToMany(cascade = CascadeType.ALL, mappedBy = "clientId", orphanRemoval = true)
+	private List<ClientBalance> clientBalances = new ArrayList<ClientBalance>();
+
+	@OrderBy(value = "id")
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@OneToMany(cascade = CascadeType.ALL, mappedBy = "client_id", orphanRemoval = true)
+	private List<Adjustment> adjustment = new ArrayList<Adjustment>();
+
+
+
+	/*
+	 * @Column(name = "createdby_id", nullable = false, length = 20) private
+	 * Long createdby_id;
+	 *
+	 * @Column(name = "created_date", nullable = false) private Date
+	 * created_date;
+	 *
+	 * @Column(name = "lastmodified_date", nullable = false) private Date
+	 * lastmodified_date;
+	 *
+	 * @Column(name = "lastmodifiedby_id", nullable = false, length = 20)
+	 * private Long lastmodifiedby_id;
+	 */
+	
+	
+	public Adjustment(Long client_id, LocalDate adjustment_date,
+			String adjustment_code, String adjustment_type,
+			BigDecimal amount_paid, Long bill_id, Long external_id,
+			String Remarks) {
+		this.client_id = client_id;
+		this.adjustment_date = adjustment_date.toDate();
+		this.adjustment_code = adjustment_code;
+		this.adjustment_type = adjustment_type;
+		this.amount_paid = amount_paid;
+		this.bill_id = bill_id;
+		this.external_id = external_id;
+		// this.is_deleted=is_deleted;
+		this.Remarks = Remarks;
+		/*
+		 * this.createdby_id=createdby_id;
+		 * this.created_date=created_date.toDate();
+		 * this.lastmodified_date=lastmodified_date.toDate();
+		 * this.lastmodifiedby_id=lastmodifiedby_id;
+		 */
+	}
+
+	public static Adjustment create(Long client_id, LocalDate adjustment_date,
+			String adjustment_code, String adjustment_type,
+			BigDecimal amount_paid, Long bill_id, Long external_id,
+			String Remarks) {
+		return new Adjustment(client_id, adjustment_date, adjustment_code,
+				adjustment_type, amount_paid, bill_id, external_id, Remarks);
+	}
+
+	public Adjustment() {
+
+	}
+
+	public void updateclientBalances(ClientBalance clientBalance) {
+		clientBalance.updateClient(client_id);
+		this.clientBalances.add(clientBalance);
+
+	}
+
+	public void updateAdjustmen(Adjustment adjustment)
+	{
+		adjustment.updateAdjustmen(adjustment);
+		this.adjustment.add(adjustment);
+	}
+
+
+	public List<ClientBalance> getClientBalances() {
+		return clientBalances;
+	}
+
+	public void updateBillId(Long billId) {
+	this.bill_id=billId;
+		
+	}
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentCommandValidator.java
new file mode 100644
index 0000000..b697be1
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentCommandValidator.java
@@ -0,0 +1,37 @@
+package org.mifosplatform.portfolio.adjustment.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+
+public class AdjustmentCommandValidator {
+
+			
+	private final AdjustmentCommand command;
+
+			public AdjustmentCommandValidator(final AdjustmentCommand
+					command) {
+				this.command=command;
+			}
+
+
+			public void validateForCreate() {
+		         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+				DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("adjustment");
+				baseDataValidator.reset().parameter("adjustment_date").value(command.getAdjustment_date()).notBlank().notNull();
+				baseDataValidator.reset().parameter("adjustment_code").value(command.getAdjustment_code()).notBlank().notNull();
+				baseDataValidator.reset().parameter("adjustment_type").value(command.getAdjustment_type()).notBlank().notNull();
+				baseDataValidator.reset().parameter("amount_paid").value(command.getAmount_paid()).notBlank().notNull();
+				if (!dataValidationErrors.isEmpty()) {
+
+					throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+				}
+			}
+		}
+
+
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentRepository.java
new file mode 100644
index 0000000..bb5ff46
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/AdjustmentRepository.java
@@ -0,0 +1,7 @@
+package org.mifosplatform.portfolio.adjustment.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+public interface AdjustmentRepository extends JpaRepository<Adjustment, Long>, JpaSpecificationExecutor<Adjustment>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalance.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalance.java
new file mode 100644
index 0000000..6e4e2b1
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalance.java
@@ -0,0 +1,81 @@
+package org.mifosplatform.portfolio.adjustment.domain;
+
+import java.math.BigDecimal;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "client_balance")
+public class ClientBalance {
+	
+	@Id
+	@GeneratedValue
+	@Column(name="id")
+	private Long id;
+
+	@Column(name = "client_id", nullable = false, length = 20)
+	private Long clientId;
+
+	@Column(name = "balance_amount", nullable = false, length = 20)
+	private BigDecimal balanceAmount;
+	
+	
+
+	public static ClientBalance create(Long clientId,
+			BigDecimal balanceAmount) {
+		return new ClientBalance(clientId, balanceAmount);
+	}
+
+	public ClientBalance(Long clientId, BigDecimal balanceAmount) {
+
+		this.clientId = clientId;
+		this.balanceAmount = balanceAmount;
+	}
+	
+	public ClientBalance(Long id,Long clientId, BigDecimal balanceAmount,BigDecimal dueAmount) {
+		this.id=id;
+		this.clientId=clientId;
+		this.balanceAmount = balanceAmount;
+		
+	}
+
+
+
+public ClientBalance()
+{
+
+}
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+
+	public BigDecimal getBalanceAmount() {
+		return balanceAmount;
+	}
+
+	public void setBalanceAmount(BigDecimal balanceAmount) {
+		this.balanceAmount = balanceAmount;
+	}
+
+	public void updateClient(Long clientId){
+		this.clientId = clientId;
+	}
+
+	
+
+	public void updateDueAmount(BigDecimal dueAmount) {
+		
+		
+	}
+
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalanceRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalanceRepository.java
new file mode 100644
index 0000000..22d392c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/domain/ClientBalanceRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.adjustment.domain;
+
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ClientBalanceRepository extends JpaRepository<ClientBalance, Long>, JpaSpecificationExecutor<ClientBalance>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformService.java
new file mode 100644
index 0000000..cb8f417
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformService.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+import java.util.List;
+
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentData;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+
+public interface AdjustmentReadPlatformService {
+	List<ClientBalanceData> retrieveAllAdjustments(Long id);
+
+	List<AdjustmentData> retrieveAllAdjustmentsCodes();
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformServiceImpl.java
new file mode 100644
index 0000000..2888ec3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentReadPlatformServiceImpl.java
@@ -0,0 +1,94 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentData;
+import org.mifosplatform.portfolio.adjustment.service.ClientBalanceReadPlatformServiceImpl.ClientBalanceMapper;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class AdjustmentReadPlatformServiceImpl implements AdjustmentReadPlatformService{
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  AdjustmentReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+
+	protected static final class AdjustmentMapperForId implements RowMapper<ClientBalanceData> {
+
+		@Override
+		public ClientBalanceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+            Long id=JdbcSupport.getLong(rs, "id");
+			Long clientId = JdbcSupport.getLong(rs, "client_id");
+			BigDecimal balanceAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs,"amount_paid");
+			return new ClientBalanceData(id,clientId,balanceAmount);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id, d.client_id as client_id , d.amount_paid as paid_amount  from adjustment d";
+		}
+}
+
+
+
+
+	@Override
+	public List<ClientBalanceData> retrieveAllAdjustments(Long id){
+		 this.context.authenticatedUser();
+		 ClientBalanceMapper mapper = new ClientBalanceMapper();
+		String sql = "select " + mapper.schema()+ " where d.client_id=?";
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {id});
+	}
+
+
+
+
+	@Override
+	public List<AdjustmentData> retrieveAllAdjustmentsCodes() {
+		 this.context.authenticatedUser();
+		 context.authenticatedUser();
+			PlanMapper mapper = new PlanMapper();
+
+			String sql = "select * from adjustment_code";
+
+			return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+		}
+
+		private static final class PlanMapper implements RowMapper<AdjustmentData> {
+
+
+
+			@Override
+			public AdjustmentData mapRow(final ResultSet rs,
+					@SuppressWarnings("unused") final int rowNum)
+					throws SQLException {
+
+				Long id = rs.getLong("id");
+				String adjustment_code = rs.getString("adjustment_code");
+				String adjustment_description = rs.getString("adjustment_description");
+
+				return new AdjustmentData(id, adjustment_code, adjustment_description);
+
+			}
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformService.java
new file mode 100644
index 0000000..9c73745
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformService.java
@@ -0,0 +1,8 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+
+public interface AdjustmentWritePlatformService {
+	public Long createAdjustment(final Long id2,final Long id,final Long clientid,final AdjustmentCommand command);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformServiceJpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformServiceJpaRepositoryImpl.java
new file mode 100644
index 0000000..64de7af
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/AdjustmentWritePlatformServiceJpaRepositoryImpl.java
@@ -0,0 +1,135 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.adjustment.domain.Adjustment;
+import org.mifosplatform.portfolio.adjustment.domain.AdjustmentCommandValidator;
+import org.mifosplatform.portfolio.adjustment.domain.AdjustmentRepository;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalanceRepository;
+import org.mifosplatform.portfolio.pricing.domain.PricingCommandValidator;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class AdjustmentWritePlatformServiceJpaRepositoryImpl implements
+		AdjustmentWritePlatformService {
+
+	private final org.mifosplatform.infrastructure.security.service.PlatformSecurityContext context;
+	private final AdjustmentRepository adjustmentRepository;
+	private final ClientBalanceRepository clientBalanceRepository;
+	private final UpdateClientBalance updateClientBalance;
+
+	@Autowired
+	public AdjustmentWritePlatformServiceJpaRepositoryImpl(
+			final PlatformSecurityContext context,
+			final AdjustmentRepository adjustmentRepository,
+			final ClientBalanceRepository clientBalanceRepository,
+			final UpdateClientBalance updateClientBalance) {
+		this.context = context;
+		this.adjustmentRepository = adjustmentRepository;
+		this.clientBalanceRepository = clientBalanceRepository;
+		this.updateClientBalance = updateClientBalance;
+
+	}
+
+	@SuppressWarnings("unused")
+	@Transactional
+	@Override
+	public Long createAdjustment(Long id2, Long id, Long clientid,
+			AdjustmentCommand command) {
+		// TODO Auto-generated method stub
+
+		try {
+			this.context.authenticatedUser();
+			AdjustmentCommandValidator validator=new AdjustmentCommandValidator(command);
+			validator.validateForCreate();
+
+			Adjustment adjustment = null;
+//			if (id2 != null)
+//				adjustment = adjustmentRepository.findOne(id2);
+//			if (adjustment == null) {
+				adjustment = Adjustment.create(clientid,
+						command.getAdjustment_date(),
+						command.getAdjustment_code(),
+						command.getAdjustment_type(), command.getAmount_paid(),
+						command.getBill_id(), command.getExternal_id(),
+						command.getRemarks());
+//			}
+//			else {
+//
+//
+//
+//			}
+			// List<ClientBalance> clientBalances =
+			// adjustment.getClientBalances();
+			// for(ClientBalance clientBalance : clientBalances)
+
+
+
+			/* Manoj code for updating client balance */
+
+			ClientBalance clientBalance = null;
+			if(id!=null)
+			clientBalance = clientBalanceRepository.findOne(id);
+
+			if(clientBalance != null){
+
+				clientBalance = updateClientBalance.doUpdateClientBalance(command.getAdjustment_type(),command.getAmount_paid(),clientid,clientBalance);
+
+			}else if(clientBalance == null){
+
+				clientBalance = updateClientBalance.createClientBalance(command.getAdjustment_type(),command.getAmount_paid(),clientid,clientBalance);
+			}
+
+			updateClientBalance.saveClientBalanceEntity(clientBalance);
+
+			this.adjustmentRepository.saveAndFlush(adjustment);
+
+		/*	ClientBalance clientBalance = null;
+
+			if (id != null)
+				clientBalance = clientBalanceRepository.findOne(id);
+
+			if (clientBalance != null) {
+
+				updateClientBalance.doUpdateClientBalance();
+
+				if (command.getAdjustment_type().equalsIgnoreCase("DR")) {
+
+					clientBalance.setBalanceAmount(clientBalance
+							.getBalanceAmount().add(command.getAmount_paid()));
+
+				} else if (command.getAdjustment_type().equalsIgnoreCase("CR")) {
+
+					clientBalance.setBalanceAmount(clientBalance
+							.getBalanceAmount().subtract(
+									command.getAmount_paid()));
+
+				}
+
+				this.clientBalanceRepository.saveAndFlush(clientBalance);
+
+			} else {
+				BigDecimal currentBalance = null;
+				if (command.getAdjustment_type().equalsIgnoreCase("DR")) {
+					currentBalance = command.getAmount_paid();
+				} else if (command.getAdjustment_type().equalsIgnoreCase("CR")) {
+					currentBalance = new BigDecimal(0.0).subtract(command
+							.getAmount_paid());
+				}
+				clientBalance = new ClientBalance(clientid, currentBalance);
+				adjustment.updateclientBalances(clientBalance);
+			}*/
+
+			//this.adjustmentRepository.saveAndFlush(adjustment);
+
+			return adjustment.getId();
+
+		} catch (DataIntegrityViolationException dve) {
+			return Long.valueOf(-1);
+		}
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/ClientBalanceReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/ClientBalanceReadPlatformServiceImpl.java
new file mode 100644
index 0000000..8924565
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/ClientBalanceReadPlatformServiceImpl.java
@@ -0,0 +1,107 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolioadjustment.service.ClientBalanceReadPlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class ClientBalanceReadPlatformServiceImpl implements ClientBalanceReadPlatformService {
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  ClientBalanceReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+	/*@Override
+	public Long retrieveClientBalanceId(Long id) {
+		this.context.authenticatedUser();
+		return jdbcTemplate.queryForLong("select id from client_balance where client_id=? ",id);
+	*/
+
+
+	@Override
+	public ClientBalanceData retrieveClientBalanceId(Long id) {
+
+           this.context.authenticatedUser();
+
+           ClientBalanceMapper mapper = new ClientBalanceMapper();
+		String sql = "select " + mapper.schema() + " where d.client_id=?";
+
+		ClientBalanceData clientBalanceData=this.jdbcTemplate.queryForObject(sql, mapper, new Object[] {id});
+		return clientBalanceData;
+
+	}
+
+
+
+
+	protected static final class ClientBalanceMapper implements RowMapper<ClientBalanceData> {
+
+		@Override
+		public ClientBalanceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+            Long id=JdbcSupport.getLong(rs, "id");
+			Long clientId = JdbcSupport.getLong(rs, "client_id");
+			BigDecimal balanceAmount = JdbcSupport.getBigDecimalDefaultToZeroIfNull(rs,"balance_amount");
+			return new ClientBalanceData(id,clientId,balanceAmount);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id, d.client_id as client_id , d.balance_amount as balance_amount  from client_balance d";
+		}
+}
+
+
+
+
+	@Override
+	public List<ClientBalanceData> retrieveAllClientBalances(Long id) {
+
+		 this.context.authenticatedUser();
+
+		 ClientBalanceMapper mapper = new ClientBalanceMapper();
+		String sql = "select " + mapper.schema()+ " where d.client_id=?";
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {id});
+	}
+
+
+	/*@Override
+	public Long retrieveClientBalanceId(Long id) {
+		this.context.authenticatedUser();
+		ClientBalancerMapper mapper=new ClientBalancerMapper();
+		String sql = "select " + mapper.schema() + " where client_id=" + id;
+		return jdbcTemplate.queryForLong("select id from client_balance where client_id=? ",id);
+	}
+	*/
+
+/*	protected static final class ClientBalancerMapper implements RowMapper {
+
+		@Override
+		public Object mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+            Long id=JdbcSupport.getLong(rs, "id");
+			return id;
+		}
+		public String schema() {
+			return "d.id as id from client_balance d";
+		}
+}
+*/
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/UpdateClientBalance.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/UpdateClientBalance.java
new file mode 100644
index 0000000..3d41cb8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustment/service/UpdateClientBalance.java
@@ -0,0 +1,58 @@
+package org.mifosplatform.portfolio.adjustment.service;
+
+import java.math.BigDecimal;
+
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalanceRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class UpdateClientBalance {
+
+	private final PlatformSecurityContext context;
+	private final ClientBalanceRepository clientBalanceRepository;
+
+
+	@Autowired
+	public UpdateClientBalance(final PlatformSecurityContext context,final ClientBalanceRepository clientBalanceRepository) {
+		this.context = context;
+		this.clientBalanceRepository = clientBalanceRepository;
+	}
+
+	public ClientBalance doUpdateClientBalance(String transactionType,
+			BigDecimal amount, Long clientId, ClientBalance clientBalance) {
+
+		if (transactionType.equalsIgnoreCase("DEBIT")) {
+
+			clientBalance.setBalanceAmount(clientBalance.getBalanceAmount().add(amount));
+
+		} else if (transactionType.equalsIgnoreCase("CREDIT")) {
+
+			clientBalance.setBalanceAmount(clientBalance.getBalanceAmount().subtract(amount));
+		}
+
+		return clientBalance;
+
+	}
+
+	public ClientBalance createClientBalance(String transactionType, BigDecimal amount, Long clientId, ClientBalance clientBalance) {
+		BigDecimal balanceAmount = BigDecimal.ZERO;
+		if (transactionType.equalsIgnoreCase("DEBIT")) {
+			balanceAmount = amount;
+		} else if (transactionType.equalsIgnoreCase("CREDIT")) {
+			balanceAmount = BigDecimal.ZERO.subtract(amount);
+		}
+
+		clientBalance = new ClientBalance(clientId, balanceAmount);
+
+		return clientBalance;
+	}
+
+	public ClientBalance saveClientBalanceEntity(ClientBalance clientBalance){
+		ClientBalance resultantClientBalance =  this.clientBalanceRepository.save(clientBalance);
+		return resultantClientBalance;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustments/api/AdjustmentApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustments/api/AdjustmentApiResource.java
new file mode 100644
index 0000000..b60a04c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/adjustments/api/AdjustmentApiResource.java
@@ -0,0 +1,110 @@
+package org.mifosplatform.portfolio.adjustments.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentCodeData;
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentData;
+import org.mifosplatform.portfolio.adjustment.service.AdjustmentReadPlatformService;
+import org.mifosplatform.portfolio.adjustment.service.AdjustmentWritePlatformService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolio.discountmaster.commands.Discount;
+import org.mifosplatform.portfolioadjustment.service.ClientBalanceReadPlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+@Path("/adjustments")
+@Component
+@Scope("singleton")
+public class AdjustmentApiResource {
+	@Autowired
+	private AdjustmentWritePlatformService adjustmentWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@Autowired
+	private  ClientBalanceReadPlatformService clientBalanceReadPlatformService;
+	@Autowired
+	private AdjustmentReadPlatformService adjustmentReadPlatformService;
+
+	   @GET
+	    @Path("template")
+	    @Consumes({MediaType.APPLICATION_JSON})
+	    @Produces({MediaType.APPLICATION_JSON})
+	    public String retrieveTempleteInfo(@Context final UriInfo uriInfo) {
+		   Set<String> typicalResponseParameters = new HashSet<String>(
+			Arrays.asList("discountOptions"));
+			Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+			if (responseParameters.isEmpty()) {
+				responseParameters.addAll(typicalResponseParameters);
+			}
+		final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+	        final Collection<Discount> datass=new ArrayList<Discount>();
+	        Discount d=new Discount();
+	        d.setadjustment_type();
+	        datass.add(d);
+	        List<AdjustmentData> data=this.adjustmentReadPlatformService.retrieveAllAdjustmentsCodes();
+	        AdjustmentCodeData datas=new AdjustmentCodeData(datass,data);
+
+		return this.apiJsonSerializerService.serializeDiscountMasterDataToJsonTemplete(prettyPrint, responseParameters,datas );
+	    }
+	   @POST
+	    @Path("{clientId}")
+		@Consumes({MediaType.APPLICATION_JSON})
+		@Produces({MediaType.APPLICATION_JSON})
+		public Response addNewAdjustment(@PathParam("clientId") final Long clientId, final String jsonRequestBody) {
+			final AdjustmentCommand command= this.apiDataConversionService.convertJsonToAdjustmentCommand(null, jsonRequestBody);
+		   //	ClientBalanceData clientBalanceData=clientBalanceReadPlatformService.retrieveClientBalanceId(clientId);
+
+									//clientBalancedatas
+			List<ClientBalanceData> clientBalancedatas = clientBalanceReadPlatformService.retrieveAllClientBalances(clientId);
+
+									//adjustmentBalancesDatas
+			List<ClientBalanceData> adjustmentBalancesDatas = adjustmentReadPlatformService.retrieveAllAdjustments(clientId);
+
+			Long id=Long.valueOf(-1);
+			if(clientBalancedatas.size() == 1 && adjustmentBalancesDatas.size() == 1)
+																// list.get(0)
+			id=adjustmentWritePlatformService.createAdjustment(clientBalancedatas.get(0).getId(),adjustmentBalancesDatas.get(0).getId(),clientId,command);
+			else
+			id=	adjustmentWritePlatformService.createAdjustment(clientId,clientId,clientId,command);
+			return Response.ok().entity(id).build();
+		}
+
+/*	    @PUT
+	    @Path("{clientId}")
+	    @Consumes({MediaType.APPLICATION_JSON})
+	    @Produces({MediaType.APPLICATION_JSON})
+	    public Response update(@PathParam("clientId") final Long clientId, final String jsonRequestBody){
+
+		//AdjustmentData data=adjustmentReadPlatformService.retrieveAdjustment(id);
+
+		final ChargeCommand command = this.apiDataConversionService.convertJsonToChargeCommand(clientId, jsonRequestBody);
+
+		//finl ChargeData=
+		//final Long entityId = this.chargeWritePlatformService.updateCharge(command);
+
+	        return Response.ok().entity(new EntityIdentifier(entityId)).build();
+	    }*/
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/api/BillingCycleApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/api/BillingCycleApiResource.java
new file mode 100644
index 0000000..02bd547
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/api/BillingCycleApiResource.java
@@ -0,0 +1,91 @@
+package org.mifosplatform.portfolio.billingcycle.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
+import org.mifosplatform.portfolio.billingcycle.service.BillingCycleReadPlatformService;
+import org.mifosplatform.portfolio.billingcycle.service.BillingCycleWritePlatformService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/billingcycles")
+@Component
+@Scope("singleton")
+public class BillingCycleApiResource {
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	@Autowired
+	private BillingCycleWritePlatformService billingCycleWritePlatformService;
+
+	@Autowired
+	private BillingCycleReadPlatformService billingCycleReadPlatformService;
+
+
+
+	private final String entityType = "BILLINGCYCLE";
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createSubscription(final String jsonRequestBody) {
+
+		BillingCycleCommand command = this.apiDataConversionService
+				.convertJsonToBillingCycleCommand(null, jsonRequestBody);
+
+		CommandProcessingResult userId = this.billingCycleWritePlatformService
+				.createBillingCycle(command);
+		return Response.ok().entity(userId).build();
+	}
+	@GET
+	@Path("template")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveNewDepositProductDetails(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","day_num","day_name"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		responseParameters.addAll(Arrays.asList("allowedtypes"));
+		BillingCycleData allowedtypes = this.billingCycleReadPlatformService.retrieveNewBillingCycleData();
+
+
+		return this.apiJsonSerializerService.serializeBillingCycleToJson(prettyPrint, responseParameters, allowedtypes);
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/command/BillingCycleCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/command/BillingCycleCommand.java
new file mode 100644
index 0000000..c1c854e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/command/BillingCycleCommand.java
@@ -0,0 +1,50 @@
+package org.mifosplatform.portfolio.billingcycle.command;
+
+import java.util.Set;
+
+public class BillingCycleCommand {
+
+	private final String billing_code;
+	private final String description;
+	private final String frequency;
+
+	private final String[] every;
+
+	private final Set<String> modifiedParameters;
+
+	public BillingCycleCommand(final Set<String> modifiedParameters,
+			final String billing_code,
+			final String description,
+			final  String frequency, final String[] every) {
+		this.billing_code = billing_code;
+		this.description = description;
+		this.frequency = frequency;
+		this.every = every;
+
+		this.modifiedParameters = modifiedParameters;
+	}
+
+
+
+	public String getBilling_code() {
+		return billing_code;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public String getFrequency() {
+		return frequency;
+	}
+
+	public String[] getEvery() {
+		return every;
+	}
+
+	public Set<String> getModifiedParameters() {
+		return modifiedParameters;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/BillingCycleData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/BillingCycleData.java
new file mode 100644
index 0000000..7649afa
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/BillingCycleData.java
@@ -0,0 +1,35 @@
+package org.mifosplatform.portfolio.billingcycle.data;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class BillingCycleData {
+
+	private final List<EnumOptionData> categoryType;
+
+	@SuppressWarnings("rawtypes")
+	private final List days;
+
+
+
+	public BillingCycleData(List<EnumOptionData> frequencyType, List list) {
+		this.categoryType=frequencyType;
+		this.days=list;
+	}
+
+
+
+	public List<EnumOptionData> getCategoryType() {
+		return categoryType;
+	}
+
+
+
+
+	public List getDays() {
+		return days;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/SavingBillingEnumaration.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/SavingBillingEnumaration.java
new file mode 100644
index 0000000..2e7f24b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/data/SavingBillingEnumaration.java
@@ -0,0 +1,36 @@
+package org.mifosplatform.portfolio.billingcycle.data;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.plan.domain.BillingTypeEnum;
+
+
+
+
+public class SavingBillingEnumaration {
+
+	public static EnumOptionData interestCompoundingPeriodType(final int id) {
+		return interestCompoundingPeriodType(BillingTypeEnum.fromInt(id));
+	}
+
+	public static EnumOptionData interestCompoundingPeriodType(final BillingTypeEnum type) {
+		final String codePrefix = "deposit.interest.compounding.period.";
+		EnumOptionData optionData = null;
+		switch (type) {
+		case EXACT:
+			optionData = new EnumOptionData(BillingTypeEnum.EXACT.getValue().longValue(), codePrefix + BillingTypeEnum.EXACT.getCode(), "EXACT");
+			break;
+		case FULL:
+			optionData = new EnumOptionData(BillingTypeEnum.FULL.getValue().longValue(), codePrefix + BillingTypeEnum.FULL.getCode(), "FULL");
+			break;
+		case CUSTOM:
+			optionData = new EnumOptionData(BillingTypeEnum.CUSTOM.getValue().longValue(), codePrefix + BillingTypeEnum.CUSTOM.getCode(), "CUSTOM");
+			break;
+
+		default:
+			optionData = new EnumOptionData(BillingTypeEnum.INVALID.getValue().longValue(), BillingTypeEnum.INVALID.getCode(), "INVALID");
+			break;
+		}
+		return optionData;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/BillingCycle.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/BillingCycle.java
new file mode 100644
index 0000000..1d51c3a
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/BillingCycle.java
@@ -0,0 +1,85 @@
+package org.mifosplatform.portfolio.billingcycle.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "m_billing_cycle")
+public class BillingCycle extends AbstractPersistable<Long> {
+
+
+	@Column(name = "billing_code")
+	private String billing_code;
+
+	@Column(name = "description", nullable = false)
+	private String description;
+
+	@Column(name = "frequency")
+	private String frequency;
+
+	@Column(name = "every")
+	private String every;
+
+
+
+
+
+	public BillingCycle() {
+	}
+
+	public BillingCycle( final String billing_code,final String description,
+			final String every,
+			final String frequency
+			) {
+
+		this.billing_code = billing_code;
+		this.description = description;
+		this.frequency = frequency;
+		this.every = every;
+
+
+	}
+
+
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+	public String getFrequency() {
+		return frequency;
+	}
+
+	public void setFrequency(String frequency) {
+		this.frequency = frequency;
+	}
+
+	public String getEvery() {
+		return every;
+	}
+
+	public void setEvery(String every) {
+		this.every = every;
+	}
+
+	public String getBilling_code() {
+		return billing_code;
+	}
+
+	public void setBilling_code(String billing_code) {
+		this.billing_code = billing_code;
+	}
+
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/FrequenctType.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/FrequenctType.java
new file mode 100644
index 0000000..82c2d10
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/FrequenctType.java
@@ -0,0 +1,63 @@
+package org.mifosplatform.portfolio.billingcycle.domain;
+
+
+public enum FrequenctType {
+
+		SUNDAY(0, "FrequenctType.sunday"), //
+		MONDAY(1, "FrequenctType.monday"), //
+		TUESDAY(2, "FrequenctType.tuesday"),//
+		WEDNESDAY(3,"FrequenctType.wednesday"),//
+		THURSDAY(4, "FrequenctType.thursday"),
+		FRIDAY(5, "FrequenctType.friday"),
+		SATURDAY(6, "FrequenctType.saturday"),
+		INVALID(7, "FrequenctType.invalid");
+
+		    private final Integer value;
+			private final String code;
+
+		    private FrequenctType(final Integer value, final String code) {
+		        this.value = value;
+				this.code = code;
+		    }
+
+		    public Integer getValue() {
+		        return this.value;
+		    }
+
+			public String getCode() {
+				return code;
+			}
+
+			public static FrequenctType fromInt(final Integer frequency) {
+
+				FrequenctType frequencyType = FrequenctType.INVALID;
+				switch (frequency) {
+				case 0:
+					frequencyType = FrequenctType.SUNDAY;
+					break;
+				case 1:
+					frequencyType = FrequenctType.MONDAY;
+					break;
+				case 2:
+					frequencyType = FrequenctType.TUESDAY;
+					break;
+				case 3:
+					frequencyType = FrequenctType.WEDNESDAY;
+					break;
+				case 4:
+					frequencyType = FrequenctType.THURSDAY;
+					break;
+				case 5:
+					frequencyType = FrequenctType.FRIDAY;
+					break;
+				case 6:
+					frequencyType = FrequenctType.SATURDAY;
+					break;
+
+				default:
+					frequencyType = FrequenctType.INVALID;
+					break;
+				}
+				return frequencyType;
+			}
+		}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/SavingBillingEnumaration.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/SavingBillingEnumaration.java
new file mode 100644
index 0000000..4ae32ae
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/SavingBillingEnumaration.java
@@ -0,0 +1,45 @@
+package org.mifosplatform.portfolio.billingcycle.domain;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class SavingBillingEnumaration {
+
+
+
+
+		public static EnumOptionData interestCompoundingPeriodType(final int id) {
+			return interestCompoundingPeriodType(FrequenctType.fromInt(id));
+		}
+
+		public static EnumOptionData interestCompoundingPeriodType(final FrequenctType type) {
+			final String codePrefix = "deposit.interest.compounding.period.";
+			EnumOptionData optionData = null;
+			switch (type) {
+			case SUNDAY:
+				optionData = new EnumOptionData(FrequenctType.SUNDAY.getValue().longValue(), codePrefix + FrequenctType.SUNDAY.getCode(), "sunday");
+				break;
+			case MONDAY:
+				optionData = new EnumOptionData(FrequenctType.MONDAY.getValue().longValue(), codePrefix + FrequenctType.MONDAY.getCode(), "monday");
+				break;
+			case TUESDAY:
+				optionData = new EnumOptionData(FrequenctType.TUESDAY.getValue().longValue(), codePrefix + FrequenctType.TUESDAY.getCode(), "tuesday");
+				break;
+			case WEDNESDAY:
+				optionData = new EnumOptionData(FrequenctType.WEDNESDAY.getValue().longValue(), codePrefix + FrequenctType.WEDNESDAY.getCode(), "wednesday");
+				break;
+			case THURSDAY:
+				optionData = new EnumOptionData(FrequenctType.THURSDAY.getValue().longValue(), codePrefix + FrequenctType.THURSDAY.getCode(), "thursday");
+				break;
+			case FRIDAY:
+				optionData = new EnumOptionData(FrequenctType.FRIDAY.getValue().longValue(), codePrefix + FrequenctType.FRIDAY.getCode(), "friday");
+				break;
+			case SATURDAY:
+				optionData = new EnumOptionData(FrequenctType.SATURDAY.getValue().longValue(), codePrefix + FrequenctType.SATURDAY.getCode(), "saturday");
+				break;
+			default:
+				optionData = new EnumOptionData(FrequenctType.INVALID.getValue().longValue(), FrequenctType.INVALID.getCode(), "Invalid");
+				break;
+			}
+			return optionData;
+		}
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/domain/BillingCycleRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/domain/BillingCycleRepository.java
new file mode 100644
index 0000000..b86c433
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/domain/domain/BillingCycleRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.billingcycle.domain.domain;
+
+import org.mifosplatform.portfolio.billingcycle.domain.BillingCycle;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface BillingCycleRepository extends
+		JpaRepository<BillingCycle, Long>,
+		JpaSpecificationExecutor<BillingCycle> {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformService.java
new file mode 100644
index 0000000..e098ef0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformService.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billingcycle.service;
+
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
+
+public interface BillingCycleReadPlatformService {
+
+	BillingCycleData retrieveNewBillingCycleData();
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformServiceImpl.java
new file mode 100644
index 0000000..3b07a9d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleReadPlatformServiceImpl.java
@@ -0,0 +1,51 @@
+package org.mifosplatform.portfolio.billingcycle.service;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
+
+import org.mifosplatform.portfolio.billingcycle.domain.FrequenctType;
+import org.mifosplatform.portfolio.billingcycle.domain.SavingBillingEnumaration;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class BillingCycleReadPlatformServiceImpl implements BillingCycleReadPlatformService {
+
+
+	@SuppressWarnings("unchecked")
+	@Transactional
+	@Override
+	public BillingCycleData retrieveNewBillingCycleData() {
+
+		   EnumOptionData sunday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.SUNDAY);
+			EnumOptionData monday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.MONDAY);
+			EnumOptionData tuesday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.TUESDAY);
+			EnumOptionData wednesday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.WEDNESDAY);
+			EnumOptionData thursday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.THURSDAY);
+			EnumOptionData friday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.FRIDAY);
+			EnumOptionData saturday = SavingBillingEnumaration.interestCompoundingPeriodType(FrequenctType.SATURDAY);
+			List<EnumOptionData> frequencyType = Arrays.asList(sunday,monday,tuesday,wednesday,thursday,friday,saturday);
+
+
+			List<BillingDays> list=new ArrayList<BillingDays>();
+
+
+			for(int i=1;i<=30;i++)
+			{
+				list.add(new BillingDays(i));
+			}
+
+			return  new BillingCycleData(frequencyType,list);
+
+	}
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformService.java
new file mode 100644
index 0000000..829493c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformService.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.billingcycle.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+
+public interface BillingCycleWritePlatformService {
+
+
+		CommandProcessingResult createBillingCycle( BillingCycleCommand command);
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformServiceImp.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformServiceImp.java
new file mode 100644
index 0000000..44d960f
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingCycleWritePlatformServiceImp.java
@@ -0,0 +1,76 @@
+package org.mifosplatform.portfolio.billingcycle.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.billingcycle.domain.BillingCycle;
+import org.mifosplatform.portfolio.billingcycle.domain.domain.BillingCycleRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class BillingCycleWritePlatformServiceImp implements
+		BillingCycleWritePlatformService {
+
+	private PlatformSecurityContext context;
+
+	private BillingCycleRepository billingCycleRepository;
+
+	@Autowired
+	public BillingCycleWritePlatformServiceImp(
+			final PlatformSecurityContext context,
+			final BillingCycleRepository BillingCycle) {
+		this.context = context;
+		this.billingCycleRepository = BillingCycle;
+
+	}
+
+	@Transactional
+	@Override
+	public CommandProcessingResult createBillingCycle(BillingCycleCommand command) {
+		try {
+
+			this.context.authenticatedUser();
+
+			String[] services=command.getEvery();
+
+			if(services[1].contains("-1"))
+			{
+				BillingCycle data = new BillingCycle(command.getBilling_code(),
+						command.getDescription(),
+						command.getFrequency(),
+						services[0]);
+				this.billingCycleRepository.save(data);
+				return new CommandProcessingResult(data.getId());
+			}
+			else
+			{
+
+			BillingCycle data = new BillingCycle(command.getBilling_code(),
+					command.getDescription(),
+					command.getFrequency(),
+					services[0]);
+			this.billingCycleRepository.save(data);
+			return new CommandProcessingResult(data.getId());
+			}
+
+
+
+
+
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+	}
+
+	private void handleDataIntegrityIssues(BillingCycleCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingDays.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingDays.java
new file mode 100644
index 0000000..5649d6c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingcycle/service/BillingDays.java
@@ -0,0 +1,17 @@
+package org.mifosplatform.portfolio.billingcycle.service;
+
+public class BillingDays {
+
+	private final int days;
+
+	public BillingDays(int day) {
+
+		this.days=day;
+	}
+
+	public int getDays() {
+		return days;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/api/BillingMasterApiResourse.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/api/BillingMasterApiResourse.java
new file mode 100644
index 0000000..f2ca806
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/api/BillingMasterApiResourse.java
@@ -0,0 +1,152 @@
+package org.mifosplatform.portfolio.billingmaster.api;
+
+import java.io.File;
+import java.math.BigDecimal;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+import javax.ws.rs.core.Response.ResponseBuilder;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillDetailsData;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.billmaster.domain.BillDetail;
+import org.mifosplatform.portfolio.billmaster.domain.BillMaster;
+import org.mifosplatform.portfolio.billmaster.domain.BillMasterRepository;
+import org.mifosplatform.portfolio.billmaster.service.BillMasterReadPlatformService;
+import org.mifosplatform.portfolio.billmaster.service.BillMasterWritePlatformService;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.mifosplatform.portfolio.order.service.OrderReadPlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/billmaster")
+@Component
+@Scope("singleton")
+public class BillingMasterApiResourse {
+
+	@Autowired
+	private BillMasterReadPlatformService billMasterReadPlatformService;
+
+	@Autowired
+	private BillMasterWritePlatformService billMasterWritePlatformService;
+
+	@Autowired
+	private OrderReadPlatformService orderReadPlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private BillMasterRepository billMasterRepository;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@POST
+	@Path("{clientId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response retrieveBillingProducts(
+			@PathParam("clientId") final Long clientId,
+			final String jsonRequestBody) {
+
+		BillMasterCommand command = this.apiDataConversionService
+				.convertJsonToBillMasterCommand(null, jsonRequestBody);
+
+		List<FinancialTransactionsData> financialTransactionsDatas = billMasterReadPlatformService
+				.retrieveFinancialData(clientId);
+		BillMaster billMaster = null;
+		BigDecimal previousBal = BigDecimal.ZERO;
+		List<BillMaster> billMasters = this.billMasterRepository.findAll();
+
+		for (BillMaster data : billMasters) {
+
+			if (data.getClientId() == clientId) {
+				previousBal = this.billMasterReadPlatformService
+						.retrieveClientBalance(clientId);
+			}
+
+		}
+		billMaster = billMasterWritePlatformService.createBillMaster(
+				financialTransactionsDatas, command, clientId);
+		List<BillDetail> billDetail = billMasterWritePlatformService
+				.createBillDetail(financialTransactionsDatas, billMaster);
+
+		billMasterWritePlatformService.updateBillMaster(billDetail, billMaster,
+				previousBal);
+
+		billMasterWritePlatformService.updateBillId(financialTransactionsDatas,
+				billMaster.getId());
+
+		BillDetailsData billDetails = this.billMasterReadPlatformService
+				.retrievebillDetails(billMaster.getId());
+		// List<FinancialTransactionsData>
+		// data=this.billMasterReadPlatformService.getFinancialTransactionData(billDetails.getId());
+		this.billMasterWritePlatformService.generatePdf(billDetails,
+				financialTransactionsDatas);
+
+		return Response.ok().entity(1).build();
+	}
+
+	@GET
+	@Path("{clientId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrieveBillStatements(
+			@PathParam("clientId") final Long clientId,
+			@Context final UriInfo uriInfo) {
+
+		context.authenticatedUser().validateHasReadPermission("CLIENTORDER");
+
+		final Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		final List<FinancialTransactionsData> data = this.billMasterReadPlatformService
+				.retrieveStatments(clientId);
+
+		return this.apiJsonSerializerService.serializeTransactionalDataToJson(
+				prettyPrint, responseParameters, data);
+	}
+
+	@GET
+	@Path("{billId}/print")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response printInvoice(@PathParam("billId") final Long billId) {
+
+		BillMaster billMaster = this.billMasterRepository.findOne(billId);
+
+		String printFileName = billMaster.getFileName();
+
+		File file = new File(printFileName);
+		ResponseBuilder response = Response.ok(file);
+		response.header("Content-Disposition", "attachment; filename=\""
+				+ printFileName + "\"");
+		response.header("Content-Type", "application/pdf");
+		return response.build();
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/command/BillMasterCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/command/BillMasterCommand.java
new file mode 100644
index 0000000..cfa9af9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingmaster/command/BillMasterCommand.java
@@ -0,0 +1,25 @@
+package org.mifosplatform.portfolio.billingmaster.command;
+
+import org.joda.time.LocalDate;
+
+public class BillMasterCommand {
+	
+	private LocalDate dueDate;
+	private String message;
+
+	public BillMasterCommand(LocalDate dueDate, String message) {
+	this.dueDate=dueDate;
+	this.message=message;
+	}
+
+	public LocalDate getDueDate() {
+		return dueDate;
+	}
+
+	public String getMessage() {
+		return message;
+	}
+	
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/api/BillingOrderApiResourse.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/api/BillingOrderApiResourse.java
new file mode 100644
index 0000000..596dae4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/api/BillingOrderApiResourse.java
@@ -0,0 +1,131 @@
+package org.mifosplatform.portfolio.billingorder.api;
+
+import java.util.List;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.adjustment.service.AdjustmentReadPlatformService;
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrder;
+import org.mifosplatform.portfolio.billingorder.domain.Invoice;
+import org.mifosplatform.portfolio.billingorder.service.BillingOrderReadPlatformService;
+import org.mifosplatform.portfolio.billingorder.service.BillingOrderWritePlatformService;
+import org.mifosplatform.portfolio.billingorder.service.GenerateBillingOrderService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/billingorder")
+@Component
+@Scope("singleton")
+public class BillingOrderApiResourse {
+
+
+	@Autowired
+	private BillingOrderReadPlatformService billingOrderReadPlatformService;
+
+	@Autowired
+	private GenerateBillingOrderService generateBillingOrderService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private BillingOrderWritePlatformService billingOrderWritePlatformService;
+
+    @Autowired
+    private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private AdjustmentReadPlatformService adjustmentReadPlatformService;
+
+	 @POST
+	 @Path("{clientId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response retrieveBillingProducts(@PathParam("clientId") final Long clientId,final String jsonRequestBody) {
+
+		 	LocalDate  localDate = this.apiDataConversionService.convertJsonToBillingProductCommand(null, jsonRequestBody);
+		 	// Get List of Plans
+		 	List<Long> orderIds = billingOrderReadPlatformService.retrieveOrderIds(clientId);
+		 
+		 	// for each plan
+		 	for(Long orderId : orderIds){
+		 	// call below code with client_id , date and plan_id 	
+		 	
+			// Charges
+		 	List<BillingOrderData> products = this.billingOrderReadPlatformService.retrieveBillingOrderData(clientId,localDate,orderId);
+			
+			List<BillingOrderCommand> billingOrderCommands = this.generateBillingOrderService.generatebillingOrder(products);
+			List<BillingOrder> listOfBillingOrders = billingOrderWritePlatformService.createBillingProduct(billingOrderCommands);
+			
+			// Invoice
+			InvoiceCommand invoiceCommand = this.generateBillingOrderService.generateInvoice(billingOrderCommands);
+			List<ClientBalanceData> clientBalancesDatas =  adjustmentReadPlatformService.retrieveAllAdjustments(clientId);
+			Invoice invoice = billingOrderWritePlatformService.createInvoice(invoiceCommand,clientBalancesDatas);
+
+			// Update invoice-tax
+			billingOrderWritePlatformService.updateInvoiceTax(invoice,billingOrderCommands,listOfBillingOrders);
+			
+			// Update charge
+			 billingOrderWritePlatformService.updateInvoiceCharge(invoice, listOfBillingOrders);
+			
+			// Update orders
+			billingOrderWritePlatformService.updateBillingOrder(billingOrderCommands);
+
+			// Update order-price
+			CommandProcessingResult entityIdentifier = billingOrderWritePlatformService.updateOrderPrice(billingOrderCommands);
+
+
+/*
+		// Tax
+		List<List<InvoiceTax>> listOfListOfTax = new ArrayList<List<InvoiceTax>>();
+		List<InvoiceTax> tax = new ArrayList<InvoiceTax>();
+		for(BillingOrder command : listOfBillingOrders){
+			
+			List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(command.getChargeCode());
+			List<InvoiceTaxCommand> invoiceTaxCommand = this.generateBillingOrderService.generateInvoiceTax(taxMappingRateDatas, command);
+			tax = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+			listOfListOfTax.add(tax);
+		}
+		
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(command.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = this.generateBillingOrderService.generateInvoiceTax(taxMappingRateDatas, command);
+		List<InvoiceTax> tax = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+*/
+
+//		// Invoice
+//		InvoiceCommand invoiceCommand = this.generateBillingOrderService.generateInvoice(billingOrderCommands);
+//		List<ClientBalanceData> clientBalancesDatas =  adjustmentReadPlatformService.retrieveAllAdjustments(clientId);
+//		Invoice invoice = billingOrderWritePlatformService.createInvoice(invoiceCommand,localDate,clientBalancesDatas);
+//
+//		// Update invoice-tax
+//		 billingOrderWritePlatformService.updateInvoiceTax(invoice,billingOrderCommands,listOfBillingOrders);
+//		
+//		// Update charge
+//		 billingOrderWritePlatformService.updateInvoiceCharge(invoice, listOfBillingOrders);
+//		
+//		// Update orders
+//		 billingOrderWritePlatformService.updateBillingOrder(billingOrderCommands);
+//
+//		// Update order-price
+//		CommandProcessingResult entityIdentifier = billingOrderWritePlatformService.updateOrderPrice(billingOrderCommands);
+
+		}
+		return Response.ok().entity(1l).build();
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/BillingOrderCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/BillingOrderCommand.java
new file mode 100644
index 0000000..78deedf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/BillingOrderCommand.java
@@ -0,0 +1,118 @@
+package org.mifosplatform.portfolio.billingorder.commands;
+
+import java.math.BigDecimal;
+import java.util.Date;
+import java.util.List;
+
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+
+public class BillingOrderCommand {
+
+	private final Long clientOrderId;
+	private final Long orderPriceId;
+	private final Long clientId;
+	private final Date startDate;
+	private final Date nextBillableDate;
+	private final Date endDate;
+	private final String billingFrequency;
+	private final String chargeCode;
+	private final String chargeType;
+	private final Integer chargeDuration;
+	private final String durationType;
+	private final Date invoiceTillDate;
+	private final BigDecimal price;
+	private final String billingAlign;
+	private final String oneTimeBill;
+	private final List<InvoiceTax> listOfTax;
+
+
+
+	public BillingOrderCommand(Long clientOrderId, Long oderPriceId,
+			Long clientId, Date startDate, Date nextBillableDate, Date endDate,
+			String billingFrequency, String chargeCode, String chargeType,
+			Integer chargeDuration,String durationType, Date invoiceTillDate, BigDecimal price,
+			String billingAlign, String oneTimeBill,final List<InvoiceTax> listOfTax) {
+		this.clientOrderId = clientOrderId;
+		this.orderPriceId = oderPriceId;
+		this.clientId = clientId;
+		this.startDate = startDate;
+		this.nextBillableDate = nextBillableDate;
+		this.endDate = endDate;
+		this.billingFrequency = billingFrequency;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargeType;
+		this.chargeDuration = chargeDuration;
+		this.durationType = durationType;
+		this.invoiceTillDate = invoiceTillDate;
+		this.price = price;
+		this.billingAlign = billingAlign;
+		this.oneTimeBill = oneTimeBill;
+		this.listOfTax =listOfTax;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+	public Date getNextBillableDate() {
+		return nextBillableDate;
+	}
+
+	public Date getEndDate() {
+		return endDate;
+	}
+
+	public String getBillingFrequency() {
+		return billingFrequency;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public String getChargeType() {
+		return chargeType;
+	}
+
+	public Integer getChargeDuration() {
+		return chargeDuration;
+	}
+
+	public String getDurationType() {
+		return durationType;
+	}
+
+	public Date getInvoiceTillDate() {
+		return invoiceTillDate;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public String getBillingAlign() {
+		return billingAlign;
+	}
+
+	public Long getClientOrderId() {
+		return clientOrderId;
+	}
+
+	public Long getOrderPriceId() {
+		return orderPriceId;
+	}
+
+	public String getOneTimeBill() {
+		return oneTimeBill;
+	}
+
+	public List<InvoiceTax> getListOfTax() {
+		return listOfTax;
+	}
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceCommand.java
new file mode 100644
index 0000000..f8a23d4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceCommand.java
@@ -0,0 +1,78 @@
+package org.mifosplatform.portfolio.billingorder.commands;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+public class InvoiceCommand {
+
+	private final Long clientId;
+	private final Date invoiceDate;
+	private final BigDecimal invoiceAmount;
+	private final BigDecimal netChargeAmount;
+	private final BigDecimal taxAmount;
+	private final String invoiceStatus;
+	private final Long createdBy;
+	private final Date createdDate;
+	private final Long lastModifiedId;
+	private final Date lastModifiedDate;
+
+	public InvoiceCommand(final Long clientId, final Date invoiceDate,
+			final BigDecimal invoiceAmount, final BigDecimal netChargeAmount,
+			final BigDecimal taxAmount, final String invoiceStatus,
+			final Long createdBy, final Date createdDate,
+			final Long lastModifiedId, final Date lastModifiedDate) {
+
+		this.clientId = clientId;
+		this.invoiceDate = invoiceDate;
+		this.invoiceAmount = invoiceAmount;
+		this.netChargeAmount = netChargeAmount;
+		this.taxAmount = taxAmount;
+		this.invoiceStatus = invoiceStatus;
+		this.createdBy = createdBy;
+		this.createdDate = createdDate;
+		this.lastModifiedId = lastModifiedId;
+		this.lastModifiedDate = lastModifiedDate;
+
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public Date getInvoiceDate() {
+		return invoiceDate;
+	}
+
+	public BigDecimal getInvoiceAmount() {
+		return invoiceAmount;
+	}
+
+	public BigDecimal getNetChargeAmount() {
+		return netChargeAmount;
+	}
+
+	public BigDecimal getTaxAmount() {
+		return taxAmount;
+	}
+
+	public String getInvoiceStatus() {
+		return invoiceStatus;
+	}
+
+	public Long getCreatedBy() {
+		return createdBy;
+	}
+
+	public Date getCreatedDate() {
+		return createdDate;
+	}
+
+	public Long getLastModifiedId() {
+		return lastModifiedId;
+	}
+
+	public Date getLastModifiedDate() {
+		return lastModifiedDate;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceTaxCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceTaxCommand.java
new file mode 100644
index 0000000..409fbd3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/commands/InvoiceTaxCommand.java
@@ -0,0 +1,57 @@
+package org.mifosplatform.portfolio.billingorder.commands;
+
+import java.math.BigDecimal;
+
+public class InvoiceTaxCommand {
+
+	private final Long clientId;
+	private final Long invoiceChargeId;
+	private final Long invoiceId;
+	private final String taxCode;
+	private final BigDecimal taxValue;
+	private final BigDecimal taxPercentage;
+	private final BigDecimal taxAmount;
+
+	public InvoiceTaxCommand(final Long clientId, final Long invoiceChargeId,
+			final Long invoiceId, final String taxCode,
+			final BigDecimal taxValue, final BigDecimal taxPercentage,
+			final BigDecimal taxAmount) {
+
+		this.clientId = clientId;
+		this.invoiceChargeId = invoiceChargeId;
+		this.invoiceId = invoiceId;
+		this.taxCode = taxCode;
+		this.taxValue = taxValue;
+		this.taxPercentage = taxPercentage;
+		this.taxAmount = taxAmount;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public Long getInvoiceChargeId() {
+		return invoiceChargeId;
+	}
+
+	public Long getInvoiceId() {
+		return invoiceId;
+	}
+
+	public String getTaxCode() {
+		return taxCode;
+	}
+
+	public BigDecimal getTaxValue() {
+		return taxValue;
+	}
+
+	public BigDecimal getTaxPercentage() {
+		return taxPercentage;
+	}
+
+	public BigDecimal getTaxAmount() {
+		return taxAmount;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillDetailsData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillDetailsData.java
new file mode 100644
index 0000000..467628c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillDetailsData.java
@@ -0,0 +1,132 @@
+package org.mifosplatform.portfolio.billingorder.data;
+
+import org.joda.time.LocalDate;
+
+
+public class BillDetailsData  {
+private Long id;
+private Long clientId;
+private String addrNo;
+private String clientName;
+private String billPeriod;
+private String street;
+private String zip;
+private String city;
+private String state;
+private String country;
+private Double previousBal;
+private Double chargeAmount;
+private Double adjustmentAmount;
+private Double taxAmount;
+private Double paidAmount;
+private Double dueAmount;
+private LocalDate billDate;
+private LocalDate dueDate;
+private String message;
+
+	public BillDetailsData(Long id, Long clientId, String addrNo, String clientName,
+			String billPeriod, String street, String zip, String city,
+			String state, String country, Double previousBal,
+			Double chargeAmount, Double adjustmentAmount, Double taxAmount,
+			Double paidAmount, Double dueAmount,LocalDate billDate,LocalDate duDate,String message) {
+
+		this.id=id;
+		this.addrNo=addrNo;
+		this.adjustmentAmount=adjustmentAmount;
+		this.billPeriod=billPeriod;
+		this.chargeAmount=chargeAmount;
+		this.city=city;
+		this.clientId=clientId;
+		this.clientName=clientName;
+		this.country=country;
+		this.dueAmount=dueAmount;
+		this.paidAmount=paidAmount;
+		this.previousBal=previousBal;
+		this.state=state;
+		this.street=street;
+		this.taxAmount=taxAmount;
+		this.zip=zip;
+		this.billDate=billDate;
+		this.dueDate=duDate;
+		this.message=message;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public String getAddrNo() {
+		return addrNo;
+	}
+
+	public String getClientName() {
+		return clientName;
+	}
+
+	public String getBillPeriod() {
+		return billPeriod;
+	}
+
+	public String getStreet() {
+		return street;
+	}
+
+	public String getZip() {
+		return zip;
+	}
+
+	public String getCity() {
+		return city;
+	}
+
+	public String getState() {
+		return state;
+	}
+
+	public String getCountry() {
+		return country;
+	}
+
+	public Double getPreviousBal() {
+		return previousBal;
+	}
+
+	public Double getChargeAmount() {
+		return chargeAmount;
+	}
+
+	public Double getAdjustmentAmount() {
+		return adjustmentAmount;
+	}
+
+	public Double getTaxAmount() {
+		return taxAmount;
+	}
+
+	public Double getPaidAmount() {
+		return paidAmount;
+	}
+
+	public Double getDueAmount() {
+		return dueAmount;
+	}
+
+	public LocalDate getBillDate() {
+		return billDate;
+	}
+
+	public LocalDate getDueDate() {
+		return dueDate;
+	}
+
+	public String getMessage() {
+		return message;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillRuleData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillRuleData.java
new file mode 100644
index 0000000..1c6636e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillRuleData.java
@@ -0,0 +1,19 @@
+package org.mifosplatform.portfolio.billingorder.data;
+
+public class BillRuleData {
+
+	final String billruleOptions;
+	final Long id;
+	public BillRuleData(final Long id,final String options) {
+		this.id=id;
+		this.billruleOptions=options;
+	}
+	public String getBillruleOptions() {
+		return billruleOptions;
+	}
+	public Long getId() {
+		return id;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillingOrderData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillingOrderData.java
new file mode 100644
index 0000000..3a2cdcd
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/data/BillingOrderData.java
@@ -0,0 +1,157 @@
+package org.mifosplatform.portfolio.billingorder.data;
+
+import java.math.BigDecimal;
+import java.util.Date;
+import java.util.Set;
+
+public class BillingOrderData {
+
+	private Long clientOrderId;
+	private Long OderPriceId;
+	private Long planId;
+	private Long clientId;
+	private Date startDate;
+	private Date nextBillableDate;
+	private Date endDate;
+	private String billingFrequency;
+	private String chargeCode;
+	private String chargeType;
+	private Integer chargeDuration;
+	private String durationType;
+	private Date invoiceTillDate;
+	private BigDecimal price;
+	private String billingAlign;
+	private String oneTimeBill;
+
+
+
+	public BillingOrderData(final Long clientOrderId,final Long OderPriceId,Long planId,final Long clientId,final Date startDate,
+			final Date nextBillableDate,final Date endDate,final String billingFrequency,
+			final String chargeCode,final String chargeType,final Integer chargeDuration,
+			final String durationType,final Date invoiceTillDate,final BigDecimal price,
+			final String billingAlign,final String oneTimeBill ) {
+		this.clientOrderId = clientOrderId;
+		this.OderPriceId = OderPriceId;
+		this.planId = planId;
+		this.clientId = clientId;
+		this.startDate = startDate;
+		this.nextBillableDate = nextBillableDate;
+		this.endDate = endDate;
+		this.billingFrequency = billingFrequency;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargeType;
+		this.chargeDuration = chargeDuration;
+		this.durationType = durationType;
+		this.invoiceTillDate = invoiceTillDate;
+		this.price = price;
+		this.billingAlign = billingAlign;
+		this.oneTimeBill = oneTimeBill;
+
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+	public Date getStartDate() {
+		return startDate;
+	}
+	public void setStartDate(Date startDate) {
+		this.startDate = startDate;
+	}
+	public Date getNextBillableDate() {
+		return nextBillableDate;
+	}
+	public void setNextBillableDate(Date nextBillableDate) {
+		this.nextBillableDate = nextBillableDate;
+	}
+	public Date getEndDate() {
+		return endDate;
+	}
+	public void setEndDate(Date endDate) {
+		this.endDate = endDate;
+	}
+	public String getBillingFrequency() {
+		return billingFrequency;
+	}
+	public void setBillingFrequency(String billingFrequency) {
+		this.billingFrequency = billingFrequency;
+	}
+	public String getChargeCode() {
+		return chargeCode;
+	}
+	public void setChargeCode(String chargeCode) {
+		this.chargeCode = chargeCode;
+	}
+	public String getChargeType() {
+		return chargeType;
+	}
+	public void setChargeType(String chargeType) {
+		this.chargeType = chargeType;
+	}
+	public Integer getChargeDuration() {
+		return chargeDuration;
+	}
+	public void setChargeDuration(Integer chargeDuration) {
+		this.chargeDuration = chargeDuration;
+	}
+	public String getDurationType() {
+		return durationType;
+	}
+	public void setDurationType(String durationType) {
+		this.durationType = durationType;
+	}
+	public Date getInvoiceTillDate() {
+		return invoiceTillDate;
+	}
+	public void setInvoiceTillDate(Date invoiceTillDate) {
+		this.invoiceTillDate = invoiceTillDate;
+	}
+	public BigDecimal getPrice() {
+		return price;
+	}
+	public void setPrice(BigDecimal price) {
+		this.price = price;
+	}
+	public String getBillingAlign() {
+		return billingAlign;
+	}
+	public void setBillingAlign(String billingAlign) {
+		this.billingAlign = billingAlign;
+	}
+
+	public Long getClientOrderId() {
+		return clientOrderId;
+	}
+
+	public void setClientOrderId(Long clientOrderId) {
+		this.clientOrderId = clientOrderId;
+	}
+
+	public Long getOderPriceId() {
+		return OderPriceId;
+	}
+
+	public void setOderPriceId(Long oderPriceId) {
+		OderPriceId = oderPriceId;
+	}
+
+	public String getOneTimeBill() {
+		return oneTimeBill;
+	}
+
+	public void setOneTimeBill(String oneTimeBill) {
+		this.oneTimeBill = oneTimeBill;
+	}
+
+	public Long getPlanId() {
+		return planId;
+	}
+
+	public void setPlanId(Long planId) {
+		this.planId = planId;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrder.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrder.java
new file mode 100644
index 0000000..d2f4592
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrder.java
@@ -0,0 +1,180 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "charge")
+public class BillingOrder  extends AbstractPersistable<Long>{
+
+	@Column(name = "client_id")
+	private Long clientId;
+
+	@Column(name = "order_id")
+	private Long orderId;
+
+	@Column(name = "priceline_id")
+	private Long orderlineId;
+
+	@Column(name = "charge_code")
+	private String chargeCode;
+
+	@Column(name = "charge_type")
+	private String chargeType;
+
+	@Column(name = "discount_code")
+	private String discountCode;
+
+	@Column(name = "charge_amount")
+	private BigDecimal chargeAmount;
+
+	@Column(name = "discount_amount")
+	private BigDecimal discountAmount;
+
+	@Column(name = "netcharge_amount")
+	private BigDecimal netChargeAmount;
+
+	@Column(name = "charge_start_date")
+	private Date startDate;
+
+	@Column(name = "charge_end_date")
+	private Date entDate;
+
+	@Column(name = "invoice_id")
+	private Long invoiceId;
+	
+	@Column(name="bill_id")
+	private Long billId;
+
+	public BillingOrder() {
+	}
+
+	public BillingOrder(final Long clientId, final Long orderId,
+			final Long orderlineId, final String chargeCode,
+			final String chargeType, final String discountCode,
+			final BigDecimal chargeAmount, final BigDecimal discountAmount,
+			final BigDecimal netChargeAmount, final Date startDate,
+			final Date entDate, final long l) {
+
+		this.clientId = clientId;
+		this.orderId = orderId;
+		this.orderlineId = orderlineId;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargeType;
+		this.discountCode = discountCode;
+		this.chargeAmount = chargeAmount;
+		this.discountAmount = discountAmount;
+		this.netChargeAmount = netChargeAmount;
+		this.startDate = startDate;
+		this.entDate = entDate;
+		this.invoiceId = 1l;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+
+	public Long getOrderId() {
+		return orderId;
+	}
+
+	public void setOrderId(Long orderId) {
+		this.orderId = orderId;
+	}
+
+	public Long getOrderlineId() {
+		return orderlineId;
+	}
+
+	public void setOrderlineId(Long orderlineId) {
+		this.orderlineId = orderlineId;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public void setChargeCode(String chargeCode) {
+		this.chargeCode = chargeCode;
+	}
+
+	public String getChargeType() {
+		return chargeType;
+	}
+
+	public void setChargeType(String chargeType) {
+		this.chargeType = chargeType;
+	}
+
+	public String getDiscountCode() {
+		return discountCode;
+	}
+
+	public void setDiscountCode(String discountCode) {
+		this.discountCode = discountCode;
+	}
+
+	public BigDecimal getChargeAmount() {
+		return chargeAmount;
+	}
+
+	public void setChargeAmount(BigDecimal chargeAmount) {
+		this.chargeAmount = chargeAmount;
+	}
+
+	public BigDecimal getDiscountAmount() {
+		return discountAmount;
+	}
+
+	public void setDiscountAmount(BigDecimal discountAmount) {
+		this.discountAmount = discountAmount;
+	}
+
+	public BigDecimal getNetChargeAmount() {
+		return netChargeAmount;
+	}
+
+	public void setNetChargeAmount(BigDecimal netChargeAmount) {
+		this.netChargeAmount = netChargeAmount;
+	}
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+	public void setStartDate(Date startDate) {
+		this.startDate = startDate;
+	}
+
+	public Date getEntDate() {
+		return entDate;
+	}
+
+	public void setEntDate(Date entDate) {
+		this.entDate = entDate;
+	}
+
+	public Long getInvoiceId() {
+		return invoiceId;
+	}
+
+	public void setInvoiceId(Long invoiceId) {
+		this.invoiceId = invoiceId;
+	}
+
+	public void updateBillId(Long billId) {
+		this.billId=billId;
+		
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrderRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrderRepository.java
new file mode 100644
index 0000000..ab9094c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/BillingOrderRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface BillingOrderRepository extends  JpaRepository<BillingOrder, Long>,
+JpaSpecificationExecutor<BillingOrder>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrder.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrder.java
new file mode 100644
index 0000000..b54896d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrder.java
@@ -0,0 +1,202 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractAuditable;
+
+@Entity
+@Table(name = "orders")
+public class ClientOrder  {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name = "client_id")
+	private Long clientId;
+
+	@Column(name = "plan_id")
+	private Long planId;
+
+	@Column(name = "start_date")
+	private Date startDate;
+
+	@Column(name = "end_date")
+	private Date endDate;
+
+	@Column(name = "transaction_type")
+	private String transactionType;
+
+	@Column(name = "order_status")
+	private String orderStatus;
+
+	@Column(name = "billing_frequency")
+	private String billingFrequency;
+
+	@Column(name = "next_billable_day")
+	private Date nextBillableDay;
+
+	@Column(name = "billing_align")
+	private String billingAlign;
+
+	@Column(name = "createdby_id")
+	private Long createdById;
+
+	@Column(name = "created_date")
+	private Date createdDate;
+
+	@Column(name = "lastmodified_date")
+	private Date lastModifiedDate;
+
+	@Column(name = "lastmodifiedby_id")
+	private Long lastModifiedById;
+
+	protected ClientOrder() {
+
+	}
+
+	public ClientOrder(final long id, final Long clientId, final Long planId,
+			final Date startDate, final Date endDate,
+			final String transactionType, final String orderStatus,
+			final String billingFrequency, final Date nextBillableDay,
+			final String billingAlign, final Long createdById,
+			final Date createdDate, final Date lastModifiedDate,
+			final Long lastModifiedById) {
+
+		this.id = id;
+		this.clientId = clientId;
+		this.planId = planId;
+		this.startDate = startDate;
+		this.endDate = endDate;
+		this.transactionType = transactionType;
+		this.orderStatus = orderStatus;
+		this.billingFrequency = billingFrequency;
+		this.billingAlign = billingAlign;
+		this.billingAlign = billingAlign;
+		this.createdById = clientId;
+		this.createdDate = createdDate;
+		this.lastModifiedDate = lastModifiedDate;
+		this.lastModifiedById = lastModifiedById;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+
+	public Long getPlanId() {
+		return planId;
+	}
+
+	public void setPlanId(Long planId) {
+		this.planId = planId;
+	}
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+	public void setStartDate(Date startDate) {
+		this.startDate = startDate;
+	}
+
+	public Date getEndDate() {
+		return endDate;
+	}
+
+	public void setEndDate(Date endDate) {
+		this.endDate = endDate;
+	}
+
+	public String getTransactionType() {
+		return transactionType;
+	}
+
+	public void setTransactionType(String transactionType) {
+		this.transactionType = transactionType;
+	}
+
+	public String getOrderStatus() {
+		return orderStatus;
+	}
+
+	public void setOrderStatus(String orderStatus) {
+		this.orderStatus = orderStatus;
+	}
+
+	public String getBillingFrequency() {
+		return billingFrequency;
+	}
+
+	public void setBillingFrequency(String billingFrequency) {
+		this.billingFrequency = billingFrequency;
+	}
+
+	public Date getNextBillableDay() {
+		return nextBillableDay;
+	}
+
+	public void setNextBillableDay(Date nextBillableDay) {
+		this.nextBillableDay = nextBillableDay;
+	}
+
+	public String getBillingAlign() {
+		return billingAlign;
+	}
+
+	public void setBillingAlign(String billingAlign) {
+		this.billingAlign = billingAlign;
+	}
+
+	public Long getCreatedById() {
+		return createdById;
+	}
+
+	public void setCreatedById(Long createdById) {
+		this.createdById = createdById;
+	}
+
+	public Date getCreatedDate() {
+		return createdDate;
+	}
+
+	public void setCreatedDate(Date createdDate) {
+		this.createdDate = createdDate;
+	}
+
+	public Date getLastModifiedDate() {
+		return lastModifiedDate;
+	}
+
+	public void setLastModifiedDate(Date lastModifiedDate) {
+		this.lastModifiedDate = lastModifiedDate;
+	}
+
+	public Long getLastModifiedById() {
+		return lastModifiedById;
+	}
+
+	public void setLastModifiedById(Long lastModifiedById) {
+		this.lastModifiedById = lastModifiedById;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrderRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrderRepository.java
new file mode 100644
index 0000000..e3a996c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/ClientOrderRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ClientOrderRepository extends  JpaRepository<ClientOrder, Long>,
+JpaSpecificationExecutor<ClientOrder>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/Invoice.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/Invoice.java
new file mode 100644
index 0000000..197c03d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/Invoice.java
@@ -0,0 +1,166 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "invoice")
+public class Invoice {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name="client_id")
+	private Long clientId;
+
+	@Column(name="invoice_date")
+	private Date invoiceDate;
+
+	@Column(name="invoice_amount")
+	private BigDecimal invoiceAmount;
+
+	@Column(name="netcharge_amount")
+	private BigDecimal netChargeAmount;
+
+	@Column(name="tax_amount")
+	private BigDecimal taxAmount;
+
+	@Column(name="invoice_status")
+	private String invoiceStatus;
+
+	@Column(name="createdby_id")
+	private Long createdBy;
+
+	@Column(name="created_date")
+	private Date createdDate;
+
+	@Column(name="lastmodified_date")
+	private Date lastModifiedDate;
+
+	@Column(name="lastmodifiedby_id")
+	private Long lastModifedById;
+
+	private Invoice(){
+
+	}
+
+	public Invoice(final Long clientId,final Date invoiceDate,
+			final BigDecimal invoiceAmount,final BigDecimal netChargeAmount,
+			final BigDecimal taxAmount,final String invoiceStatus,final Long createdBy,
+			final Date createdDate,final Date lastModifiedDate,final Long lastModifedById) {
+
+		this.clientId = clientId;
+		this.invoiceDate = invoiceDate;
+		this.invoiceAmount = invoiceAmount;
+		this.netChargeAmount = netChargeAmount;
+		this.taxAmount = taxAmount;
+		this.invoiceStatus = invoiceStatus;
+		this.createdBy = createdBy;
+		this.createdDate = createdDate;
+		this.lastModifiedDate = lastModifiedDate;
+		this.lastModifedById = lastModifedById;
+	}
+
+
+
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+
+	public Date getInvoiceDate() {
+		return invoiceDate;
+	}
+
+	public void setInvoiceDate(Date invoiceDate) {
+		this.invoiceDate = invoiceDate;
+	}
+
+	public BigDecimal getInvoiceAmount() {
+		return invoiceAmount;
+	}
+
+	public void setInvoiceAmount(BigDecimal invoiceAmount) {
+		this.invoiceAmount = invoiceAmount;
+	}
+
+	public BigDecimal getNetChargeAmount() {
+		return netChargeAmount;
+	}
+
+	public void setNetChargeAmount(BigDecimal netChargeAmount) {
+		this.netChargeAmount = netChargeAmount;
+	}
+
+	public BigDecimal getTaxAmount() {
+		return taxAmount;
+	}
+
+	public void setTaxAmount(BigDecimal taxAmount) {
+		this.taxAmount = taxAmount;
+	}
+
+	public String getInvoiceStatus() {
+		return invoiceStatus;
+	}
+
+	public void setInvoiceStatus(String invoiceStatus) {
+		this.invoiceStatus = invoiceStatus;
+	}
+
+	public Long getCreatedBy() {
+		return createdBy;
+	}
+
+	public void setCreatedBy(Long createdBy) {
+		this.createdBy = createdBy;
+	}
+
+	public Date getCreatedDate() {
+		return createdDate;
+	}
+
+	public void setCreatedDate(Date createdDate) {
+		this.createdDate = createdDate;
+	}
+
+	public Date getLastModifiedDate() {
+		return lastModifiedDate;
+	}
+
+	public void setLastModifiedDate(Date lastModifiedDate) {
+		this.lastModifiedDate = lastModifiedDate;
+	}
+
+	public Long getLastModifedById() {
+		return lastModifedById;
+	}
+
+	public void setLastModifedById(Long lastModifedById) {
+		this.lastModifedById = lastModifedById;
+	}
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceRepository.java
new file mode 100644
index 0000000..dd3f312
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceRepository.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface InvoiceRepository extends
+		JpaRepository<Invoice, Long>,
+		JpaSpecificationExecutor<Invoice> {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTax.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTax.java
new file mode 100644
index 0000000..6e04125
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTax.java
@@ -0,0 +1,118 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import java.math.BigDecimal;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "charge_tax")
+public class InvoiceTax {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name = "charge_id")
+	private Long invoiceChargeId;
+
+	@Column(name = "invoice_id")
+	private Long invoiceId;
+
+	@Column(name = "tax_code")
+	private String taxCode;
+
+	@Column(name = "tax_value")
+	private BigDecimal taxValue;
+
+	@Column(name = "tax_percentage")
+	private BigDecimal taxPercentage;
+
+	@Column(name = "tax_amount")
+	private BigDecimal taxAmount;
+	
+	@Column(name = "bill_id")
+	private Long billId;
+
+	private InvoiceTax() {
+
+	}
+
+	public InvoiceTax(final Long invoiceChargeId, final Long invoiceId,
+			final String taxCode, final BigDecimal taxValue,
+			final BigDecimal taxPercentage, final BigDecimal taxAmount) {
+
+		this.invoiceChargeId = invoiceChargeId;
+		this.invoiceId = invoiceId;
+		this.taxCode = taxCode;
+		this.taxValue = taxValue;
+		this.taxPercentage = taxPercentage;
+		this.taxAmount = taxAmount;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getInvoiceChargeId() {
+		return invoiceChargeId;
+	}
+
+	public void setInvoiceChargeId(Long invoiceChargeId) {
+		this.invoiceChargeId = invoiceChargeId;
+	}
+
+	public Long getInvoiceId() {
+		return invoiceId;
+	}
+
+	public void setInvoiceId(Long invoiceId) {
+		this.invoiceId = invoiceId;
+	}
+
+	public String getTaxCode() {
+		return taxCode;
+	}
+
+	public void setTaxCode(String taxCode) {
+		this.taxCode = taxCode;
+	}
+
+	public BigDecimal getTaxValue() {
+		return taxValue;
+	}
+
+	public void setTaxValue(BigDecimal taxValue) {
+		this.taxValue = taxValue;
+	}
+
+	public BigDecimal getTaxPercentage() {
+		return taxPercentage;
+	}
+
+	public void setTaxPercentage(BigDecimal taxPercentage) {
+		this.taxPercentage = taxPercentage;
+	}
+
+	public BigDecimal getTaxAmount() {
+		return taxAmount;
+	}
+
+	public void setTaxAmount(BigDecimal taxAmount) {
+		this.taxAmount = taxAmount;
+	}
+
+	public void updateBillId(Long billId) {
+		this.billId=billId;
+		
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTaxRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTaxRepository.java
new file mode 100644
index 0000000..af874f4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/domain/InvoiceTaxRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billingorder.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface InvoiceTaxRepository extends  JpaRepository<InvoiceTax, Long>,
+JpaSpecificationExecutor<InvoiceTax>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/exceptions/BillingOrderNoRecordsFoundException.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/exceptions/BillingOrderNoRecordsFoundException.java
new file mode 100644
index 0000000..a9f578f
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/exceptions/BillingOrderNoRecordsFoundException.java
@@ -0,0 +1,15 @@
+package org.mifosplatform.portfolio.billingorder.exceptions;
+
+import org.mifosplatform.infrastructure.core.exception.AbstractPlatformDomainRuleException;
+
+
+public class BillingOrderNoRecordsFoundException extends AbstractPlatformDomainRuleException {
+
+    public BillingOrderNoRecordsFoundException() {
+        super("error.msg.billing.order.not.found", " Billing order not found ");
+    }
+    
+    public BillingOrderNoRecordsFoundException(String msg) {
+        super("error.msg.no.bills.to.generate", " No Bills TO Generate ", msg);
+    }
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformService.java
new file mode 100644
index 0000000..e839901
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformService.java
@@ -0,0 +1,23 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateData;
+
+public interface BillingOrderReadPlatformService {
+
+	List<Long> retrieveOrderIds(Long clientId);
+	
+	List<TaxMappingRateData> retrieveTaxMappingDate(String chargeCode);
+
+	List<OrderPriceData> retrieveInvoiceTillDate(Long clientOrderId);
+
+	List<BillingOrderData> retrieveBillingOrderData(Long clientId,LocalDate localDate, Long planId);
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformServiceImplementation.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformServiceImplementation.java
new file mode 100644
index 0000000..bad9ae5
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderReadPlatformServiceImplementation.java
@@ -0,0 +1,189 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Date;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+@Service
+public class BillingOrderReadPlatformServiceImplementation implements
+		BillingOrderReadPlatformService {
+
+	private final PlatformSecurityContext context;
+	private final JdbcTemplate jdbcTemplate;
+
+	@Autowired
+	public BillingOrderReadPlatformServiceImplementation(
+			final PlatformSecurityContext context,
+			final TenantAwareRoutingDataSource dataSource) {
+
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+		LocalDate localDate = new LocalDate();
+
+
+	}
+
+	@Override
+	public List<BillingOrderData> retrieveBillingOrderData(Long clientId,LocalDate date,Long planId) {
+
+		BillingOrderMapper billingOrderMapper = new BillingOrderMapper();
+		String sql = "select " + billingOrderMapper.billingOrderSchema();
+		return this.jdbcTemplate.query(sql, billingOrderMapper,
+				new Object[] { clientId,planId,date.toString() });
+	}
+
+	private static final class BillingOrderMapper implements
+			RowMapper<BillingOrderData> {
+
+		@Override
+		public BillingOrderData mapRow(ResultSet resultSet,
+				@SuppressWarnings("unused") int rowNum) throws SQLException {
+			Long clientOderId = resultSet.getLong("clientOrderId");
+			Long orderPriceId = resultSet.getLong("orderPriceId");
+			Long planId = resultSet.getLong("planId");
+			Long clientId = resultSet.getLong("clientId");
+			Date startDate = resultSet.getDate("startDate");
+			Date nextBillableDate = resultSet.getDate("nextBillableDate");
+			Date endDate = resultSet.getDate("endDate");
+			String billingFrequency = resultSet.getString("billingFrequency");
+			String chargeCode = resultSet.getString("chargeCode");
+			String chargeType = resultSet.getString("chargeType");
+			Integer chargeDuration = resultSet.getInt("chargeDuration");
+			String durationType = resultSet.getString("durationType");
+			Date invoiceTillDate = resultSet.getDate("invoiceTillDate");
+			BigDecimal price = resultSet.getBigDecimal("price");
+			String billingAlign = resultSet.getString("billingAlign");
+			return new BillingOrderData(clientOderId,orderPriceId,planId, clientId, startDate,
+					nextBillableDate, endDate, billingFrequency, chargeCode,
+					chargeType, chargeDuration, durationType, invoiceTillDate,
+					price, billingAlign, billingAlign);
+		}
+
+		public String billingOrderSchema() {
+
+			return " co.id as clientOrderId,op.id AS orderPriceId,co.plan_id as planId,co.client_id AS clientId,co.start_date AS startDate,IFNULL(co.next_billable_day, co.start_date) AS nextBillableDate,"
+					+ "co.end_date AS endDate,co.billing_frequency AS billingFrequency,op.charge_code AS chargeCode,op.charge_type AS chargeType,"
+					+ "op.charge_duration AS chargeDuration,op.duration_type AS durationType,op.invoice_tilldate AS invoiceTillDate,op.price AS price,"
+					+ "co.billing_align AS billingAlign FROM orders co left JOIN order_price op ON co.id = op.order_id"
+					+ " WHERE co.client_id = ? AND co.id = ? AND Date_format(IFNULL(op.invoice_tilldate,now() ),'%Y-%m-%d') <= ? ";
+		}
+
+	}
+
+	@Override
+	public List<TaxMappingRateData> retrieveTaxMappingDate(String chargeCode) {
+		TaxMappingMapper taxMappingMapper = new TaxMappingMapper();
+		String sql = "select" + taxMappingMapper.taxMappingSchema()
+				+ " where tm.charge_code = ? ";
+		return this.jdbcTemplate.query(sql, taxMappingMapper,
+				new Object[] { chargeCode });
+	}
+
+	private static final class TaxMappingMapper implements
+			RowMapper<TaxMappingRateData> {
+
+		@Override
+		public TaxMappingRateData mapRow(ResultSet rs, int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String chargeCode = rs.getString("chargeCode");
+			String taxCode = rs.getString("taxCode");
+			Date startDate = rs.getDate("startDate");
+			BigDecimal rate = rs.getBigDecimal("rate");
+
+			return new TaxMappingRateData(id, chargeCode, taxCode, startDate,
+					rate);
+		}
+
+		public String taxMappingSchema() {
+
+			return " tm.id AS id,tm.charge_code AS chargeCode,tm.tax_code as taxCode, "
+					+ "tm.start_date AS startDate,tm.type AS type,tm.rate AS rate "
+					+ "FROM tax_mapping_rate tm ";
+		}
+
+	}
+
+	@Override
+	public List<OrderPriceData> retrieveInvoiceTillDate(Long orderId) {
+
+		OrderPriceMapper orderPriceMapper = new OrderPriceMapper();
+		String sql = "select " + orderPriceMapper.orderPriceSchema();
+		return this.jdbcTemplate.query(sql, orderPriceMapper,
+				new Object[] { orderId });
+
+	}
+
+	private static final class OrderPriceMapper implements
+			RowMapper<OrderPriceData> {
+
+		@Override
+		public OrderPriceData mapRow(ResultSet rs, int rowNum)
+				throws SQLException {
+			Long id = rs.getLong("orderPriceId");
+			Long orderId = rs.getLong("orderId");
+			Long serviceId = rs.getLong("serviceId");
+			String chargeCode = rs.getString("chargeCode");
+			String chargeType = rs.getString("chargeType");
+			String chargeDuration = rs.getString("chargeDuration");
+			String durationType = rs.getString("durationType");
+			Date invoiceTillDate = rs.getDate("invoiceTillDate");
+			BigDecimal price = rs.getBigDecimal("price");
+			Long createdbyId = rs.getLong("createdId");
+			Date createdDate = rs.getDate("createdDate");
+			Date lastModefiedDate = rs.getDate("lastModefiedDate");
+			Long lastModefiedId = rs.getLong("lastModefiedId");
+			return new OrderPriceData(id, orderId, serviceId, chargeCode,
+					chargeType, chargeDuration, durationType, invoiceTillDate,
+					price, createdbyId, createdDate, lastModefiedDate,
+					lastModefiedId);
+		}
+
+		public String orderPriceSchema() {
+			return " op.id as orderPriceId,op.order_id as orderId,op.service_id as serviceId,"
+					+ " op.charge_code as chargeCode,op.charge_type as chargeType,op.charge_duration as chargeDuration,"
+					+ " op.duration_type as durationType,op.invoice_tilldate as invoiceTillDate,"
+					+ " op.price as price,op.createdby_id as createdId,op.created_date as createdDate,"
+					+ " op.lastmodified_date lastModefiedDate,op.lastmodifiedby_id as lastModefiedId "
+					+ "FROM order_price op WHERE order_id = ? ";
+
+		}
+	}
+
+	@Override
+	public List<Long> retrieveOrderIds(Long clientId) {
+		PlanIdMapper planIdMapper = new PlanIdMapper();
+		String sql = "select" + planIdMapper.planIdSchema();
+		return this.jdbcTemplate.query(sql, planIdMapper,new Object[] { clientId });
+		
+	}
+	
+	
+	private static final class PlanIdMapper implements RowMapper<Long> {
+
+		@Override
+		public Long mapRow(ResultSet resultSet, int rowNum) throws SQLException {
+			Long planId = resultSet.getLong("orderId");
+			return planId;
+		}
+
+		public String planIdSchema() {
+			return " id as orderId from orders where client_id = ? ";
+		}
+		
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformService.java
new file mode 100644
index 0000000..2bcfc60
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformService.java
@@ -0,0 +1,26 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceTaxCommand;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrder;
+import org.mifosplatform.portfolio.billingorder.domain.Invoice;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+
+public interface BillingOrderWritePlatformService {
+
+	List<BillingOrder> createBillingProduct(List<BillingOrderCommand> billingOrderCommands);
+	CommandProcessingResult updateBillingOrder(List<BillingOrderCommand> billingOrderCommands);
+	CommandProcessingResult updateOrderPrice(List<BillingOrderCommand> billingOrderCommands);
+	List<InvoiceTax> createInvoiceTax(List<InvoiceTaxCommand> command);
+	Invoice createInvoice(InvoiceCommand command,List<ClientBalanceData> clientBalanceDatas);
+	public void updateInvoiceTax(Invoice invoice,List<BillingOrderCommand> billingOrderCommands,List<BillingOrder> billingOrders);
+	void updateInvoiceCharge(Invoice invoice,List<BillingOrder>  billingOrder);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformServiceImplementation.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformServiceImplementation.java
new file mode 100644
index 0000000..ea3da87
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/BillingOrderWritePlatformServiceImplementation.java
@@ -0,0 +1,274 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalanceRepository;
+import org.mifosplatform.portfolio.adjustment.service.UpdateClientBalance;
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceTaxCommand;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrder;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrderRepository;
+import org.mifosplatform.portfolio.billingorder.domain.ClientOrder;
+import org.mifosplatform.portfolio.billingorder.domain.ClientOrderRepository;
+import org.mifosplatform.portfolio.billingorder.domain.Invoice;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceRepository;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTaxRepository;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolio.order.domain.Order;
+import org.mifosplatform.portfolio.order.domain.OrderPrice;
+import org.mifosplatform.portfolio.order.domain.OrderPriceRepository;
+import org.mifosplatform.portfolio.order.domain.OrderRepository;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class BillingOrderWritePlatformServiceImplementation implements
+		BillingOrderWritePlatformService {
+
+	private final static Logger logger = LoggerFactory
+			.getLogger(BillingOrderWritePlatformServiceImplementation.class);
+
+	private final PlatformSecurityContext context;
+	private final BillingOrderRepository invoiceChargeRepository;
+	private final ClientOrderRepository clientOrderRepository;
+	private final OrderPriceRepository orderPriceRepository;
+	private final InvoiceTaxRepository invoiceTaxRepository;
+	private final InvoiceRepository invoiceRepository;
+	private final OrderRepository orderRepository;
+	private final BillingOrderReadPlatformService billingProductReadPlatformService;
+	private final UpdateClientBalance updateClientBalance;
+	private final ClientBalanceRepository clientBalanceRepository;
+
+	@Autowired
+	public BillingOrderWritePlatformServiceImplementation(
+			final PlatformSecurityContext context,
+			final BillingOrderRepository invoiceChargeRepository,
+			final ClientOrderRepository clientOrderRepository,
+			final OrderPriceRepository orderPriceRepository,
+			final InvoiceTaxRepository invoiceTaxRepository,
+			final InvoiceRepository invoiceRepository,
+			final BillingOrderReadPlatformService billingProductReadPlatformService,
+			final OrderRepository orderRepository,
+			final UpdateClientBalance updateClientBalance,
+			final ClientBalanceRepository clientBalanceRepository) {
+
+		this.context = context;
+		this.invoiceChargeRepository = invoiceChargeRepository;
+		this.clientOrderRepository = clientOrderRepository;
+		this.orderPriceRepository = orderPriceRepository;
+		this.invoiceTaxRepository = invoiceTaxRepository;
+		this.invoiceRepository = invoiceRepository;
+		this.billingProductReadPlatformService = billingProductReadPlatformService;
+		this.orderRepository = orderRepository;
+		this.updateClientBalance = updateClientBalance;
+		this.clientBalanceRepository = clientBalanceRepository;
+	}
+
+	@Transactional
+	@Override
+	public List<BillingOrder> createBillingProduct(List<BillingOrderCommand> billingOrderCommands) {
+		List<BillingOrder> listOfBillingOrders = new ArrayList<BillingOrder>();
+
+		for (BillingOrderCommand billingOrderCommand : billingOrderCommands) {
+			BigDecimal discount = BigDecimal.ZERO;
+			BigDecimal netCharge = billingOrderCommand.getPrice().add(discount);
+			BillingOrder order = new BillingOrder(
+					billingOrderCommand.getClientId(),
+					billingOrderCommand.getClientOrderId(),
+					billingOrderCommand.getOrderPriceId(),
+					billingOrderCommand.getChargeCode(),
+					billingOrderCommand.getChargeType(), "abc",
+					billingOrderCommand.getPrice(), discount, netCharge,
+					billingOrderCommand.getStartDate(),
+					billingOrderCommand.getEndDate(), 0l);
+
+			order = this.invoiceChargeRepository.save(order);
+			
+			for(InvoiceTax invoiceTax : billingOrderCommand.getListOfTax()){
+				invoiceTax.setInvoiceChargeId(order.getId());
+				this.invoiceTaxRepository.save(invoiceTax);
+			}
+			
+			
+			
+			listOfBillingOrders.add(order);
+		}
+
+		return listOfBillingOrders;
+
+	}
+
+	@Transactional
+	@Override
+	public CommandProcessingResult updateBillingOrder(List<BillingOrderCommand> commands) {
+		ClientOrder clientOrder = null;
+		for (BillingOrderCommand billingOrderCommand : commands) {
+			clientOrder = this.clientOrderRepository.findOne(billingOrderCommand.getClientOrderId());
+			if (clientOrder != null) {
+				
+				clientOrder.setNextBillableDay(billingOrderCommand.getNextBillableDate());
+				clientOrder.setStartDate(billingOrderCommand.getStartDate());
+			}
+		}
+
+		// clientOrder.setEndDate(command.getEndDate());
+		this.clientOrderRepository.save(clientOrder);
+
+		return new CommandProcessingResult(Long.valueOf(clientOrder.getId()));
+
+	}
+
+	@Override
+	public CommandProcessingResult updateOrderPrice(List<BillingOrderCommand> billingOrderCommands) {
+		Order orderData = null;
+		for(BillingOrderCommand billingOrderCommand : billingOrderCommands){
+			orderData = this.orderRepository.findOne(billingOrderCommand.getClientOrderId());
+			List<OrderPrice> orderPrices = orderData.getPrice();
+			 
+			 for (OrderPrice orderPriceData : orderPrices) {
+					orderPriceData.setChargeDuration(billingOrderCommand.getChargeDuration().toString());
+					orderPriceData.setInvoiceTillDate(billingOrderCommand.getInvoiceTillDate());
+			 }
+			
+		}
+		
+		this.orderRepository.save(orderData);
+		return new CommandProcessingResult(Long.valueOf(orderData.getId()));
+	}
+
+	@Override
+	public List<InvoiceTax> createInvoiceTax(List<InvoiceTaxCommand> commands) {
+		List<InvoiceTax> invoiceTaxes = new ArrayList<InvoiceTax>();
+		if (commands != null) {
+			for (InvoiceTaxCommand invoiceTaxCommand : commands) {
+				InvoiceTax invoiceTax = new InvoiceTax(0l,0l,
+						invoiceTaxCommand.getTaxCode(), null,
+						invoiceTaxCommand.getTaxPercentage(),
+						invoiceTaxCommand.getTaxAmount());
+				invoiceTax = this.invoiceTaxRepository.save(invoiceTax);
+				invoiceTaxes.add(invoiceTax);
+			}
+		}
+
+		return invoiceTaxes;
+	}
+
+	@Override
+	public Invoice createInvoice(InvoiceCommand invoiceCommand,List<ClientBalanceData> clientBalanceDatas) {
+
+		Invoice	invoice = new Invoice(invoiceCommand.getClientId(),
+					new LocalDate().toDate(), invoiceCommand.getInvoiceAmount(),
+					invoiceCommand.getNetChargeAmount(), invoiceCommand.getTaxAmount(),
+					invoiceCommand.getInvoiceStatus(), invoiceCommand.getCreatedBy(),
+					invoiceCommand.getCreatedDate(), invoiceCommand.getLastModifiedDate(),
+					invoiceCommand.getLastModifiedId());
+			
+			Long clientBalanceId = null;
+			if (clientBalanceDatas.size() >= 1) {
+				clientBalanceId = clientBalanceDatas.get(0).getId();
+			}
+
+			ClientBalance clientBalance = null;
+			if (clientBalanceId != null) {
+				clientBalance = this.clientBalanceRepository
+						.findOne(clientBalanceId);
+			}
+
+			if (clientBalance != null) {
+
+				clientBalance = updateClientBalance.doUpdateClientBalance("DEBIT",
+						invoice.getInvoiceAmount(), invoice.getClientId(),
+						clientBalance);
+			} else if (clientBalance == null) {
+				clientBalance = updateClientBalance.createClientBalance("DEBIT",
+						invoice.getInvoiceAmount(), invoice.getClientId(),
+						clientBalance);
+			}
+
+			this.clientBalanceRepository.save(clientBalance);
+			invoice = this.invoiceRepository.save(invoice);
+	
+			
+		
+//		Invoice invoice = new Invoice(command.getClientId(),
+//				processingDate.toDate(), command.getInvoiceAmount(),
+//				command.getNetChargeAmount(), command.getTaxAmount(),
+//				command.getInvoiceStatus(), command.getCreatedBy(),
+//				command.getCreatedDate(), command.getLastModifiedDate(),
+//				command.getLastModifiedId());
+
+//		Long clientBalanceId = null;
+//		if (clientBalanceDatas.size() >= 1) {
+//			clientBalanceId = clientBalanceDatas.get(0).getId();
+//		}
+//
+//		ClientBalance clientBalance = null;
+//		if (clientBalanceId != null) {
+//			clientBalance = this.clientBalanceRepository
+//					.findOne(clientBalanceId);
+//		}
+//
+//		if (clientBalance != null) {
+//
+//			clientBalance = updateClientBalance.doUpdateClientBalance("CREDIT",
+//					invoice.getInvoiceAmount(), invoice.getClientId(),
+//					clientBalance);
+//		} else if (clientBalance == null) {
+//			clientBalance = updateClientBalance.createClientBalance("CREDIT",
+//					invoice.getInvoiceAmount(), invoice.getClientId(),
+//					clientBalance);
+//		}
+//
+//		this.clientBalanceRepository.save(clientBalance);
+//		invoice = this.invoiceRepository.save(invoice);
+		
+		return invoice;
+	}
+
+	@Override
+	public void updateInvoiceTax(Invoice invoice,List<BillingOrderCommand> billingOrderCommands,List<BillingOrder> orders) {
+
+		
+		List<List<InvoiceTax>> listOfListOfTaxes = new ArrayList<List<InvoiceTax>>();
+		for (BillingOrderCommand billingCommand : billingOrderCommands) {
+			List<InvoiceTax> listOfTaxes = billingCommand.getListOfTax();
+			listOfListOfTaxes.add(listOfTaxes);
+		}
+		for (BillingOrder billingOrder : orders) {
+
+			for (List<InvoiceTax> listOfTaxs : listOfListOfTaxes) {
+				for (InvoiceTax invoiceTax : listOfTaxs) {
+					//invoiceTax.setInvoiceChargeId(billingOrder.getId());
+					invoiceTax.setInvoiceId(invoice.getId());
+					this.invoiceTaxRepository.save(invoiceTax);
+				}
+			}
+			// for (InvoiceTax invoiceTax : tax) {
+			// invoiceTax.setInvoiceChargeId(billingOrder.getId());
+			// invoiceTax.setInvoiceId(invoice.getId());
+			// this.invoiceTaxRepository.save(tax);
+			// }
+		}
+	}
+
+	@Override
+	public void updateInvoiceCharge(Invoice invoice,List<BillingOrder> billingOrders) {
+		for (BillingOrder billingOrder : billingOrders) {
+			billingOrder.setInvoiceId(invoice.getId());
+			this.invoiceChargeRepository.save(billingOrder);
+
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBill.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBill.java
new file mode 100644
index 0000000..57574b3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBill.java
@@ -0,0 +1,356 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceTaxCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+@Service
+public class GenerateBill{
+	
+	private final BillingOrderReadPlatformService billingOrderReadPlatformService;
+	private final BillingOrderWritePlatformService billingOrderWritePlatformService;
+
+
+	@Autowired
+	public GenerateBill(BillingOrderReadPlatformService billingOrderReadPlatformService,
+			BillingOrderWritePlatformService billingOrderWritePlatformService) {
+		this.billingOrderReadPlatformService = billingOrderReadPlatformService;
+		this.billingOrderWritePlatformService = billingOrderWritePlatformService;
+		
+	}
+	
+	BigDecimal pricePerMonth = null;
+	LocalDate startDate = null;
+	LocalDate endDate = null;
+	BigDecimal price = null;
+	LocalDate invoiceTillDate = null;
+	LocalDate nextbillDate = null;
+	BillingOrderCommand billingOrderCommand = null;
+
+	
+
+	
+	public boolean isChargeTypeNRC(BillingOrderData billingOrderData) {
+		boolean chargeType = false;
+		if (billingOrderData.getChargeType().equals("NRC")) {
+			chargeType = true;
+		}
+		return chargeType;
+	}
+
+	public boolean isChargeTypeRC(BillingOrderData billingOrderData) {
+		boolean chargeType = false;
+		if (billingOrderData.getChargeType().equals("RC")) {
+			chargeType = true;
+		}
+		return chargeType;
+	}
+
+	public boolean isChargeTypeUC(BillingOrderData billingOrderData) {
+		boolean chargeType = false;
+		if (billingOrderData.getChargeType().equals("UC")) {
+			chargeType = true;
+		}
+		return chargeType;
+	}
+
+	public BillingOrderCommand getProrataMonthlyFirstBill(
+			BillingOrderData billingOrderData) {
+
+		startDate = new LocalDate();
+		int currentDay = startDate.getDayOfMonth();
+		int endOfMonth = startDate.dayOfMonth().withMaximumValue()
+				.getDayOfMonth();
+		int totalDays = endOfMonth - currentDay + 1;
+
+		endDate = startDate.dayOfMonth().withMaximumValue();
+
+		pricePerMonth = billingOrderData.getPrice();
+
+		BigDecimal pricePerDay = pricePerMonth.divide(new BigDecimal(30), 2,
+				RoundingMode.HALF_UP);
+
+		invoiceTillDate = endDate;
+		nextbillDate = invoiceTillDate.plusDays(1);
+
+		BigDecimal price = pricePerDay.multiply(new BigDecimal(totalDays));
+		
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+
+	}
+
+	public BillingOrderCommand getNextMonthBill(
+			BillingOrderData billingOrderData) {
+
+		startDate = new LocalDate(billingOrderData.getNextBillableDate());
+		endDate = new LocalDate(billingOrderData.getInvoiceTillDate())
+				.plusMonths(billingOrderData.getChargeDuration()).dayOfMonth()
+				.withMaximumValue();
+
+		invoiceTillDate = endDate;
+		nextbillDate = endDate.plusDays(1);
+
+		price = billingOrderData.getPrice();
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+
+	}
+	
+	
+
+	public List<InvoiceTaxCommand> generateInvoiceTax(List<TaxMappingRateData> taxMappingRateDatas,BigDecimal price,Long clientId ) {
+
+		BigDecimal taxPercentage = null;
+		String taxCode = null;
+		BigDecimal taxAmount = null;
+		List<InvoiceTaxCommand> invoiceTaxCommands = new ArrayList<InvoiceTaxCommand>();
+		InvoiceTaxCommand invoiceTaxCommand = null;
+		if (taxMappingRateDatas != null) {
+
+			for (TaxMappingRateData taxMappingRateData : taxMappingRateDatas) {
+
+				taxPercentage = taxMappingRateData.getRate();
+				taxCode = taxMappingRateData.getTaxCode();
+				taxAmount = price.multiply(
+						taxPercentage.divide(new BigDecimal(100)));
+
+				invoiceTaxCommand = new InvoiceTaxCommand(
+						clientId, null, null, taxCode, null,
+						taxPercentage, taxAmount);
+				invoiceTaxCommands.add(invoiceTaxCommand);
+			}
+
+		}
+		return invoiceTaxCommands;
+
+	}
+
+
+	public BillingOrderCommand getMonthyBill(BillingOrderData billingOrderData) {
+
+		if (billingOrderData.getInvoiceTillDate() == null) {
+			startDate = new LocalDate();
+
+			endDate = startDate
+					.plusMonths(billingOrderData.getChargeDuration())
+					.minusDays(1);
+
+		} else if (billingOrderData.getInvoiceTillDate() != null) {
+
+			startDate = new LocalDate(billingOrderData.getNextBillableDate());
+			endDate = startDate
+					.plusMonths(billingOrderData.getChargeDuration()).minusDays(1);
+
+			// invoiceTillDate = endDate;
+			// nextbillDate = invoiceTillDate.plusDays(1);
+
+		}
+
+		invoiceTillDate = endDate;
+		nextbillDate = invoiceTillDate.plusDays(1);
+
+		price = billingOrderData.getPrice();
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+
+	}
+
+	public BillingOrderCommand getProrataWeeklyFirstBill(
+			BillingOrderData billingOrderData) {
+
+		startDate = new LocalDate();
+		endDate = startDate.dayOfWeek().withMaximumValue();
+
+		int startDateOfWeek = startDate.getDayOfMonth();
+
+		int endDateOfWeek = startDate.dayOfWeek().withMaximumValue()
+				.getDayOfMonth();
+
+		int totalDays = 0;
+
+		int diff = Math.abs(endDateOfWeek - startDateOfWeek);
+		int numberOfdaysOfMonth = startDate.dayOfMonth().withMaximumValue()
+				.getDayOfMonth();
+		if (diff >= 7) {
+			totalDays = numberOfdaysOfMonth - diff + 1;
+		} else {
+			totalDays = endDateOfWeek - startDateOfWeek + 1;
+		}
+
+		BigDecimal pricePerDay = billingOrderData.getPrice().divide(
+				new BigDecimal(7), 2, RoundingMode.HALF_UP);
+
+		price = pricePerDay.multiply(new BigDecimal(totalDays));
+
+		invoiceTillDate = endDate;
+		nextbillDate = endDate.plusDays(1);
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+
+	}
+
+	public BillingOrderCommand getNextWeeklyBill(
+			BillingOrderData billingOrderData) {
+
+		startDate = new LocalDate(billingOrderData.getNextBillableDate());
+
+		endDate = startDate.dayOfWeek().withMaximumValue();
+
+		price = billingOrderData.getPrice();
+
+		invoiceTillDate = endDate;
+		nextbillDate = endDate.plusDays(1);
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+
+	}
+
+	public BillingOrderCommand getWeeklyBill(BillingOrderData billingOrderData) {
+
+		if (billingOrderData.getInvoiceTillDate() == null) {
+			startDate = new LocalDate();
+
+			endDate = startDate.plusWeeks(1).minusDays(1);
+
+		} else if (billingOrderData.getInvoiceTillDate() != null) {
+
+			startDate = new LocalDate(billingOrderData.getNextBillableDate());
+			endDate = startDate.plusWeeks(1).minusDays(1);
+
+		}
+		price = billingOrderData.getPrice();
+		invoiceTillDate = endDate;
+		nextbillDate = invoiceTillDate.plusDays(1);
+
+		price = billingOrderData.getPrice();
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+	}
+
+	public BillingOrderCommand getOneTimeBill(BillingOrderData billingOrderData) {
+
+		LocalDate startDate = new LocalDate();
+		LocalDate endDate = startDate;
+		LocalDate invoiceTillDate = startDate;
+		LocalDate nextbillDate = startDate;
+		BigDecimal price = billingOrderData.getPrice();
+		billingOrderData.setChargeDuration(0);
+
+		List<TaxMappingRateData> taxMappingRateDatas = billingOrderReadPlatformService.retrieveTaxMappingDate(billingOrderData.getChargeCode());
+		List<InvoiceTaxCommand> invoiceTaxCommand = generateInvoiceTax(taxMappingRateDatas, price,billingOrderData.getClientId());
+		List<InvoiceTax> listOfTaxes = billingOrderWritePlatformService.createInvoiceTax(invoiceTaxCommand);
+		
+		billingOrderCommand = new BillingOrderCommand(billingOrderData.getClientOrderId(),
+				billingOrderData.getOderPriceId(),
+				billingOrderData.getClientId(), startDate.toDate(),
+				nextbillDate.toDate(), endDate.toDate(),
+				billingOrderData.getBillingFrequency(),
+				billingOrderData.getChargeCode(),
+				billingOrderData.getChargeType(),
+				billingOrderData.getChargeDuration(),
+				billingOrderData.getDurationType(), invoiceTillDate.toDate(),
+				price, billingOrderData.getBillingAlign(),
+				billingOrderData.getOneTimeBill(),listOfTaxes);
+		return  billingOrderCommand;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderService.java
new file mode 100644
index 0000000..58fae0c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderService.java
@@ -0,0 +1,23 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceTaxCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrder;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateData;
+
+public interface GenerateBillingOrderService {
+
+	public List<BillingOrderCommand> generatebillingOrder(List<BillingOrderData> products);
+
+	public List<InvoiceTaxCommand> generateInvoiceTax(List<TaxMappingRateData> taxMappingRateDatas,BigDecimal price,Long clientId);
+
+	public InvoiceCommand generateInvoice(List<BillingOrderCommand> billingOrderCommands);
+
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderServiceImplementation.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderServiceImplementation.java
new file mode 100644
index 0000000..9780e3c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingorder/service/GenerateBillingOrderServiceImplementation.java
@@ -0,0 +1,293 @@
+package org.mifosplatform.portfolio.billingorder.service;
+
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.billingorder.commands.BillingOrderCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceCommand;
+import org.mifosplatform.portfolio.billingorder.commands.InvoiceTaxCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillingOrderData;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.billingorder.exceptions.BillingOrderNoRecordsFoundException;
+import org.mifosplatform.portfolio.order.domain.OrderRepository;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class GenerateBillingOrderServiceImplementation implements
+		GenerateBillingOrderService {
+	
+	private final GenerateBill generateBill;
+	private final OrderRepository orderRepository;
+	
+
+	@Autowired
+	public GenerateBillingOrderServiceImplementation(GenerateBill generateBill,final OrderRepository orderRepository) {
+		this.generateBill = generateBill;
+		this.orderRepository = orderRepository;
+	}
+
+	@Override
+	public List<BillingOrderCommand> generatebillingOrder(List<BillingOrderData> products) {
+		
+		BillingOrderCommand billingOrderCommand = null;
+		List<BillingOrderCommand> billingOrderCommands = new ArrayList<BillingOrderCommand>();
+
+		// First loop -- insert a record in invoice_charge
+		// For each Record we have to first identify the charge type based
+		// on
+		// charge type if NRC it is Only One time Bill
+		// Charge type = RC we have to do the calculation based on the
+		// duration
+		// and duration type * price
+		// Phase II implementation of Discounts
+		// Phase III implementation of UC will come into picture
+		// Second loop -- insert a record in invoice_tax
+		// For each Record seek the mapping of Tax to the charge code if
+		// exists
+		// then we need to do the calculation and post a record in
+		// invoice_tax
+		// if not available the exit
+		// Phase II implementation will be for if the charge code has
+		// multiple
+		// tax mappings
+		// Phase III implementation will be for tax on tax
+		// Phase IV implementation will be on Round off Values
+		// Final Round up -- insert a record in invoice base on the client
+		// id --
+		// Each client may have one or many billing records
+
+		// 1st loop on the records
+
+		if (products.size() != 0) {
+
+			for (BillingOrderData billingOrderData : products) {
+
+				// Inserting the data into invoice_charge
+
+				
+				if (generateBill.isChargeTypeNRC(billingOrderData)) {
+					// code to be developed latter
+					System.out.println("---- NRC ---");
+					if(billingOrderData.getChargeDuration()>=1){
+						billingOrderCommand = generateBill.getOneTimeBill(billingOrderData);
+						billingOrderCommands.add(billingOrderCommand);
+
+					}else {
+
+					}
+
+				} else if (generateBill.isChargeTypeRC(billingOrderData)) {
+
+					System.out.println("---- RC ----");
+
+					BigDecimal pricePerMonth = null;
+					LocalDate startDate = null;
+					LocalDate endDate = null;
+					BigDecimal price = null;
+					LocalDate invoiceTillDate = null;
+					LocalDate nextbillDate = null;
+					// monthly
+					if (billingOrderData.getDurationType().equalsIgnoreCase(
+							"month(s)")) {
+						if (billingOrderData.getBillingAlign().equalsIgnoreCase("n")) {
+
+							billingOrderCommand = generateBill.getMonthyBill(billingOrderData);
+							billingOrderCommands.add(billingOrderCommand);
+
+						} else if (billingOrderData.getBillingAlign().equalsIgnoreCase("y")) {
+
+							if (billingOrderData.getInvoiceTillDate() == null) {
+
+								billingOrderCommand = generateBill.getProrataMonthlyFirstBill(billingOrderData);
+								billingOrderCommands.add(billingOrderCommand);
+
+							} else if (billingOrderData.getInvoiceTillDate() != null) {
+
+								billingOrderCommand = generateBill.getNextMonthBill(billingOrderData);
+								billingOrderCommands.add(billingOrderCommand);
+
+							}
+						}
+
+						// weekly
+					} else if (billingOrderData.getDurationType()
+							.equalsIgnoreCase("week(s)")) {
+
+						if (billingOrderData.getBillingAlign().equalsIgnoreCase("n")) {
+
+							billingOrderCommand = generateBill.getWeeklyBill(billingOrderData);
+							billingOrderCommands.add(billingOrderCommand);
+
+
+						} else if (billingOrderData.getBillingAlign().equalsIgnoreCase("y")) {
+
+							if (billingOrderData.getInvoiceTillDate() == null) {
+
+								billingOrderCommand = generateBill.getProrataWeeklyFirstBill(billingOrderData);
+								billingOrderCommands.add(billingOrderCommand);
+
+							} else if (billingOrderData.getInvoiceTillDate() != null) {
+
+								billingOrderCommand = generateBill.getNextWeeklyBill(billingOrderData);
+								billingOrderCommands.add(billingOrderCommand);
+							}
+						}
+
+						// daily
+					} else if (billingOrderData.getDurationType()
+							.equalsIgnoreCase("daily")) {
+						// To be developed latter
+					}
+				}
+			}
+		} else if (products.size() == 0) {
+			throw new BillingOrderNoRecordsFoundException();
+		}
+		// return billingOrderCommand;
+		return billingOrderCommands;
+	}
+
+	@Override
+	public List<InvoiceTaxCommand> generateInvoiceTax(List<TaxMappingRateData> taxMappingRateDatas,BigDecimal price,Long clientId ) {
+		
+		
+
+		BigDecimal taxPercentage = null;
+		String taxCode = null;
+		BigDecimal taxAmount = null;
+		List<InvoiceTaxCommand> invoiceTaxCommands = new ArrayList<InvoiceTaxCommand>();
+		InvoiceTaxCommand invoiceTaxCommand = null;
+		if (taxMappingRateDatas != null) {
+
+			for (TaxMappingRateData taxMappingRateData : taxMappingRateDatas) {
+
+				taxPercentage = taxMappingRateData.getRate();
+				taxCode = taxMappingRateData.getTaxCode();
+				taxAmount = price.multiply(
+						taxPercentage.divide(new BigDecimal(100)));
+
+				invoiceTaxCommand = new InvoiceTaxCommand(
+						clientId, null, null, taxCode, null,
+						taxPercentage, taxAmount);
+				invoiceTaxCommands.add(invoiceTaxCommand);
+			}
+
+		}
+		return invoiceTaxCommands;
+
+	}
+
+	@Override
+	public InvoiceCommand generateInvoice(List<BillingOrderCommand> billingOrderCommands) {
+		BigDecimal totalChargeAmountForServices = BigDecimal.ZERO;
+		BigDecimal totalTaxAmountForServices = BigDecimal.ZERO;
+		BigDecimal invoiceAmount = BigDecimal.ZERO;
+		LocalDate invoiceDate = new LocalDate();
+		for(BillingOrderCommand billingOrderCommand : billingOrderCommands){
+			totalChargeAmountForServices = billingOrderCommand.getPrice().add(totalChargeAmountForServices);
+			List<InvoiceTax> listOfTaxes = billingOrderCommand.getListOfTax();
+			BigDecimal netTaxForService = BigDecimal.ZERO;
+			for(InvoiceTax invoiceTax : listOfTaxes){
+				netTaxForService = invoiceTax.getTaxAmount().add(netTaxForService);
+			}
+			totalTaxAmountForServices = totalTaxAmountForServices.add(netTaxForService);
+		}
+		invoiceAmount = totalChargeAmountForServices.add(totalTaxAmountForServices);
+		
+		return new InvoiceCommand(billingOrderCommands.get(0).getClientId(), invoiceDate.toDate(),
+				invoiceAmount, totalChargeAmountForServices, totalTaxAmountForServices, "active", null,
+				null, null, null);
+		
+		
+		// invoice amount as zero
+//		List<InvoiceCommand> invoiceCommands = new ArrayList<InvoiceCommand>();
+//		List<Long> orderIds = new ArrayList<Long>();
+//		for(BillingOrderCommand billingOrderCommand : billingOrderCommands){
+//			Long orderId = billingOrderCommand.getClientOrderId();
+//			orderIds.add(orderId);
+//		}
+//		
+//		Set<Long> clientOrderIds = toSet(orderIds);
+		
+//		for(Long orderId : clientOrderIds){
+//			BigDecimal totalChargeAmountForServices = BigDecimal.ZERO;
+//			BigDecimal totalTaxAmountForServices = BigDecimal.ZERO;
+//			BigDecimal invoiceAmount = BigDecimal.ZERO;
+//			LocalDate invoiceDate = new LocalDate();
+//			for(BillingOrderCommand billingOrderCommand : billingOrderCommands){
+//				if(billingOrderCommand.getClientOrderId()== orderId){
+//					// our main logic goes here
+//					totalChargeAmountForServices = billingOrderCommand.getPrice().add(totalChargeAmountForServices);
+//					BigDecimal netTaxForService = BigDecimal.ZERO;
+//					List<InvoiceTax> listOfTaxes = billingOrderCommand.getListOfTax();
+//					for(InvoiceTax invoiceTax : listOfTaxes){
+//						netTaxForService = invoiceTax.getTaxAmount().add(netTaxForService);
+//					}
+//					totalTaxAmountForServices = totalTaxAmountForServices.add(netTaxForService);
+//				}
+//			}
+//			invoiceAmount = totalChargeAmountForServices.add(totalTaxAmountForServices);
+//			InvoiceCommand invoiceCommand =  new InvoiceCommand(billingOrderCommands.get(0).getClientId(), invoiceDate.toDate(),
+//					invoiceAmount, totalChargeAmountForServices, totalTaxAmountForServices, "active", null,
+//					null, null, null);
+//			
+//			invoiceCommands.add(invoiceCommand);
+//		}
+//		return invoiceCommands;
+		
+
+				
+//		for(BillingOrderCommand billingOrderCommand : billingOrderCommands){
+//			totalChargeAmountForServices = billingOrderCommand.getPrice().add(totalChargeAmountForServices);
+//			BigDecimal netTaxForService = BigDecimal.ZERO;
+//			List<InvoiceTax> listOfTaxes = billingOrderCommand.getListOfTax();
+//			for(InvoiceTax invoiceTax : listOfTaxes){
+//				netTaxForService = invoiceTax.getTaxAmount().add(netTaxForService);
+//			}
+//			totalTaxAmountForServices = totalTaxAmountForServices.add(netTaxForService);
+//			
+//		}
+//		
+//		invoiceAmount = totalChargeAmountForServices.add(totalTaxAmountForServices);
+		
+		
+//		for(BillingOrder billingOrder : listOfBillingOrders){
+//			BigDecimal netChargeAmount = billingOrder.getChargeAmount();
+//			BigDecimal netTaxAmount = BigDecimal.ZERO;
+//			for(List<InvoiceTax> tax : listOfListOfTaxes){
+//				BigDecimal taxAmount = BigDecimal.ZERO;	
+//				if (tax.size() != 0) {
+//					for (InvoiceTax invoiceTax : tax) {
+//						taxAmount = invoiceTax.getTaxAmount();
+//						netTaxAmount = taxAmount.add(netTaxAmount);
+//					}
+//				}
+//			}
+//			totalTaxAmount = netTaxAmount.add(totalTaxAmount);
+//			totalChargeAmount = netChargeAmount.add(totalChargeAmount);
+//			
+//		}
+		// LocalDate invoiceDate = new LocalDate();
+		//BigDecimal netChargeAmount = command.getPrice();
+		//BigDecimal taxAmount = null;
+		//BigDecimal totalTaxAmount = BigDecimal.ZERO;
+
+//		if (tax.size() != 0) {
+//			for (InvoiceTax invoiceTax : tax) {
+//				taxAmount = invoiceTax.getTaxAmount();
+//				totalTaxAmount = taxAmount.add(totalTaxAmount);
+//			}
+//		}
+		
+//		BigDecimal invoiceAmount = totalChargeAmount.add(totalTaxAmount);
+//		return new InvoiceCommand(billingOrderCommands.get(0).getClientId(), invoiceDate.toDate(),
+//				invoiceAmount, totalChargeAmountForServices, totalTaxAmountForServices, "active", null,
+//				null, null, null);
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/GoogleGsonPortfolioApiJsonBillingSerializerService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/GoogleGsonPortfolioApiJsonBillingSerializerService.java
new file mode 100644
index 0000000..2be17e2
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/GoogleGsonPortfolioApiJsonBillingSerializerService.java
@@ -0,0 +1,285 @@
+package org.mifosplatform.portfolio.billingproduct;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import org.mifosplatform.infrastructure.core.serialization.GoogleGsonSerializerHelper;
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentCodeData;
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
+import org.mifosplatform.portfolio.discountmaster.commands.Discount;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.mifosplatform.portfolio.loanaccount.data.LoanBasicDetailsData;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.data.PricingData;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateOptionsData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterDataOptions;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import com.google.gson.Gson;
+
+@Service
+public class GoogleGsonPortfolioApiJsonBillingSerializerService implements PortfolioApiJsonBillingSerializerService {
+
+	
+	    private static final Set<String> SUBSCRIPTION_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id",
+	           "subscription_period","subscription_type","units","allowedtypes","day_name","subscriptionTypeId"));
+	    
+	    private static final Set<String> SERVICE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id","serviceCode","serviceDescription","serviceType","serviceData"));
+	    
+	    private static final Set<String> ORDER_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id","pdid","status","contractperiod",
+	            "plan_code","units","service_code","allowedtypes","data","servicedata","billing_frequency", "start_date", "contract_period","startDate"));
+	    
+	    private static final Set<String> BILLINGCYCLE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id",
+	            "billing_code","description","frequency","every","day_name","day_num","allowedtypes"));
+	    
+	    private static final Set<String> PAYMODE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id",
+	            "code","descrition","type","categorytypes"));
+
+	   
+
+	    
+	    private static final Set<String> PAYMENT_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id","paymentTypes"));
+
+
+	
+	    
+	    private static final Set<String> PLAN_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id", "planCode", "plan_description", "startDate",
+	            "endDate", "status", "service_code", "service_description", "charge_code", "charge_description","servicedata","contractPeriod",
+	            "service_type", "charge_type", "allowedtypes","selectedservice","bill_rule","billiingcycle","servicedata","services","statusname","planstatus"));
+
+	    private static final Set<String> PRICING_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("plan_code","planId","serviceId","chargeId","price",
+	    		"chargeVariantId","discountId","planCode","id", "serviceData","chargeData","data", "charge_code","charge_varaint","price"));
+	 
+
+	 
+	    private static final Set<String> DISCOUNT_MASTER_DATA_PARAMETERS=new HashSet<String>(Arrays.asList("id","discountCode","discountDescription","discounType","discountValue"));
+	    private static final Set<String> DISCOUNT_MASTER_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("discountCode","discountOptions"));
+	private static final Set<String> SERVICE_MASTER_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("id","serviceType","serviceCode","serviceDescription"));
+	private static final Set<String> TAX_MASTER_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("id","taxType","taxMasterOptions"));
+	private static final Set<String> TRANSACTIONAL_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("transactionId","transactionDate","transactionType","amount","billDate","dueDate","id"));
+	private static final Set<String> TAX_MAPPING_RATE_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("id","taxCode","taxMasterOptions"));
+
+	    private final GoogleGsonSerializerHelper helper;
+
+	    @Autowired
+	    public GoogleGsonPortfolioApiJsonBillingSerializerService(final GoogleGsonSerializerHelper helper) {
+	        this.helper = helper;
+	    }
+
+	   
+	    
+	    @Override
+	    public String serializeSubscriptionToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final Collection<SubscriptionData> products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	                SUBSCRIPTION_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products.toArray(new SubscriptionData[products.size()]));
+	    }
+	    
+	    @Override
+	    public String serializeServiceToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final ServiceData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	         SERVICE_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
+	    
+	    @Override
+	    public String serializeOrderToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	           OrderData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	                ORDER_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
+	    
+	    @Override
+	    public String serializeBillingCycleToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final BillingCycleData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	         BILLINGCYCLE_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
+	    
+	    @Override public String serializePaymodeToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final PaymodeData data) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	         PAYMODE_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, data);
+	    }
+	    
+	    @Override
+	    public String serializeSubscriptionToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final SubscriptionData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	                SUBSCRIPTION_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
+	    
+	    @Override
+	    public String serializePaytermsToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final SubscriptionData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	                SUBSCRIPTION_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
+
+	  
+	    
+	    @Override
+	    public String serializeClientOrderDataToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final List<OrderData> clientAccount) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(ORDER_DATA_PARAMETERS,
+	                prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, clientAccount.toArray());
+	    }
+	    
+	    @Override
+	    public String serializePricingDataToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final PricingData clientAccount) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PRICING_DATA_PARAMETERS,
+	                prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, clientAccount);
+	    }
+	    
+	    @Override
+	public String serializePlanDataToJson(boolean prettyPrint,	Set<String> responseParameters, List<PlanData> products)
+	    {
+	     final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PLAN_DATA_PARAMETERS,
+	                 prettyPrint, responseParameters);
+	         return helper.serializedJsonFrom(gsonDeserializer, products);
+	    
+	    }
+	   
+
+	  
+
+
+	   
+
+	    @Override
+	    public String serializePlanDataToJson(boolean prettyPrint, Set<String> responseParameters, PlanData account) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PLAN_DATA_PARAMETERS,
+	                prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, account);
+	    }
+	    
+	    
+	    
+	    @Override
+	public String serializeDiscountMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, DiscountMasterData discountMasterData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	DISCOUNT_MASTER_DATA_PARAMETERS, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, discountMasterData);
+	}
+	@Override
+	public String serializeDiscountMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<DiscountMasterData> discountMasterData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	DISCOUNT_MASTER_DATA_PARAMETERS, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, discountMasterData.toArray(new DiscountMasterData[discountMasterData.size()]));
+	}
+	@Override
+	public String serializeDiscountMasterDataToJsonTemplete(boolean prettyPrint,Set<String> responseParameters, AdjustmentCodeData discountMasterData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	DISCOUNT_MASTER_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, discountMasterData);
+	}
+
+	@Override
+	public String serializeDiscountMasterDataToJsonTemplete(boolean prettyPrint,Set<String> responseParameters, Collection<Discount> datass)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	DISCOUNT_MASTER_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, datass);
+	}
+
+	@Override
+	public String serializeServiceMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<SericeMasterOptionsData> serviceMasterData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	SERVICE_MASTER_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, serviceMasterData.toArray(new SericeMasterOptionsData[serviceMasterData.size()]));
+	}
+
+	@Override
+	public String serializeTaxMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<TaxMasterDataOptions> taxMasterData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	TAX_MASTER_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, taxMasterData.toArray(new TaxMasterDataOptions[taxMasterData.size()]));
+	}
+
+	@Override
+	public String serializeTaxMappingRateTemplateDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<TaxMappingRateOptionsData> taxMappingRateOptionsData)
+	{
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	TAX_MAPPING_RATE_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, taxMappingRateOptionsData.toArray(new TaxMappingRateOptionsData[taxMappingRateOptionsData.size()]));
+	}
+
+	@Override
+	public String serializeOrderToJson(boolean prettyPrint,
+	Set<String> responseParameters, List<OrderData> data) {
+	final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	                ORDER_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, data);
+	}
+
+	@Override
+	public String serializeTransactionalDataToJson(boolean prettyPrint,
+	Set<String> responseParameters,
+	List<FinancialTransactionsData> transactionData) {
+	final Gson gsonDeserializer = helper
+	.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	TRANSACTIONAL_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+	return helper.serializedJsonFrom(gsonDeserializer, transactionData);
+	}
+
+
+
+	 @Override
+	    public String serializePaymentToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final LoanBasicDetailsData loanAccount,PaymodeData paymentypes) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PAYMENT_DATA_PARAMETERS,
+	                prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, paymentypes);
+	    }
+
+
+
+	@Override
+	public String serializeServiceDataToJson(boolean prettyPrint,
+			Set<String> responseParameters, SericeMasterOptionsData productData) {
+		 final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(SERVICE_MASTER_DATA_PARAMETERS_TEMPLETE,
+	                prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, productData);
+	}
+
+
+
+
+
+
+
+	
+	}
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiBillingDataConversionServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiBillingDataConversionServiceImpl.java
new file mode 100644
index 0000000..3c821ba
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiBillingDataConversionServiceImpl.java
@@ -0,0 +1,1081 @@
+package org.mifosplatform.portfolio.billingproduct;
+
+import java.lang.reflect.Type;
+import java.math.BigDecimal;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.text.NumberFormat;
+import java.text.ParseException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.lang.StringUtils;
+import org.joda.time.LocalDate;
+import org.joda.time.format.DateTimeFormat;
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.exception.InvalidJsonException;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.infrastructure.core.exception.UnsupportedParameterException;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
+import org.mifosplatform.portfolio.client.serialization.ClientCommandFromApiJsonDeserializer;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.format.number.NumberFormatter;
+import org.springframework.stereotype.Service;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.reflect.TypeToken;
+
+@Service
+public class PortfolioApiBillingDataConversionServiceImpl implements
+		PortfolioApiDataBillingConversionService {
+
+	/**
+	 * Google-gson class for converting to and from json.
+	 */
+	private final Gson gsonConverter;
+
+	private final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer;
+
+	@Autowired
+	public PortfolioApiBillingDataConversionServiceImpl(
+			final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer) {
+		this.clientCommandFromApiJsonDeserializer = clientCommandFromApiJsonDeserializer;
+		this.gsonConverter = new Gson();
+	}
+
+	private void checkForUnsupportedParameters(Map<String, ?> requestMap,
+			Set<String> supportedParams) {
+		List<String> unsupportedParameterList = new ArrayList<String>();
+		for (String providedParameter : requestMap.keySet()) {
+			if (!supportedParams.contains(providedParameter)) {
+				unsupportedParameterList.add(providedParameter);
+			}
+		}
+
+		if (!unsupportedParameterList.isEmpty()) {
+			throw new UnsupportedParameterException(unsupportedParameterList);
+		}
+	}
+
+	private String extractStringParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		String paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			paramValue = (String) requestMap.get(paramName);
+			modifiedParameters.add(paramName);
+		}
+
+		if (paramValue != null) {
+			paramValue = paramValue.trim();
+		}
+
+		return paramValue;
+	}
+
+	private Integer extractIntegerParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		Integer paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			paramValue = convertToInteger(valueAsString, paramName,
+					extractLocaleValue(requestMap));
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
+
+	private BigDecimal extractBigDecimalParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		BigDecimal paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			paramValue = convertFrom(valueAsString, paramName,
+					extractLocaleValue(requestMap));
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
+
+	private boolean extractBooleanParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		boolean paramValue = false;
+		String paramValueAsString = null;
+		if (requestMap.containsKey(paramName)) {
+			paramValueAsString = (String) requestMap.get(paramName);
+
+			if (paramValueAsString != null) {
+				paramValueAsString = paramValueAsString.trim();
+			}
+
+			paramValue = Boolean.valueOf(paramValueAsString);
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
+
+	private Long extractLongParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		Long paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			if (StringUtils.isNotBlank(valueAsString)) {
+				paramValue = Long.valueOf(Double.valueOf(valueAsString)
+						.longValue());
+			}
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
+
+	private LocalDate extractLocalDateParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		LocalDate paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			if (StringUtils.isNotBlank(valueAsString)) {
+				final String dateFormat = (String) requestMap.get("dateFormat");
+				final Locale locale = new Locale(
+						(String) requestMap.get("locale"));
+				paramValue = convertFrom(valueAsString, paramName, dateFormat,
+						locale);
+			}
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
+
+	private Locale extractLocaleValue(Map<String, ?> requestMap) {
+		Locale clientApplicationLocale = null;
+		String locale = null;
+		if (requestMap.containsKey("locale")) {
+			locale = (String) requestMap.get("locale");
+			clientApplicationLocale = localeFromString(locale);
+		}
+		return clientApplicationLocale;
+	}
+
+	private LocalDate convertFrom(final String dateAsString,
+			final String parameterName, final String dateFormat,
+			final Locale clientApplicationLocale) {
+
+		if (StringUtils.isBlank(dateFormat) || clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			if (StringUtils.isBlank(dateFormat)) {
+				String defaultMessage = new StringBuilder(
+						"The parameter '"
+								+ parameterName
+								+ "' requires a 'dateFormat' parameter to be passed with it.")
+						.toString();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.missing.dateFormat.parameter",
+						defaultMessage, parameterName);
+				dataValidationErrors.add(error);
+			}
+			if (clientApplicationLocale == null) {
+				String defaultMessage = new StringBuilder(
+						"The parameter '"
+								+ parameterName
+								+ "' requires a 'locale' parameter to be passed with it.")
+						.toString();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.missing.locale.parameter",
+						defaultMessage, parameterName);
+				dataValidationErrors.add(error);
+			}
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		LocalDate eventLocalDate = null;
+		if (StringUtils.isNotBlank(dateAsString)) {
+			try {
+				// Locale locale = LocaleContextHolder.getLocale();
+				eventLocalDate = DateTimeFormat
+						.forPattern(dateFormat)
+						.withLocale(clientApplicationLocale)
+						.parseLocalDate(
+								dateAsString
+										.toLowerCase(clientApplicationLocale));
+			} catch (IllegalArgumentException e) {
+				List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.invalid.date.format", "The parameter "
+								+ parameterName
+								+ " is invalid based on the dateFormat: '"
+								+ dateFormat + "' and locale: '"
+								+ clientApplicationLocale + "' provided:",
+						parameterName, dateAsString, dateFormat);
+				dataValidationErrors.add(error);
+
+				throw new PlatformApiDataValidationException(
+						"validation.msg.validation.errors.exist",
+						"Validation errors exist.", dataValidationErrors);
+			}
+		}
+
+		return eventLocalDate;
+	}
+
+	private Integer convertToInteger(final String numericalValueFormatted,
+			final String parameterName, final Locale clientApplicationLocale) {
+
+		if (clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			String defaultMessage = new StringBuilder("The parameter '"
+					+ parameterName
+					+ "' requires a 'locale' parameter to be passed with it.")
+					.toString();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.missing.locale.parameter", defaultMessage,
+					parameterName);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		try {
+			Integer number = null;
+
+			if (StringUtils.isNotBlank(numericalValueFormatted)) {
+
+				String source = numericalValueFormatted.trim();
+
+				NumberFormat format = NumberFormat
+						.getInstance(clientApplicationLocale);
+				DecimalFormat df = (DecimalFormat) format;
+				DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
+				df.setParseBigDecimal(true);
+
+				// http://bugs.sun.com/view_bug.do?bug_id=4510618
+				char groupingSeparator = symbols.getGroupingSeparator();
+				if (groupingSeparator == '\u00a0') {
+					source = source.replaceAll(" ",
+							Character.toString('\u00a0'));
+				}
+
+				Number parsedNumber = df.parse(source);
+
+				double parsedNumberDouble = parsedNumber.doubleValue();
+				int parsedNumberInteger = parsedNumber.intValue();
+
+				if (source.contains(Character.toString(symbols
+						.getDecimalSeparator()))) {
+					throw new ParseException(source, 0);
+				}
+
+				if (!Double.valueOf(parsedNumberDouble).equals(
+						Double.valueOf(Integer.valueOf(parsedNumberInteger)))) {
+					throw new ParseException(source, 0);
+				}
+
+				number = parsedNumber.intValue();
+			}
+
+			return number;
+		} catch (ParseException e) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError
+					.parameterError(
+							"validation.msg.invalid.integer.format",
+							"The parameter "
+									+ parameterName
+									+ " has value: "
+									+ numericalValueFormatted
+									+ " which is invalid integer value for provided locale of ["
+									+ clientApplicationLocale.toString() + "].",
+							parameterName, numericalValueFormatted,
+							clientApplicationLocale);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+	}
+
+	private BigDecimal convertFrom(final String numericalValueFormatted,
+			final String parameterName, final Locale clientApplicationLocale) {
+
+		if (clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			String defaultMessage = new StringBuilder("The parameter '"
+					+ parameterName
+					+ "' requires a 'locale' parameter to be passed with it.")
+					.toString();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.missing.locale.parameter", defaultMessage,
+					parameterName);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		try {
+			BigDecimal number = null;
+
+			if (StringUtils.isNotBlank(numericalValueFormatted)) {
+
+				String source = numericalValueFormatted.trim();
+
+				NumberFormat format = NumberFormat
+						.getNumberInstance(clientApplicationLocale);
+				DecimalFormat df = (DecimalFormat) format;
+				DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
+				// http://bugs.sun.com/view_bug.do?bug_id=4510618
+				char groupingSeparator = symbols.getGroupingSeparator();
+				if (groupingSeparator == '\u00a0') {
+					source = source.replaceAll(" ",
+							Character.toString('\u00a0'));
+				}
+
+				NumberFormatter numberFormatter = new NumberFormatter();
+				Number parsedNumber = numberFormatter.parse(source,
+						clientApplicationLocale);
+				number = BigDecimal.valueOf(Double.valueOf(parsedNumber
+						.doubleValue()));
+			}
+
+			return number;
+		} catch (ParseException e) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError
+					.parameterError(
+							"validation.msg.invalid.decimal.format",
+							"The parameter "
+									+ parameterName
+									+ " has value: "
+									+ numericalValueFormatted
+									+ " which is invalid decimal value for provided locale of ["
+									+ clientApplicationLocale.toString() + "].",
+							parameterName, numericalValueFormatted,
+							clientApplicationLocale);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+	}
+
+	/*
+	 * private LocalDate convertFrom(final String dateAsString, final String
+	 * parameterName, final String dateFormat) {
+	 * 
+	 * if (StringUtils.isBlank(dateFormat)) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'dateFormat' parameter to be passed with it.").toString();
+	 * ApiParameterError error = ApiParameterError.parameterError(
+	 * "validation.msg.missing.dateFormat.parameter", defaultMessage,
+	 * parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * LocalDate eventLocalDate = null; if
+	 * (StringUtils.isNotBlank(dateAsString)) { try { Locale locale =
+	 * LocaleContextHolder.getLocale(); eventLocalDate =
+	 * DateTimeFormat.forPattern(dateFormat) .withLocale(locale)
+	 * .parseLocalDate(dateAsString.toLowerCase(locale)); } catch
+	 * (IllegalArgumentException e) { List<ApiParameterError>
+	 * dataValidationErrors = new ArrayList<ApiParameterError>();
+	 * ApiParameterError error = ApiParameterError .parameterError(
+	 * "validation.msg.invalid.date.format", "The parameter " + parameterName +
+	 * " is invalid based on the dateFormat provided:" + dateFormat,
+	 * parameterName, dateAsString, dateFormat);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 * 
+	 * return eventLocalDate; }
+	 * 
+	 * private Integer convertToInteger(final String numericalValueFormatted,
+	 * final String parameterName, final Locale clientApplicationLocale) {
+	 * 
+	 * if (clientApplicationLocale == null) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'locale' parameter to be passed with it.").toString();
+	 * ApiParameterError error =
+	 * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
+	 * , defaultMessage, parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * try { Integer number = null;
+	 * 
+	 * if (StringUtils.isNotBlank(numericalValueFormatted)) {
+	 * 
+	 * String source = numericalValueFormatted.trim();
+	 * 
+	 * NumberFormat format = NumberFormat.getInstance(clientApplicationLocale);
+	 * DecimalFormat df = (DecimalFormat) format; DecimalFormatSymbols symbols =
+	 * df.getDecimalFormatSymbols(); df.setParseBigDecimal(true);
+	 * 
+	 * // http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator
+	 * = symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
+	 * source = source.replaceAll(" ", Character.toString('\u00a0')); }
+	 * 
+	 * Number parsedNumber = df.parse(source);
+	 * 
+	 * double parsedNumberDouble = parsedNumber.doubleValue(); int
+	 * parsedNumberInteger = parsedNumber.intValue();
+	 * 
+	 * if (source.contains(Character.toString(symbols.getDecimalSeparator()))) {
+	 * throw new ParseException(source, 0); }
+	 * 
+	 * if
+	 * (!Double.valueOf(parsedNumberDouble).equals(Double.valueOf(Integer.valueOf
+	 * (parsedNumberInteger)))) { throw new ParseException(source, 0); }
+	 * 
+	 * number = parsedNumber.intValue(); }
+	 * 
+	 * return number; } catch (ParseException e) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); ApiParameterError error =
+	 * ApiParameterError.parameterError(
+	 * "validation.msg.invalid.integer.format", "The parameter " + parameterName
+	 * + " has value: " + numericalValueFormatted +
+	 * " which is invalid integer value for provided locale of [" +
+	 * clientApplicationLocale.toString() + "].", parameterName,
+	 * numericalValueFormatted, clientApplicationLocale);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 * 
+	 * private BigDecimal convertFrom(final String numericalValueFormatted,
+	 * final String parameterName, final Locale clientApplicationLocale) {
+	 * 
+	 * if (clientApplicationLocale == null) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'locale' parameter to be passed with it.").toString();
+	 * ApiParameterError error =
+	 * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
+	 * , defaultMessage, parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * try { BigDecimal number = null;
+	 * 
+	 * if (StringUtils.isNotBlank(numericalValueFormatted)) {
+	 * 
+	 * String source = numericalValueFormatted.trim();
+	 * 
+	 * NumberFormat format =
+	 * NumberFormat.getNumberInstance(clientApplicationLocale); DecimalFormat df
+	 * = (DecimalFormat) format; DecimalFormatSymbols symbols =
+	 * df.getDecimalFormatSymbols(); //
+	 * http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator =
+	 * symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
+	 * source = source.replaceAll(" ", Character.toString('\u00a0')); }
+	 * 
+	 * NumberFormatter numberFormatter = new NumberFormatter(); Number
+	 * parsedNumber = numberFormatter.parse(source, clientApplicationLocale);
+	 * number = BigDecimal.valueOf(Double.valueOf(parsedNumber.doubleValue()));
+	 * }
+	 * 
+	 * return number; } catch (ParseException e) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); ApiParameterError error =
+	 * ApiParameterError.parameterError(
+	 * "validation.msg.invalid.decimal.format", "The parameter " + parameterName
+	 * + " has value: " + numericalValueFormatted +
+	 * " which is invalid decimal value for provided locale of [" +
+	 * clientApplicationLocale.toString() + "].", parameterName,
+	 * numericalValueFormatted, clientApplicationLocale);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 */
+	private Locale localeFromString(final String localeAsString) {
+
+		if (StringUtils.isBlank(localeAsString)) {
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.invalid.locale.format",
+					"The parameter locale is invalid. It cannot be blank.",
+					"locale");
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		String languageCode = "";
+		String courntryCode = "";
+		String variantCode = "";
+
+		String[] localeParts = localeAsString.split("_");
+
+		if (localeParts != null && localeParts.length == 1) {
+			languageCode = localeParts[0];
+		}
+
+		if (localeParts != null && localeParts.length == 2) {
+			languageCode = localeParts[0];
+			courntryCode = localeParts[1];
+		}
+
+		if (localeParts != null && localeParts.length == 3) {
+			languageCode = localeParts[0];
+			courntryCode = localeParts[1];
+			variantCode = localeParts[2];
+		}
+
+		return localeFrom(languageCode, courntryCode, variantCode);
+	}
+
+	private Locale localeFrom(final String languageCode,
+			final String courntryCode, final String variantCode) {
+
+		List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+
+		List<String> allowedLanguages = Arrays.asList(Locale.getISOLanguages());
+		if (!allowedLanguages.contains(languageCode.toLowerCase())) {
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.invalid.locale.format",
+					"The parameter locale has an invalid language value "
+							+ languageCode + " .", "locale", languageCode);
+			dataValidationErrors.add(error);
+		}
+
+		if (StringUtils.isNotBlank(courntryCode.toUpperCase())) {
+			List<String> allowedCountries = Arrays.asList(Locale
+					.getISOCountries());
+			if (!allowedCountries.contains(courntryCode)) {
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.invalid.locale.format",
+						"The parameter locale has an invalid country value "
+								+ courntryCode + " .", "locale", courntryCode);
+				dataValidationErrors.add(error);
+			}
+		}
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		return new Locale(languageCode.toLowerCase(),
+				courntryCode.toUpperCase(), variantCode);
+	}
+
+	@Override
+	public AdjustmentCommand convertJsonToAdjustmentCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"adjustment_date", "adjustment_code", "adjustment_type",
+				"amount_paid", "bill_id", "external_id", "Remarks", "locale",
+				"dateFormat"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		// Long client_id=extractLongParameter("client_id", requestMap,
+		// modifiedParameters);
+		LocalDate adjustment_date = extractLocalDateParameter(
+				"adjustment_date", requestMap, modifiedParameters);
+		String adjustment_code = extractStringParameter("adjustment_code",
+				requestMap, modifiedParameters);
+		String adjustment_type = extractStringParameter("adjustment_type",
+				requestMap, modifiedParameters);
+		BigDecimal amount_paid = extractBigDecimalParameter("amount_paid",
+				requestMap, modifiedParameters);
+		Long bill_id = extractLongParameter("bill_id", requestMap,
+				modifiedParameters);
+		Long external_id = extractLongParameter("external_id", requestMap,
+				modifiedParameters);
+		// boolean is_deleted=extractBooleanParameter("is_deleted", requestMap,
+		// modifiedParameters);
+		String Remarks = extractStringParameter("Remarks", requestMap,
+				modifiedParameters);
+		// Long createdby_id=extractLongParameter("createdby_id", requestMap,
+		// modifiedParameters);
+		// LocalDate created_date=extractLocalDateParameter("created_date",
+		// requestMap, modifiedParameters);
+		// LocalDate
+		// lastmodified_date=extractLocalDateParameter("lastmodified_date",
+		// requestMap, modifiedParameters);
+		// Long lastmodifiedby_id=extractLongParameter("lastmodifiedby_id",
+		// requestMap, modifiedParameters);
+
+		return new AdjustmentCommand(adjustment_date, adjustment_code,
+				adjustment_type, amount_paid, bill_id, external_id, Remarks);
+	}
+
+	@Override
+	public SubscriptionCommand convertJsonToSubscriptionCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+		
+		Set<String> modifiedParameters = new HashSet<String>();
+		Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+		Set<String> supportedParams = new HashSet<String>(
+				Arrays.asList("id","subscription_period","units","day_name","subscriptionTypeId")
+				);
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Long sub_id=extractLongParameter("id", requestMap, modifiedParameters);
+		//String subscription_type = extractStringParameter("subscription_type", requestMap,modifiedParameters);
+			String subscription_period=extractStringParameter("subscription_period",requestMap,modifiedParameters);
+			Long units=extractLongParameter("units",requestMap,modifiedParameters);
+			Long subscriptionTypeId=extractLongParameter("subscriptionTypeId",requestMap,modifiedParameters);
+			String day_name=extractStringParameter("day_name",requestMap,modifiedParameters);
+		 return new  SubscriptionCommand(modifiedParameters,sub_id,resourceIdentifier,subscription_period,units,day_name,subscriptionTypeId);
+	}
+
+	@Override
+	public PaytermsCommand convertJsonToPaytermsCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+   			throw new InvalidJsonException();
+   		}
+   		
+   		Set<String> modifiedParameters = new HashSet<String>();
+   		Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+   		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+   		Set<String> supportedParams = new HashSet<String>(
+   				Arrays.asList("id","payterm_period","payterm_type","units")
+   				);
+   		checkForUnsupportedParameters(requestMap, supportedParams);
+   		Long id=extractLongParameter("id", requestMap, modifiedParameters);
+   		String payterm_type = extractStringParameter("payterm_type", requestMap,modifiedParameters);
+   			Long payterm_period=extractLongParameter("payterm_period",requestMap,modifiedParameters);
+   			Long units=extractLongParameter("units",requestMap,modifiedParameters);
+   		 return new  PaytermsCommand(id,payterm_period,payterm_type,units);
+	}
+
+	@Override
+	public PaymodeCommand convertJsonToPaymodeCommand(Long resourceIdentifier,
+			String json) {
+		if (StringUtils.isBlank(json)) {
+  			throw new InvalidJsonException();
+  		}
+  		
+  		Set<String> modifiedParameters = new HashSet<String>();
+  		Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+  		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+  		Set<String> supportedParams = new HashSet<String>(
+  				Arrays.asList("id","paymode","description","category")
+  				);
+  		checkForUnsupportedParameters(requestMap, supportedParams);
+  		Long id=extractLongParameter("id", requestMap, modifiedParameters);
+  		String paymode = extractStringParameter("paymode", requestMap,modifiedParameters);
+     	String description=extractStringParameter("description",requestMap,modifiedParameters);
+     	String category = extractStringParameter("category", requestMap,modifiedParameters);
+  		 return new  PaymodeCommand(id,paymode,description,category);
+	}
+
+	@Override
+	public BillingCycleCommand convertJsonToBillingCycleCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+  			throw new InvalidJsonException();
+  		}
+  		
+  		Set<String> modifiedParameters = new HashSet<String>();
+  		Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
+  		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+  		Set<String> supportedParams = new HashSet<String>(
+  				Arrays.asList("billing_code","description","frequency","every")
+  				);
+  		checkForUnsupportedParameters(requestMap, supportedParams);
+		String billing_code=extractStringParameter("billing_code",requestMap,modifiedParameters);
+		String description=extractStringParameter("description",requestMap,modifiedParameters);
+		String frequency=extractStringParameter("frequency",requestMap,modifiedParameters);
+		//String every=extractStringParameter("every",requestMap,modifiedParameters);
+		
+
+		final JsonParser parser = new JsonParser();
+
+	    String[] services = null;
+	    JsonElement element = parser.parse(json);
+	    if (element.isJsonObject()) {
+	        JsonObject object = element.getAsJsonObject();
+	        if (object.has("every")) {
+	            modifiedParameters.add("every");
+	            JsonArray array = object.get("every").getAsJsonArray();
+	            services = new String[array.size()];
+	            for (int i = 0; i < array.size(); i++) {
+	            	services[i] = array.get(i).getAsString();
+	            }
+	        }
+	    }
+		
+		
+  		 return new  BillingCycleCommand(modifiedParameters,billing_code,description,frequency,services);
+	}
+
+	@Override
+	public PlansCommand convertJsonToPlansCommand(Long resourceIdentifier,
+			String json) {
+		if (StringUtils.isBlank(json)) {
+   			throw new InvalidJsonException();
+   		}
+   		
+   		final Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
+        final Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+   		Set<String> modifiedParameters = new HashSet<String>();
+   		Set<String> supportedParams = new HashSet<String>(
+   				Arrays.asList("plan_code","plan_description","locale","dateFormat","startDate","endDate","status","charge_code","roles","bill_rule","services")
+   				);
+   		checkForUnsupportedParameters(requestMap, supportedParams);
+   		//Long plan_id=extractLongParameter("id", requestMap, modifiedParameters);
+   		String plan_code = extractStringParameter("plan_code", requestMap,modifiedParameters);
+   		String plan_description=extractStringParameter("plan_description", requestMap, modifiedParameters);
+   	 LocalDate start_date = extractLocalDateParameter("startDate", requestMap, modifiedParameters);
+   	LocalDate end_date = extractLocalDateParameter("endDate", requestMap, modifiedParameters);
+   	Long status=extractLongParameter("status",requestMap,modifiedParameters);
+ 	String contractPeriod=extractStringParameter("contractPeriod",requestMap,modifiedParameters);
+  	Long bill_rule=extractLongParameter("bill_rule", requestMap, modifiedParameters);
+	
+	String charge_code=extractStringParameter("charge_code", requestMap, modifiedParameters);
+	
+	final JsonParser parser = new JsonParser();
+
+    String[] services = null;
+    JsonElement element = parser.parse(json);
+    if (element.isJsonObject()) {
+        JsonObject object = element.getAsJsonObject();
+        if (object.has("services")) {
+            modifiedParameters.add("services");
+            JsonArray array = object.get("services").getAsJsonArray();
+            services = new String[array.size()];
+            for (int i = 0; i < array.size(); i++) {
+            	services[i] = array.get(i).getAsString();
+            }
+        }
+    }
+    
+   		 return new  PlansCommand(modifiedParameters,plan_code,plan_description,start_date,end_date,status,services,bill_rule,charge_code,contractPeriod);
+	}
+
+	@Override
+	public Paymentcommand convertJsonToPaymentCommand(Long resourceIdentifier,
+			String json) {
+		  if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
+
+	        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+	        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+	        // preClosureInterestRate
+	        Set<String> supportedParams = new HashSet<String>(Arrays.asList("payment_id","clientId","payment_date","payment_code","amount_paid",
+	        		"statment_id","externalId","remarks", "locale", "dateFormat"));
+	        checkForUnsupportedParameters(requestMap, supportedParams);
+	        Set<String> modifiedParameters = new HashSet<String>();
+
+	        Long clientId = extractLongParameter("clientId", requestMap, modifiedParameters);
+	        Long payment_id = extractLongParameter("payment_id", requestMap, modifiedParameters);
+	        Long externalId = extractLongParameter("externalId", requestMap, modifiedParameters);
+	        Long statment_id = extractLongParameter("statment_id", requestMap, modifiedParameters);
+	        String payment_code = extractStringParameter("payment_code", requestMap, modifiedParameters);
+	        String remarks = extractStringParameter("remarks", requestMap, modifiedParameters);
+	        BigDecimal amount_paid = extractBigDecimalParameter("amount_paid", requestMap, modifiedParameters);
+	        LocalDate payment_date = extractLocalDateParameter("payment_date", requestMap, modifiedParameters);
+
+
+	        return new Paymentcommand(clientId, payment_id, externalId, statment_id, payment_code,
+	        		remarks, amount_paid, payment_date);
+	}
+
+	@Override
+	public PricingCommand convertJsonToPricingCommand(Long resourceIdentifier,
+			String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+		
+		Set<String> modifiedParameters = new HashSet<String>();
+		Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+		Set<String> supportedParams = new HashSet<String>(
+				Arrays.asList("id","plan_code","locale","service_code","charge_code","chargevariant","price","discount_id")
+				);
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Long sub_id=extractLongParameter("id", requestMap, modifiedParameters);
+		String plan_code = extractStringParameter("plan_code", requestMap,modifiedParameters);
+			String service_code=extractStringParameter("service_code",requestMap,modifiedParameters);
+			String charge_code=extractStringParameter("charge_code",requestMap,modifiedParameters);
+			String charging_variant=extractStringParameter("chargevariant",requestMap,modifiedParameters);
+	BigDecimal price=extractBigDecimalParameter("price",requestMap,modifiedParameters);
+	 Long discount_id=extractLongParameter("discount_id", requestMap, modifiedParameters);
+		 return new  PricingCommand(modifiedParameters,plan_code,service_code,charge_code,charging_variant,price,discount_id);
+	}
+
+	@Override
+	public OrdersCommand convertJsonToOrderCommand(Object resourceIdentifier,
+			Long clientId, String jsonRequestBody) {
+		 if (StringUtils.isBlank(jsonRequestBody)) {
+			 throw new InvalidJsonException();
+			 }
+
+			 Set<String> modifiedParameters = new HashSet<String>();
+			 Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+			 Map<String, String> requestMap = gsonConverter.fromJson(jsonRequestBody, typeOfMap);
+			 Set<String> supportedParams = new HashSet<String>(
+			 Arrays.asList("planCode","locale","dateFormat","start_date","paytermCode","contractPeriod","billAlign")
+			 );
+			 checkForUnsupportedParameters(requestMap, supportedParams);
+			 Long plan_id=extractLongParameter("planCode", requestMap, modifiedParameters);
+			  LocalDate start_date = extractLocalDateParameter("start_date", requestMap, modifiedParameters);
+			 String paytermtype=extractStringParameter("paytermCode",requestMap,modifiedParameters);
+			 Long contractPeriod=extractLongParameter("contractPeriod",requestMap,modifiedParameters);
+			 boolean billAlign=extractBooleanParameter("billAlign", requestMap, modifiedParameters);
+			     
+			     return new OrdersCommand(modifiedParameters,plan_id,plan_id,start_date,paytermtype,contractPeriod,clientId,billAlign);
+	}
+
+	@Override
+	public DiscountMasterCommand convertJsonToDiscountMasterCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+			}
+
+			Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+			Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+			Set<String> supportedParams = new HashSet<String>(Arrays.asList("discountCode","discountDescription","discounType","discountValue"));
+
+			checkForUnsupportedParameters(requestMap, supportedParams);
+
+			Set<String> modifiedParameters = new HashSet<String>();
+
+			Long discountCode = extractLongParameter("discountCode", requestMap, modifiedParameters);
+			String discountDescription = extractStringParameter("discountDescription", requestMap, modifiedParameters);
+			String discounType = extractStringParameter("discounType", requestMap, modifiedParameters);
+			Long discountValue=extractLongParameter("discountValue", requestMap, modifiedParameters);
+
+			return new DiscountMasterCommand(discountCode,discountDescription,discounType,discountValue,modifiedParameters);
+			
+	}
+
+	@Override
+	public TaxMasterCommand convertJsonToTaxMasterCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+			}
+
+			Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+			Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+			Set<String> supportedParams = new HashSet<String>(Arrays.asList("taxCode","taxType","taxDescription","locale"));
+
+			checkForUnsupportedParameters(requestMap, supportedParams);
+
+			Set<String> modifiedParameters = new HashSet<String>();
+
+			String taxCode = extractStringParameter("taxCode", requestMap, modifiedParameters);
+			String taxType = extractStringParameter("taxType", requestMap, modifiedParameters);
+			String taxDescription = extractStringParameter("taxDescription", requestMap, modifiedParameters);
+			return new TaxMasterCommand(taxCode,taxType,taxDescription);
+	}
+
+	@Override
+	public TaxMappingRateCommand convertJsonToTaxMappingRateCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+			}
+
+			Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+			Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+			Set<String> supportedParams = new HashSet<String>(Arrays.asList("chargeCode","taxCode","startdate","type","value","locale", "dateFormat"));
+
+			checkForUnsupportedParameters(requestMap, supportedParams);
+
+			Set<String> modifiedParameters = new HashSet<String>();
+
+			String chargeCode = extractStringParameter("chargeCode", requestMap, modifiedParameters);
+			String taxCode = extractStringParameter("taxCode", requestMap, modifiedParameters);
+			LocalDate startdate = extractLocalDateParameter("startdate", requestMap, modifiedParameters);
+			String type = extractStringParameter("type", requestMap, modifiedParameters);
+			BigDecimal value = extractBigDecimalParameter("value", requestMap, modifiedParameters);
+
+			return new TaxMappingRateCommand(chargeCode,taxCode,startdate,type,value);
+	}
+
+	@Override
+	public ChargeCodeCommand convertJsonToChargeCodeCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+			}
+
+			Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+			Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+			Set<String> supportedParams = new HashSet<String>(Arrays.asList("chargeCode","chargeDescription","chargeType","locale"));
+
+			checkForUnsupportedParameters(requestMap, supportedParams);
+
+			Set<String> modifiedParameters = new HashSet<String>();
+
+			String chargeCode = extractStringParameter("chargeCode", requestMap, modifiedParameters);
+			String chargeDescription = extractStringParameter("chargeDescription", requestMap, modifiedParameters);
+			String chargeType = extractStringParameter("chargeType", requestMap, modifiedParameters);
+			return new ChargeCodeCommand(chargeCode,chargeDescription,chargeType);
+	}
+
+	@Override
+	public ServiceMasterCommand convertJsonToServiceMasterCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+			}
+
+			Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+			Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+			Set<String> supportedParams = new HashSet<String>(Arrays.asList("serviceCode","serviceDescription","serviceType"));
+
+			checkForUnsupportedParameters(requestMap, supportedParams);
+
+			Set<String> modifiedParameters = new HashSet<String>();
+
+			String serviceCode = extractStringParameter("serviceCode", requestMap, modifiedParameters);
+			String serviceDescription = extractStringParameter("serviceDescription", requestMap, modifiedParameters);
+			Long serviceType = extractLongParameter("serviceType", requestMap, modifiedParameters);
+
+			return new ServiceMasterCommand(serviceCode,serviceDescription,serviceType,modifiedParameters);
+	}
+
+	@Override
+	public ServicesCommand convertJsonToServiceCommand(Long resourceIdentifier,
+			String json) {
+		 if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
+
+	        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+	        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+	        Set<String> supportedParams = new HashSet<String>(Arrays.asList("serviceCode", "serviceDescription", "serviceType"));
+
+	        checkForUnsupportedParameters(requestMap, supportedParams);
+
+	        Set<String> modifiedParameters = new HashSet<String>();
+	       
+	        String serviceCode = extractStringParameter("serviceCode", requestMap, modifiedParameters);
+	        String serviceDescription = extractStringParameter("serviceDescription", requestMap, modifiedParameters);
+	        Long serviceType = extractLongParameter("serviceType", requestMap, modifiedParameters);
+
+	        return new ServicesCommand(serviceCode, serviceDescription, serviceType);
+	}
+	
+	@Override
+public LocalDate convertJsonToBillingProductCommand(
+Long resourceIdentifier, String jsonRequestBody) {
+
+        
+if (StringUtils.isBlank(jsonRequestBody)) { throw new InvalidJsonException(); }
+
+Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+Map<String, String> requestMap = gsonConverter.fromJson(jsonRequestBody, typeOfMap);
+
+Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "systemDate","dateFormat"));
+
+checkForUnsupportedParameters(requestMap, supportedParams);
+
+Set<String> modifiedParameters = new HashSet<String>();
+
+        
+        checkForUnsupportedParameters(requestMap, supportedParams);
+       LocalDate date = extractLocalDateParameter("systemDate", requestMap, modifiedParameters);
+            
+        return date;
+}
+	
+	@Override
+	public BillMasterCommand convertJsonToBillMasterCommand(Long resourceIdentifier,
+			String json) {
+		 if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
+
+	        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+	        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+	        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "dueDate","dateFormat","message"));
+
+	        checkForUnsupportedParameters(requestMap, supportedParams);
+
+	        Set<String> modifiedParameters = new HashSet<String>();
+	        LocalDate dueDate = extractLocalDateParameter("dueDate", requestMap, modifiedParameters);
+	        String message = extractStringParameter("message", requestMap, modifiedParameters);
+
+	        return new BillMasterCommand(dueDate, message);
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiDataBillingConversionService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiDataBillingConversionService.java
new file mode 100644
index 0000000..3dc07f3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiDataBillingConversionService.java
@@ -0,0 +1,72 @@
+package org.mifosplatform.portfolio.billingproduct;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
+
+public interface PortfolioApiDataBillingConversionService {
+
+	SubscriptionCommand convertJsonToSubscriptionCommand(
+			Long resourceIdentifier, String json);
+
+	PaytermsCommand convertJsonToPaytermsCommand(Long resourceIdentifier,
+			String json);
+
+	PaymodeCommand convertJsonToPaymodeCommand(Long resourceIdentifier,
+			String json);
+
+	BillingCycleCommand convertJsonToBillingCycleCommand(
+			Long resourceIdentifier, String json);
+
+	PlansCommand convertJsonToPlansCommand(Long resourceIdentifier, String json);
+
+	Paymentcommand convertJsonToPaymentCommand(Long resourceIdentifier,
+			String json);
+
+	PricingCommand convertJsonToPricingCommand(Long resourceIdentifier,
+			String json);
+
+	OrdersCommand convertJsonToOrderCommand(Object resourceIdentifier,
+			Long clientId, String jsonRequestBody);
+
+	// Madhav
+	DiscountMasterCommand convertJsonToDiscountMasterCommand(
+			Long resourceIdentifier, String json);
+
+	TaxMasterCommand convertJsonToTaxMasterCommand(Long resourceIdentifier,
+			String json);
+
+	TaxMappingRateCommand convertJsonToTaxMappingRateCommand(
+			Long resourceIdentifier, String json);
+
+	ChargeCodeCommand convertJsonToChargeCodeCommand(Long resourceIdentifier,
+			String json);
+
+	AdjustmentCommand convertJsonToAdjustmentCommand(Long resourceIdentifier,
+			String json);
+
+	ServiceMasterCommand convertJsonToServiceMasterCommand(
+			Long resourceIdentifier, String json);
+
+	ServicesCommand convertJsonToServiceCommand(Long resourceIdentifier,
+			String json);
+
+	LocalDate convertJsonToBillingProductCommand(Long resourceIdentifier,String jsonRequestBody);
+
+	BillMasterCommand convertJsonToBillMasterCommand(Long resourceIdentifier,String json);
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiJsonBillingSerializerService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiJsonBillingSerializerService.java
new file mode 100644
index 0000000..741edb1
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billingproduct/PortfolioApiJsonBillingSerializerService.java
@@ -0,0 +1,79 @@
+package org.mifosplatform.portfolio.billingproduct;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.Set;
+
+import org.mifosplatform.portfolio.adjustment.data.AdjustmentCodeData;
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
+import org.mifosplatform.portfolio.discountmaster.commands.Discount;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.mifosplatform.portfolio.loanaccount.data.LoanBasicDetailsData;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.data.PricingData;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateOptionsData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterDataOptions;
+
+public interface PortfolioApiJsonBillingSerializerService {
+
+
+
+String serializeSubscriptionToJson(boolean prettyPrint,	Set<String> responseParameters,Collection<SubscriptionData> products);
+
+String serializeSubscriptionToJson(boolean prettyPrint,
+Set<String> responseParameters, SubscriptionData products);
+
+String serializePaytermsToJson(boolean prettyPrint,Set<String> responseParameters, SubscriptionData products);
+
+//String serializePaymodeToJson(boolean prettyPrint,Set<String> responseParameters,List<EnumOptionData> categorytypes);
+
+String serializePaymodeToJson(boolean prettyPrint,Set<String> responseParameters, PaymodeData data);
+
+String serializeBillingCycleToJson(boolean prettyPrint,	Set<String> responseParameters,	BillingCycleData products);
+
+String serializePlanDataToJson(boolean prettyPrint,	Set<String> responseParameters, PlanData planData);
+
+
+String serializePaymentToJson(boolean prettyPrint,Set<String> responseParameters, LoanBasicDetailsData loanAccount, PaymodeData data);
+
+
+
+String serializePlanDataToJson(boolean prettyPrint,Set<String> responseParameters, List<PlanData> products);
+
+String serializeOrderToJson(boolean prettyPrint,Set<String> responseParameters, OrderData datas);
+
+//Madhav
+public String serializeDiscountMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, DiscountMasterData discountMasterData);
+public String serializeDiscountMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<DiscountMasterData> discountMasterData);
+public String serializeDiscountMasterDataToJsonTemplete(boolean prettyPrint,Set<String> responseParameters,AdjustmentCodeData datas);
+public String serializeServiceMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<SericeMasterOptionsData> serviceMasterData);
+String serializeTaxMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<TaxMasterDataOptions> taxMasterData);
+public String serializeTaxMappingRateTemplateDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<TaxMappingRateOptionsData> taxMappingRateOptionsData);
+
+String serializeServiceToJson(boolean prettyPrint,Set<String> responseParameters, ServiceData products);
+
+
+String serializeClientOrderDataToJson(boolean prettyPrint,Set<String> responseParameters, List<OrderData> clientAccount);
+
+String serializeDiscountMasterDataToJsonTemplete(boolean prettyPrint,Set<String> responseParameters, Collection<Discount> datass);
+
+String serializeOrderToJson(boolean prettyPrint,
+Set<String> responseParameters, List<OrderData> data);
+
+String serializeTransactionalDataToJson(boolean prettyPrint,Set<String> responseParameters,	List<FinancialTransactionsData> transactionData);
+
+String serializePricingDataToJson(boolean prettyPrint,Set<String> responseParameters, PricingData clientAccount);
+
+
+String serializeServiceDataToJson(boolean prettyPrint,	Set<String> responseParameters, SericeMasterOptionsData productData);
+
+
+
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetail.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetail.java
new file mode 100644
index 0000000..314f32d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetail.java
@@ -0,0 +1,100 @@
+package org.mifosplatform.portfolio.billmaster.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "bill_details")
+public class BillDetail {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name = "bill_id")
+	private Long billId;
+
+	@Column(name ="transaction_id")
+	private  Long transactionId;
+
+	@Column(name="Transaction_date")
+	private Date transactionDate;
+
+	@Column(name = "Transaction_type")
+	private String transactionType;
+
+	@Column(name = "Amount")
+	private BigDecimal amount;
+
+	protected BillDetail() {
+
+	}
+
+	public BillDetail(final Long billId,final Long transactionId ,final Date transactionDate, final String transactionType,
+			final BigDecimal amount) {
+
+		this.billId = billId;
+		this.transactionId = transactionId;
+		this.transactionDate = transactionDate;
+		this.transactionType = transactionType;
+		this.amount = amount;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getBillId() {
+		return billId;
+	}
+
+	public void setBillId(Long billId) {
+		this.billId = billId;
+	}
+
+	public String getTransactionType() {
+		return transactionType;
+	}
+
+	public void setTransactionType(String transactionType) {
+		this.transactionType = transactionType;
+	}
+
+	public BigDecimal getAmount() {
+		return amount;
+	}
+
+	public void setAmount(BigDecimal amount) {
+		this.amount = amount;
+	}
+
+	public Date getTransactionDate() {
+		return transactionDate;
+	}
+
+	public void setTransactionDate(Date transactionDate) {
+		this.transactionDate = transactionDate;
+	}
+
+	public Long getTransactionId() {
+		return transactionId;
+	}
+
+	public void setTransactionId(Long transactionId) {
+		this.transactionId = transactionId;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetailRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetailRepository.java
new file mode 100644
index 0000000..4f474d9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillDetailRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billmaster.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface BillDetailRepository extends  JpaRepository<BillDetail, Long>,
+JpaSpecificationExecutor<BillDetail>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMaster.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMaster.java
new file mode 100644
index 0000000..11429c9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMaster.java
@@ -0,0 +1,228 @@
+package org.mifosplatform.portfolio.billmaster.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "bill_master")
+public class BillMaster {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name="bill_no")
+	private Long billNumber;
+
+	@Column(name="client_id")
+	private Long clientId;
+
+	@Column(name="bill_date")
+	private Date billDate;
+
+	@Column(name="bill_startdate")
+	private Date billStartDate;
+
+	@Column(name="bill_enddate")
+	private Date billEndDate;
+
+	@Column(name="due_date")
+	private Date dueDate;
+
+	@Column(name="previous_balance")
+	private BigDecimal previousBalance;
+
+	@Column(name="charges_amount")
+	private BigDecimal chargeAmount;
+
+	@Column(name="adjustment_amount")
+	private BigDecimal adjustmentAmount;
+
+	@Column(name="tax_amount")
+	private BigDecimal taxAmount;
+
+	@Column(name="paid_amount")
+	private BigDecimal paidAmount;
+
+	@Column(name="due_amount")
+	private BigDecimal dueAmount;
+
+	@Column(name ="filename")
+	private String fileName;
+
+	@Column(name="promotion_description")
+	private String promotionDescription;
+
+	@Column(name="bill_Period")
+	private String billPeriod;
+
+	@Column(name="adjustments_payments")
+	private BigDecimal adjustmentsAndPayments;
+
+	public BillMaster(){
+
+	}
+
+	public BillMaster(final Long billNumber,final Long clientId,final Date billDate,
+			final Date billStartDate,final Date billEndDate,final Date dueDate,
+			final BigDecimal previousBalance,final BigDecimal chargeAmount,
+			final BigDecimal adjustmentAmount,final BigDecimal taxAmount,
+			final BigDecimal paidAmount,final BigDecimal dueAmount,final String fileName,
+			final String promotionDescription) {
+
+		this.billNumber = billNumber;
+		this.clientId = clientId;
+		this.billDate = billDate;
+		this.billStartDate = billStartDate;
+		this.billEndDate = billEndDate;
+		this.dueDate = dueDate;
+		this.previousBalance = previousBalance;
+		this.chargeAmount = chargeAmount;
+		this.adjustmentAmount = adjustmentAmount;
+		this.taxAmount = taxAmount;
+		this.paidAmount = paidAmount;
+		this.dueAmount = dueAmount;
+		
+		this.promotionDescription = promotionDescription;
+		this.fileName="invoice";
+		this.billPeriod="monthly";
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getBillNumber() {
+		return billNumber;
+	}
+
+	public void setBillNumber(Long billNumber) {
+		this.billNumber = billNumber;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public void setClientId(Long clientId) {
+		this.clientId = clientId;
+	}
+
+	public Date getBillDate() {
+		return billDate;
+	}
+
+	public void setBillDate(Date billDate) {
+		this.billDate = billDate;
+	}
+
+	public Date getBillStartDate() {
+		return billStartDate;
+	}
+
+	public void setBillStartDate(Date billStartDate) {
+		this.billStartDate = billStartDate;
+	}
+
+	public Date getBillEndDate() {
+		return billEndDate;
+	}
+
+	public void setBillEndDate(Date billEndDate) {
+		this.billEndDate = billEndDate;
+	}
+
+	public Date getDueDate() {
+		return dueDate;
+	}
+
+	public void setDueDate(Date dueDate) {
+		this.dueDate = dueDate;
+	}
+
+	public BigDecimal getPreviousBalance() {
+		return previousBalance;
+	}
+
+	public void setPreviousBalance(BigDecimal previousBalance) {
+		this.previousBalance = previousBalance;
+	}
+
+	public BigDecimal getChargeAmount() {
+		return chargeAmount;
+	}
+
+	public void setChargeAmount(BigDecimal chargeAmount) {
+		this.chargeAmount = chargeAmount;
+	}
+
+	public BigDecimal getAdjustmentAmount() {
+		return adjustmentAmount;
+	}
+
+	public void setAdjustmentAmount(BigDecimal adjustmentAmount) {
+		this.adjustmentAmount = adjustmentAmount;
+	}
+
+	public BigDecimal getTaxAmount() {
+		return taxAmount;
+	}
+
+	public void setTaxAmount(BigDecimal taxAmount) {
+		this.taxAmount = taxAmount;
+	}
+
+	public BigDecimal getPaidAmount() {
+		return paidAmount;
+	}
+
+	public void setPaidAmount(BigDecimal paidAmount) {
+		this.paidAmount = paidAmount;
+	}
+
+	public BigDecimal getDueAmount() {
+		return dueAmount;
+	}
+
+	public void setDueAmount(BigDecimal dueAmount) {
+		this.dueAmount = dueAmount;
+	}
+
+	public String getFileName() {
+		return fileName;
+	}
+
+	public void setFileName(String fileName) {
+		this.fileName = fileName;
+	}
+
+	public String getPromotionDescription() {
+		return promotionDescription;
+	}
+
+	public void setPromotionDescription(String promotionDescription) {
+		this.promotionDescription = promotionDescription;
+	}
+
+	public BigDecimal getAdjustmentsAndPayments() {
+		return adjustmentsAndPayments;
+	}
+
+	public void setAdjustmentsAndPayments(BigDecimal adjustmentsAndPayments) {
+		this.adjustmentsAndPayments = adjustmentsAndPayments;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterCommandValidator.java
new file mode 100644
index 0000000..b0e21bf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterCommandValidator.java
@@ -0,0 +1,38 @@
+package org.mifosplatform.portfolio.billmaster.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+
+public class BillMasterCommandValidator {
+	
+
+		
+			private final BillMasterCommand command;
+
+			public BillMasterCommandValidator(final BillMasterCommand
+					
+					command) {
+				this.command=command;
+			}
+
+
+			public void validateForCreate() {
+		         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+				DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("billmaster");
+				baseDataValidator.reset().parameter("dueDate").value(command.getDueDate()).notBlank().notNull();
+
+				if (!dataValidationErrors.isEmpty()) {
+					throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+				}
+			}
+		}
+
+
+
+
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterRepository.java
new file mode 100644
index 0000000..cdde94d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/domain/BillMasterRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.billmaster.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface BillMasterRepository extends  JpaRepository<BillMaster, Long>,
+JpaSpecificationExecutor<BillMaster>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformService.java
new file mode 100644
index 0000000..cc1d1a9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformService.java
@@ -0,0 +1,19 @@
+package org.mifosplatform.portfolio.billmaster.service;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.billingorder.data.BillDetailsData;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+
+public interface BillMasterReadPlatformService {
+
+	List<FinancialTransactionsData> retrieveFinancialData(Long clientId);
+	List<FinancialTransactionsData> retrieveInvoiceFinancialData(Long clientId);
+	BillDetailsData retrievebillDetails(Long clientId);
+	List<FinancialTransactionsData> getFinancialTransactionData(Long id);
+	List<FinancialTransactionsData> retrieveStatments(Long clientId);
+	BigDecimal retrieveClientBalance(Long clientId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformServiceImplementation.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformServiceImplementation.java
new file mode 100644
index 0000000..0ed66f4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterReadPlatformServiceImplementation.java
@@ -0,0 +1,307 @@
+package org.mifosplatform.portfolio.billmaster.service;
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Date;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.billingorder.data.BillDetailsData;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+@Service
+public class BillMasterReadPlatformServiceImplementation implements
+		BillMasterReadPlatformService {
+
+	private final PlatformSecurityContext context;
+	private final JdbcTemplate jdbcTemplate;
+
+	@Autowired
+	public BillMasterReadPlatformServiceImplementation(
+			final PlatformSecurityContext context,
+			final TenantAwareRoutingDataSource dataSource) {
+
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+
+	}
+
+	@Override
+	public List<FinancialTransactionsData> retrieveFinancialData(Long clientId) {
+
+		FinancialTransactionsMapper financialTransactionsMapper = new FinancialTransactionsMapper();
+		String sql = "select " + financialTransactionsMapper.financialTransactionsSchema();
+		return this.jdbcTemplate.query(sql, financialTransactionsMapper,
+				new Object[] { clientId,clientId,clientId,clientId });
+
+	}
+
+	private static final class FinancialTransactionsMapper implements
+			RowMapper<FinancialTransactionsData> {
+
+		@Override
+		public FinancialTransactionsData mapRow(ResultSet rs, int rowNum)
+
+				throws SQLException {
+			Long transactionId = rs.getLong("transId");
+			Date transactionDate = rs.getDate("transDate");
+			String transactionType = rs.getString("transType");
+			BigDecimal amount = rs.getBigDecimal("amount");
+			LocalDate transDate=JdbcSupport.getLocalDate(rs,"transDate");
+
+			return new FinancialTransactionsData(transactionId,transDate,transactionType,amount);
+		}
+
+		public String financialTransactionsSchema() {
+
+			return  	 " a.id as transId,Date_format(invoice_date,'%Y-%m-%d') transDate,'CHARGES' AS transType, charge_amount AS amount"
+						+" from charge a,invoice b where a.invoice_id=b.id"
+						+" and a.bill_id IS NULL AND invoice_date <= NOW() AND b.client_id = ?"
+						+" union all"
+						+" Select  a.id as transId,Date_format(invoice_date,'%Y-%m-%d') transDate,'TAXES' AS transType, a.tax_amount AS amount"
+						+" from charge_tax a,invoice b where a.invoice_id=b.id"
+						+" and a.bill_id IS NULL AND invoice_date <= NOW() AND b.client_id = ?"
+						+" UNION ALL"
+						+" SELECT id as transId,Date_format(adjustment_date,'%Y-%m-%d') transDate,'ADJUSTMENT' AS transType,"
+						+" CASE adjustment_type"
+						+" WHEN 'DEBIT' THEN adjustment_amount"
+						+" WHEN 'CREDIT' THEN -adjustment_amount"
+						+" END"
+						+" AS amount"
+						+" FROM adjustment"
+						+" WHERE bill_id IS NULL AND adjustment_date <= NOW() AND client_id = ?"
+						+" UNION ALL"
+						+" SELECT id as transId,Date_format(payment_date,'%Y-%m-%d') transDate,'PAYMENT' AS transType,"
+						+" amount_paid AS invoiceAmount"
+						+" FROM payments"
+						+" WHERE bill_id IS NULL AND payment_date <= NOW() AND client_id = ?";
+
+//			return " 'INVOICE' AS billType, invocie_amount as invoiceAmount FROM invoice"
+//					+ " WHERE bill_id IS NULL AND invocie_date <= NOW() AND client_id = ?"
+//					+ " UNION ALL"
+//					+ " SELECT 'ADJUSTMENT' AS billType,"
+//					+ " CASE adjustment_type"
+//					+ " WHEN 'DEBIT' THEN adjustment_amount"
+//					+ " WHEN 'CREDIT' THEN -adjustment_amount"
+//					+ " END AS invoiceAmount"
+//					+ " FROM adjustment WHERE bill_id IS NULL AND adjustment_date <= NOW() AND client_id = ?"
+//					+ " UNION ALL"
+//					+ " SELECT 'PAYMENT' AS billType, amount_paid as invoiceAmount"
+//					+ " FROM payments WHERE bill_id IS NULL AND payment_date <= NOW() AND client_id = ?";
+
+
+		}
+	}
+
+	@Override
+	public List<FinancialTransactionsData> retrieveInvoiceFinancialData(
+			Long clientId) {
+		FinancialInvoiceTransactionsMapper financialTransactionsMapper = new FinancialInvoiceTransactionsMapper();
+		String sql = "select " + financialTransactionsMapper.financialTransactionsSchema();
+		return this.jdbcTemplate.query(sql, financialTransactionsMapper,
+				new Object[] { clientId,clientId,clientId });
+
+	}
+
+	private static final class FinancialInvoiceTransactionsMapper implements
+			RowMapper<FinancialTransactionsData> {
+
+		@Override
+		public FinancialTransactionsData mapRow(ResultSet rs, int rowNum)
+
+				throws SQLException {
+			Long transactionId = rs.getLong("transId");
+			Date transactionDate = rs.getDate("transDate");
+			String transactionType = rs.getString("transType");
+			BigDecimal amount = rs.getBigDecimal("amount");
+			LocalDate transDate=JdbcSupport.getLocalDate(rs,"transDate");
+
+			return new FinancialTransactionsData(transactionId,transDate,transactionType,amount);
+		}
+
+		public String financialTransactionsSchema() {
+
+			return  " id as transId,Date_format(invoice_date,'%Y-%m-%d') transDate,'INVOICE' AS transType, invoice_amount AS amount "
+					+"from invoice  where  invoice_date <= NOW() AND client_id = ? union all "
+					+"SELECT id as transId,Date_format(adjustment_date,'%Y-%m-%d') transdate,'ADJUSTMENT' AS transType,CASE adjustment_type "
+					 +" WHEN 'DEBIT' THEN adjustment_amount  WHEN 'CREDIT' THEN -adjustment_amount  END   AS amount  FROM adjustment " +
+					 " WHERE adjustment_date <= NOW() AND client_id = ? UNION ALL " +
+					 " SELECT id as transId,Date_format(payment_date,'%Y-%m-%d') transDate,'PAYMENT' AS transType,"
+					+" -amount_paid AS amount  FROM payments WHERE payment_date <= NOW() AND client_id = ? order by 2 ";
+
+
+		}
+	}
+
+	@Override
+	public BillDetailsData retrievebillDetails(Long clientId) {
+
+		BillMapper mapper = new BillMapper();
+	        String sql = "select " + mapper.billSchema() + " and b.id ="+clientId;
+
+	         return this.jdbcTemplate.queryForObject(sql, mapper, new Object[] {  });
+	    }
+
+	private static final class BillMapper implements RowMapper<BillDetailsData> {
+
+        public String billSchema() {
+            return " *from bill_master b, m_client mc left join student_address c on c.client_id = mc.id  WHERE b.client_id = mc.id ";
+        }
+
+
+
+        @Override
+        public BillDetailsData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum) throws SQLException {
+
+            Long id = rs.getLong("id");
+            Long clientId = rs.getLong("Client_id");
+            String addrNo = rs.getString("address_no");
+            String clientName = rs.getString("display_name");
+            String billPeriod = rs.getString("bill_Period");
+
+            String street = rs.getString("street");
+            String zip = rs.getString("zip");
+            String city = rs.getString("city");
+            String state = rs.getString("state");
+            String country = rs.getString("country_cv");
+
+            Double previousBal=rs.getDouble("Previous_balance");
+            Double chargeAmount=rs.getDouble("Charges_amount");
+            Double adjustmentAmount=rs.getDouble("Adjustment_amount");
+            Double taxAmount=rs.getDouble("Tax_amount");
+            Double paidAmount=rs.getDouble("Paid_amount");
+            Double adjustAndPayment=rs.getDouble("Due_amount");
+            String message=rs.getString("Promotion_description");
+
+
+            LocalDate billDate = JdbcSupport.getLocalDate(rs, "Bill_date");
+            LocalDate dueDate = JdbcSupport.getLocalDate(rs, "Due_date");
+
+            return new BillDetailsData(id,clientId,addrNo,clientName,billPeriod,street,zip,city,
+			state,country,previousBal,chargeAmount,adjustmentAmount,taxAmount,
+			paidAmount,adjustAndPayment,billDate,dueDate,message);
+			}
+
+
+	}
+	@Override
+
+	public List<FinancialTransactionsData> getFinancialTransactionData(Long id) {
+
+				TransactionDataMapper mapper = new TransactionDataMapper();
+		        String sql = "select " + mapper.billSchema() + " and b.id ="+id;
+
+		        return   this.jdbcTemplate.query(sql, mapper, new Object[] {  });
+
+
+		    }
+
+		private static final class TransactionDataMapper implements RowMapper<FinancialTransactionsData> {
+
+	        public String billSchema() {
+	            return "be.id,be.transaction_id as transaction_id,be.Transaction_type as Transaction_type, " +
+				"be.description as description,be.Amount as Amount,be.Transaction_date as Transaction_date" +
+				" from bill_master b,bill_details be where b.id = be.bill_id";
+	        }
+
+
+
+	        @Override
+	        public FinancialTransactionsData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum) throws SQLException {
+
+	            Long id = rs.getLong("id");
+	            Long transctionId = rs.getLong("transaction_id");
+	            String transactionType = rs.getString("Transaction_type");
+	            String description = rs.getString("description");
+	            BigDecimal amount = rs.getBigDecimal("Amount");
+
+
+
+
+	            LocalDate transactionDate = JdbcSupport.getLocalDate(rs, "Transaction_date");
+				return new FinancialTransactionsData(transctionId,transactionType,transactionDate,amount);
+
+
+				}
+			}
+
+		@Override
+		public List<FinancialTransactionsData> retrieveStatments(Long clientId) {
+			
+			
+			BillStatmentMapper mapper = new BillStatmentMapper();
+			String sql = "select " + mapper.billStatemnetSchema();
+			return this.jdbcTemplate.query(sql, mapper,
+					new Object[] { clientId });
+
+		}
+
+		private static final class BillStatmentMapper implements
+				RowMapper<FinancialTransactionsData> {
+
+			@Override
+			public FinancialTransactionsData mapRow(ResultSet rs, int rowNum)
+
+					throws SQLException {
+				Long id = rs.getLong("id");
+			
+				BigDecimal amount = rs.getBigDecimal("dueAmount");
+				LocalDate billDate=JdbcSupport.getLocalDate(rs,"billDate");
+				LocalDate dueDate=JdbcSupport.getLocalDate(rs,"dueDate");
+
+				return new FinancialTransactionsData(id,billDate,dueDate,amount);
+			}
+
+			public String billStatemnetSchema() {
+
+				return  "b.id as id,b.bill_date as billDate,b.due_date as dueDate,b.Due_amount as dueAmount from bill_master b where b.Client_id=? ";
+
+
+			}
+		}
+
+		@Override
+		public BigDecimal retrieveClientBalance(Long clientId) {
+			
+			ClientBalanceMapper mapper = new ClientBalanceMapper();
+			String sql = "select " + mapper.billStatemnetSchema();
+			
+			BigDecimal previousBalance =  this.jdbcTemplate.queryForObject(sql, mapper,new Object[] { clientId });
+			if( previousBalance == null ){
+				previousBalance = BigDecimal.ZERO;
+			}
+			return previousBalance;	
+		}
+
+		private static final class ClientBalanceMapper implements
+				RowMapper<BigDecimal> {
+
+			@Override
+			public BigDecimal mapRow(ResultSet rs, int rowNum)
+
+					throws SQLException {
+			
+					
+				BigDecimal amount = rs.getBigDecimal("dueAmount");
+			
+
+				return amount;
+			}
+
+			public String billStatemnetSchema() {
+
+				String result =   " IFNULL(b.Due_amount,0) as dueAmount  from bill_master b  where b.Client_id=? and id=(Select max(id) from bill_master a where a.client_id=b.client_id)";
+
+				return result;
+			}
+}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformService.java
new file mode 100644
index 0000000..fda90d2
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformService.java
@@ -0,0 +1,23 @@
+package org.mifosplatform.portfolio.billmaster.service;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillDetailsData;
+import org.mifosplatform.portfolio.billmaster.domain.BillDetail;
+import org.mifosplatform.portfolio.billmaster.domain.BillMaster;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+
+public interface BillMasterWritePlatformService {
+
+	BillMaster createBillMaster(List<FinancialTransactionsData> financialTransactionsDatas,BillMasterCommand command, Long clientId);
+	List<BillDetail> createBillDetail(List<FinancialTransactionsData> financialTransactionsDatas,BillMaster master);
+	CommandProcessingResult updateBillMaster(List<BillDetail> billDetails,BillMaster billMaster, BigDecimal previousBal);
+	String generatePdf(BillDetailsData billDetails,List<FinancialTransactionsData> data);
+	void updateBillId(List<FinancialTransactionsData> financialTransactionsDatas, Long billId);
+    
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformServiceImplementation.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformServiceImplementation.java
new file mode 100644
index 0000000..a765a08
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/billmaster/service/BillMasterWritePlatformServiceImplementation.java
@@ -0,0 +1,569 @@
+package org.mifosplatform.portfolio.billmaster.service;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.service.FileUtils;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.Adjustment;
+import org.mifosplatform.portfolio.adjustment.domain.AdjustmentRepository;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalanceRepository;
+import org.mifosplatform.portfolio.billingmaster.command.BillMasterCommand;
+import org.mifosplatform.portfolio.billingorder.data.BillDetailsData;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrder;
+import org.mifosplatform.portfolio.billingorder.domain.BillingOrderRepository;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTax;
+import org.mifosplatform.portfolio.billingorder.domain.InvoiceTaxRepository;
+import org.mifosplatform.portfolio.billingorder.exceptions.BillingOrderNoRecordsFoundException;
+import org.mifosplatform.portfolio.billmaster.domain.BillDetail;
+import org.mifosplatform.portfolio.billmaster.domain.BillDetailRepository;
+import org.mifosplatform.portfolio.billmaster.domain.BillMaster;
+import org.mifosplatform.portfolio.billmaster.domain.BillMasterCommandValidator;
+import org.mifosplatform.portfolio.billmaster.domain.BillMasterRepository;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.mifosplatform.portfolio.payment.domain.Payment;
+import org.mifosplatform.portfolio.payment.domain.PaymentRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.lowagie.text.Document;
+import com.lowagie.text.Element;
+import com.lowagie.text.Font;
+import com.lowagie.text.FontFactory;
+import com.lowagie.text.Image;
+import com.lowagie.text.Paragraph;
+import com.lowagie.text.pdf.CMYKColor;
+import com.lowagie.text.pdf.PdfContentByte;
+import com.lowagie.text.pdf.PdfPCell;
+import com.lowagie.text.pdf.PdfPTable;
+import com.lowagie.text.pdf.PdfWriter;
+
+@Service
+public class BillMasterWritePlatformServiceImplementation implements
+		BillMasterWritePlatformService {
+
+	private final PlatformSecurityContext context;
+	private final BillMasterRepository billMasterRepository;
+	private final BillDetailRepository billDetailRepository;
+	private final PaymentRepository paymentRepository;
+	private final AdjustmentRepository adjustmentRepository;
+	private final BillingOrderRepository billingOrderRepository;
+	private final InvoiceTaxRepository invoiceTaxRepository;
+	private final ClientBalanceRepository clientBalanceRepository;
+
+	@Autowired
+	public BillMasterWritePlatformServiceImplementation(
+			final PlatformSecurityContext context,
+			final BillMasterRepository billMasterRepository,
+			final BillDetailRepository billDetailRepository,
+			final PaymentRepository paymentRepository,
+		    final AdjustmentRepository adjustmentRepository,
+			final BillingOrderRepository billingOrderRepository,
+			final InvoiceTaxRepository invoiceTaxRepository,
+			final ClientBalanceRepository clientBalanceRepository) {
+
+		this.context = context;
+		this.billMasterRepository = billMasterRepository;
+		this.billDetailRepository = billDetailRepository;
+		this.adjustmentRepository=adjustmentRepository;
+		this.billingOrderRepository=billingOrderRepository;
+		this.invoiceTaxRepository=invoiceTaxRepository;
+		this.paymentRepository=paymentRepository;
+		this.clientBalanceRepository=clientBalanceRepository;
+	}
+
+	@Transactional
+	@Override
+	public BillMaster createBillMaster(
+			List<FinancialTransactionsData> financialTransactionsDatas,
+			BillMasterCommand command,Long clientId) {
+		
+		this.context.authenticatedUser();
+		BillMasterCommandValidator validator=new BillMasterCommandValidator(command);
+		validator.validateForCreate();
+		
+		if(financialTransactionsDatas.size()==0)
+		{
+			String msg="no Bills to Generate";
+			throw new BillingOrderNoRecordsFoundException(msg);
+		}
+		
+	
+		
+		
+		LocalDate billDate = new LocalDate();
+		BigDecimal previousBalance = BigDecimal.ZERO;
+		BigDecimal chargeAmount = BigDecimal.ZERO;
+		BigDecimal adjustmentAmount = BigDecimal.ZERO;
+		BigDecimal taxAmount = BigDecimal.ZERO;
+		BigDecimal paidAmount = BigDecimal.ZERO;
+		BigDecimal dueAmount = BigDecimal.ZERO;
+
+		
+		
+		
+
+		BillMaster billMaster = new BillMaster(clientId,clientId,
+				billDate.toDate(), null, null, command.getDueDate().toDate(), previousBalance,
+				chargeAmount, adjustmentAmount, taxAmount, paidAmount,
+				dueAmount, null, command.getMessage());
+
+		billMaster = this.billMasterRepository.save(billMaster);
+
+		return billMaster;
+	}
+
+	@Override
+	public List<BillDetail> createBillDetail(
+			List<FinancialTransactionsData> financialTransactionsDatas,
+			BillMaster master) {
+		List<BillDetail> listOfBillingDetail = new ArrayList<BillDetail>();
+
+		for (FinancialTransactionsData financialTransactionsData : financialTransactionsDatas) {
+
+			BillDetail billDetail = new BillDetail(master.getId(),
+					financialTransactionsData.getTransactionId(),
+					financialTransactionsData.getTransactionDate(),
+					financialTransactionsData.getTransactionType(),
+					financialTransactionsData.getAmount());
+
+			this.billDetailRepository.save(billDetail);
+			listOfBillingDetail.add(billDetail);
+		}
+		return listOfBillingDetail;
+	}
+
+	@Override
+	public CommandProcessingResult updateBillMaster(List<BillDetail> billDetails,
+			BillMaster billMaster,BigDecimal clientBalance) {
+		BigDecimal chargeAmount = BigDecimal.ZERO;
+		BigDecimal adjustmentAmount = BigDecimal.ZERO;
+		BigDecimal paymentAmount = BigDecimal.ZERO;
+		BigDecimal dueAmount = BigDecimal.ZERO;
+		BigDecimal taxAmount = BigDecimal.ZERO;
+		BigDecimal adjustMentsAndPayments = BigDecimal.ZERO;
+
+		for (BillDetail billDetail : billDetails) {
+
+			if (billDetail.getTransactionType().equalsIgnoreCase("CHARGES")) {
+
+				if (billDetail.getAmount() != null)
+					chargeAmount = chargeAmount.add(billDetail.getAmount());
+
+			} else if (billDetail.getTransactionType()
+					.equalsIgnoreCase("TAXES")) {
+
+				if (billDetail.getAmount() != null)
+					taxAmount = taxAmount.add(billDetail.getAmount());
+
+			} else if (billDetail.getTransactionType().equalsIgnoreCase(
+					"ADJUSTMENT")) {
+				if (billDetail.getAmount() != null)
+					adjustmentAmount = adjustmentAmount.add(billDetail
+							.getAmount());
+
+			} else if (billDetail.getTransactionType().equalsIgnoreCase(
+					"PAYMENT")) {
+				if (billDetail.getAmount() != null)
+					paymentAmount = paymentAmount.add(billDetail.getAmount());
+
+			}
+			dueAmount = chargeAmount.add(taxAmount).add(adjustmentAmount)
+					.subtract(paymentAmount);
+			billMaster.setChargeAmount(chargeAmount);
+			billMaster.setAdjustmentAmount(adjustmentAmount);
+			billMaster.setTaxAmount(taxAmount);
+			billMaster.setPaidAmount(paymentAmount);
+			billMaster.setDueAmount(dueAmount);
+			billMaster.setAdjustmentsAndPayments(paymentAmount.add(adjustmentAmount));
+            billMaster.setPreviousBalance(clientBalance);
+
+			this.billMasterRepository.save(billMaster);
+		
+			
+			
+		}
+		return new CommandProcessingResult(billMaster.getId());
+	}
+
+	@SuppressWarnings("null")
+	@Override
+	public String generatePdf(BillDetailsData billDetails,
+			List<FinancialTransactionsData> datas) {
+		
+		String fileLocation = FileUtils.MIFOSX_BASE_DIR + File.separator+ "Print_invoice_Details";
+	//	String fileLocation = FileUtils.MIFOSX_BASE_DIR;
+		
+	//	String fileLocation = "/home/ubuntu" + File.separator+ "Print_invoice_Details";
+
+		/** Recursively create the directory if it does not exist **/
+		if (!new File(fileLocation).isDirectory()) {
+			new File(fileLocation).mkdirs();
+		}
+		String printInvoicedetailsLocation = fileLocation + File.separator + "invoice"+billDetails.getId()+".pdf";
+		
+		BillMaster billMaster=this.billMasterRepository.findOne(billDetails.getId());
+		billMaster.setFileName(printInvoicedetailsLocation);
+		this.billMasterRepository.save(billMaster);
+
+		try {
+			
+			
+
+			Document document = new Document();
+
+			PdfWriter writer = PdfWriter.getInstance(document,
+					new FileOutputStream(printInvoicedetailsLocation));
+			document.open();
+			PdfContentByte pdfContentByte = writer.getDirectContent();
+			Font b = new Font(Font.BOLD + Font.BOLD, 8);
+			Font b1 = new Font(Font.BOLD + Font.UNDERLINE + Font.BOLDITALIC
+					+ Font.TIMES_ROMAN, 8);
+
+			pdfContentByte.beginText();
+
+			PdfPTable table = new PdfPTable(11);
+			table.setWidthPercentage(100);
+
+			PdfPCell cell1 = new PdfPCell((new Paragraph("Bill Invoice",
+					FontFactory.getFont(FontFactory.HELVETICA, 12, Font.BOLD))));
+			cell1.setColspan(11);
+			cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
+			cell1.setPadding(10.0f);
+			table.addCell(cell1);
+			PdfPCell cell = new PdfPCell();
+			cell.setColspan(2);
+			Paragraph para = new Paragraph("Name           :", b1);
+			Paragraph addr = new Paragraph("Address        :", b);
+			Paragraph branch = new Paragraph("Branch       :", b);
+			branch.setSpacingBefore(12);
+
+			cell.addElement(para);
+			cell.addElement(addr);
+			cell.addElement(branch);
+			cell.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell);
+			PdfPCell cell0 = new PdfPCell();
+			Paragraph add0 = new Paragraph(""+billDetails.getClientName(),b);
+			Paragraph add1 = new Paragraph(""
+											  +billDetails.getAddrNo()+","+
+											  billDetails.getStreet(), b
+											 );
+			add1.setSpacingBefore(10);
+			Paragraph add2 = new Paragraph(""+billDetails.getCity()+","
+					                           +billDetails.getState()+","
+					                           +billDetails.getCountry()+","
+					                           +billDetails.getZip(),b);
+			cell0.setColspan(4);
+			cell0.disableBorderSide(PdfPCell.LEFT);
+			cell0.addElement(add0);
+			cell0.addElement(add1);
+			cell0.addElement(add2);
+			table.addCell(cell0);
+
+//			Image image = Image.getInstance("logo.jpg");
+	//image.scaleAbsolute(60, 60);
+			PdfPCell cell2 = new PdfPCell();
+//		cell2.addElement(image);
+		cell2.disableBorderSide(PdfPCell.TOP);
+			cell2.disableBorderSide(PdfPCell.BOTTOM);
+			cell2.disableBorderSide(PdfPCell.LEFT);
+			cell2.disableBorderSide(PdfPCell.RIGHT);
+			cell2.setColspan(2);
+			table.addCell(cell2);
+			PdfPCell cell02 = new PdfPCell();
+			Paragraph addr1 = new Paragraph("Hugo Technologies LLP",
+					FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD,
+							new CMYKColor(0, 255, 255, 17)));
+			Paragraph addr2 = new Paragraph("# 501, Sai Balaji Cubicles,", b);
+			Paragraph addr3 = new Paragraph("Raghavendra Society, Kondapur,", b);
+			Paragraph addr4 = new Paragraph(" Hyderabad - 500 084, AP, India.",
+					b);
+			Paragraph addr5 = new Paragraph(" Tel:	+91-40-65141823", b);
+			Paragraph addr6 = new Paragraph("www.hugotechnologies.com", b);
+			cell02.addElement(addr1);
+			cell02.addElement(addr2);
+			cell02.addElement(addr3);
+			cell02.addElement(addr4);
+			cell02.addElement(addr5);
+			cell02.addElement(addr6);
+
+			cell02.disableBorderSide(PdfPCell.TOP);
+			cell02.disableBorderSide(PdfPCell.BOTTOM);
+			cell02.disableBorderSide(PdfPCell.LEFT);
+			cell2.disableBorderSide(PdfPCell.RIGHT);
+			cell02.setColspan(3);
+			table.addCell(cell02);
+			PdfPCell cell3 = new PdfPCell();
+			// cell3.setPadding (1.0f);
+			Paragraph BillId = new Paragraph("Client Id:   "
+					+ billDetails.getClientId(), b);
+			cell3.setColspan(6);
+			cell3.addElement(BillId);
+			cell3.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell3);
+			PdfPCell cell12 = new PdfPCell();
+			Paragraph billNo = new Paragraph("BillNo:" + billDetails.getId(), b);
+			// billNo.setIndentationLeft(280);
+			Paragraph billDate = new Paragraph("Bill Date:"
+					+ billDetails.getBillDate(), b);
+			// billDate.setIndentationLeft(280);
+			Paragraph BillPeriod = new Paragraph("Bill Period:"
+					+ billDetails.getBillPeriod(), b);
+			// BillPeriod.setIndentationLeft(280);
+			Paragraph dueDate = new Paragraph("Due Date:"
+					+ billDetails.getDueDate(), b);
+			// dueDate.setIndentationLeft(280);
+
+			// cell12.disableBorderSide(PdfPCell.TOP);
+			// cell12.disableBorderSide(PdfPCell.BOTTOM);
+			cell12.disableBorderSide(PdfPCell.LEFT);
+			// cell12.disableBorderSide(PdfPCell.RIGHT);
+			cell12.addElement(billNo);
+			cell12.addElement(billDate);
+			cell12.addElement(BillPeriod);
+			cell12.setColspan(5);
+			cell12.addElement(dueDate);
+			table.addCell(cell12);
+			PdfPCell cell4 = new PdfPCell();
+
+			Paragraph previousbal = new Paragraph("Previous Balance", b);
+			Paragraph previousamount = new Paragraph(""
+					+ billDetails.getPreviousBal(), b);
+			cell4.setColspan(2);
+			cell4.addElement(previousbal);
+			cell4.addElement(previousamount);
+			cell4.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			// cell4.disableBorderSide(PdfPCell.LEFT);
+			// cell4.disableBorderSide(PdfPCell.RIGHT);
+
+			table.addCell(cell4);
+			pdfContentByte.setTextMatrix(390, 405);
+
+			PdfPCell cell5 = new PdfPCell();
+			Paragraph adjstment = new Paragraph("Adjustment Amount", b);
+			Paragraph adjstmentamount = new Paragraph(""
+					+ billDetails.getAdjustmentAmount(), b);
+			cell5.setColspan(2);
+			cell5.addElement(adjstment);
+			cell5.addElement(adjstmentamount);
+			cell5.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell5.disableBorderSide(PdfPCell.LEFT);
+			// cell5.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell5);
+
+			PdfPCell cell6 = new PdfPCell();
+			Paragraph paid_amount = new Paragraph("Payments", b);
+			Paragraph amount = new Paragraph("" + billDetails.getPaidAmount(),
+					b);
+			cell6.setColspan(2);
+			cell6.addElement(paid_amount);
+			cell6.addElement(amount);
+			cell6.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell6.disableBorderSide(PdfPCell.LEFT);
+			// cell6.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell6);
+
+			PdfPCell cell7 = new PdfPCell();
+			Paragraph charge_amount = new Paragraph("Charge Amount", b);
+			Paragraph chargeamount = new Paragraph(""
+					+ billDetails.getChargeAmount(), b);
+			cell7.setColspan(2);
+			cell7.addElement(charge_amount);
+			cell7.addElement(chargeamount);
+
+			cell7.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell7.disableBorderSide(PdfPCell.LEFT);
+			// cell7.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell7);
+
+			PdfPCell cell8 = new PdfPCell();
+			Paragraph due_amount = new Paragraph("Due Amount", b);
+			Paragraph dueamount = new Paragraph(
+					"" + billDetails.getDueAmount(), b);
+			cell8.setColspan(3);
+			cell8.addElement(due_amount);
+			cell8.addElement(dueamount);
+
+			cell8.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell8.disableBorderSide(PdfPCell.LEFT);
+			// cell8.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell8);
+
+			PdfPCell cell9 = new PdfPCell();
+			cell9.setColspan(6);
+			Paragraph billDetail = new Paragraph("Current Bill Details", b);
+			cell9.setPadding(10.0f);
+			cell9.setPaddingLeft(100.0f);
+			cell9.addElement(billDetail);
+			cell9.disableBorderSide(PdfPCell.TOP);
+			cell9.disableBorderSide(PdfPCell.BOTTOM);
+			cell9.disableBorderSide(PdfPCell.LEFT);
+			cell9.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell9);
+
+			PdfPCell cell10 = new PdfPCell();
+			cell10.setColspan(5);
+			Paragraph message = new Paragraph("Promotional Message", b);
+			cell10.setPadding(10.0f);
+			cell10.setPaddingLeft(100.0f);
+			cell10.addElement(message);
+			cell10.disableBorderSide(PdfPCell.TOP);
+			cell10.disableBorderSide(PdfPCell.BOTTOM);
+			cell10.disableBorderSide(PdfPCell.LEFT);
+			cell10.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell10);
+
+			
+			
+
+
+			PdfPCell cell26 = new PdfPCell();
+			cell26.setColspan(1);
+			Paragraph charge = new Paragraph("Id", b);
+
+			cell26.addElement(charge);
+
+			// cell10.disableBorderSide(PdfPCell.TOP);
+			// cell10.disableBorderSide(PdfPCell.BOTTOM);
+			//cell26.disableBorderSide(PdfPCell.LEFT);
+			cell26.disableBorderSide(PdfPCell.RIGHT);
+
+
+
+
+
+			PdfPCell cell28 = new PdfPCell();
+			cell28.setColspan(1);
+			Paragraph Amount = new Paragraph("Amount", b);
+
+			cell28.addElement(Amount);
+			// cell10.disableBorderSide(PdfPCell.TOP);
+			// cell10.disableBorderSide(PdfPCell.BOTTOM);
+			cell28.disableBorderSide(PdfPCell.LEFT);
+			cell28.disableBorderSide(PdfPCell.RIGHT);
+
+
+			PdfPCell cell27 = new PdfPCell();
+			cell27.setColspan(1);
+			Paragraph Date = new Paragraph("Date", b);
+
+			cell27.addElement(Date);
+			 //cell10.disableBorderSide(PdfPCell.TOP);
+			// cell10.disableBorderSide(PdfPCell.BOTTOM);
+			cell27.disableBorderSide(PdfPCell.LEFT);
+			cell27.disableBorderSide(PdfPCell.RIGHT);
+
+			PdfPCell cell23 = new PdfPCell();
+			cell23.setColspan(2);
+			Paragraph ID = new Paragraph("Transaction", b);
+
+			cell23.addElement(ID);
+			// cell10.disableBorderSide(PdfPCell.TOP);
+			// cell10.disableBorderSide(PdfPCell.BOTTOM);
+			cell23.disableBorderSide(PdfPCell.LEFT);
+			cell23.disableBorderSide(PdfPCell.RIGHT);
+
+			
+			
+		
+
+			for (FinancialTransactionsData data : datas){
+				Paragraph id = new Paragraph("" + data.getTransactionId(), b);
+
+				cell26.addElement(id);
+
+
+				Paragraph transactionType = new Paragraph(""
+						+ data.getTransactionType(), b);
+				cell23.addElement(transactionType);
+				Paragraph date = new Paragraph(""
+						+ data.getTransDate(), b);
+				cell27.addElement(date);
+				Paragraph tranAmount = new Paragraph("" + data.getAmount(),b);
+
+				cell28.addElement(tranAmount);
+
+			}
+
+
+			table.addCell(cell26);
+			table.addCell(cell23);
+			table.addCell(cell27);
+			table.addCell(cell28);
+			PdfPCell cell24 = new PdfPCell();
+			cell24.setColspan(1);
+			cell24.disableBorderSide(PdfPCell.TOP);
+			cell24.disableBorderSide(PdfPCell.BOTTOM);
+			table.addCell(cell24);
+			PdfPCell cell25 = new PdfPCell();
+			Paragraph proMessage=new Paragraph(""+billDetails.getMessage(),b);
+			cell25.addElement(proMessage);
+			cell25.setColspan(5);
+			cell25.setPadding(70f);
+			table.addCell(cell25);
+
+			pdfContentByte.endText();
+			document.add(table);
+			document.close();
+
+			//This option is to open the PDF on Server. Instead we have given Financial Statement Download Option
+			/*Runtime.getRuntime().exec(
+					"rundll32 url.dll,FileProtocolHandler "+printInvoicedetailsLocation);*/
+
+		
+			
+		} catch (Exception e) {
+		}
+		return printInvoicedetailsLocation;
+
+	}
+
+	@Override
+	public void updateBillId(
+			List<FinancialTransactionsData> financialTransactionsDatas,Long billId) {
+		
+		for(FinancialTransactionsData transIds:financialTransactionsDatas)
+		{
+           if(transIds.getTransactionType().equalsIgnoreCase("ADJUSTMENT"))	
+           {
+		Adjustment adjustment=this.adjustmentRepository.findOne(transIds.getTransactionId());
+		adjustment.updateBillId(billId);
+		this.adjustmentRepository.save(adjustment);
+		}
+           if(transIds.getTransactionType().equalsIgnoreCase("TAXES"))	
+           {
+		InvoiceTax invoice=this.invoiceTaxRepository.findOne(transIds.getTransactionId());
+		invoice.updateBillId(billId);
+		this.invoiceTaxRepository.save(invoice);
+		}
+           if(transIds.getTransactionType().equalsIgnoreCase("PAYMENT"))	
+           {
+		Payment payment=this.paymentRepository.findOne(transIds.getTransactionId());
+		payment.updateBillId(billId);
+		this.paymentRepository.save(payment);
+		}
+           if(transIds.getTransactionType().equalsIgnoreCase("CHARGES"))	
+           {
+		BillingOrder billingOrder=this.billingOrderRepository.findOne(transIds.getTransactionId());
+		billingOrder.updateBillId(billId);
+		this.billingOrderRepository.save(billingOrder);
+		}
+           
+		}
+		
+		
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/api/ChargeCodeApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/api/ChargeCodeApiResource.java
new file mode 100644
index 0000000..64d374b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/api/ChargeCodeApiResource.java
@@ -0,0 +1,37 @@
+package org.mifosplatform.portfolio.charge.api;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
+import org.mifosplatform.portfolio.chargecode.service.ChargeCodeWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/chargecodes")
+@Component
+@Scope("singleton")
+public class ChargeCodeApiResource {
+	@Autowired
+	private ChargeCodeWritePlatformService chargeCodeWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createDiscountMaster(final String jsonRequestBody) {
+		final ChargeCodeCommand command = this.apiDataConversionService.convertJsonToChargeCodeCommand(null, jsonRequestBody);
+		Long id=chargeCodeWritePlatformService.createChargeCode(command);
+		return Response.ok().entity(id).build();
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCodeCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCodeCommand.java
new file mode 100644
index 0000000..c3ea38d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCodeCommand.java
@@ -0,0 +1,48 @@
+package org.mifosplatform.portfolio.charge.commands;
+
+public class ChargeCodeCommand {
+private Long id;
+public Long getId() {
+	return id;
+}
+
+public void setId(Long id) {
+	this.id = id;
+}
+
+private String chargeCode;
+private String chargeDescription;
+private String chargeType;
+
+public ChargeCodeCommand(String chargeCode,String chargeDescription,String chargeType)
+{
+	this.chargeCode=chargeCode;
+	this.chargeDescription=chargeDescription;
+	this.chargeType=chargeType;
+}
+
+public String getChargeCode() {
+	return chargeCode;
+}
+
+public void setChargeCode(String chargeCode) {
+	this.chargeCode = chargeCode;
+}
+
+public String getChargeDescription() {
+	return chargeDescription;
+}
+
+public void setChargeDescription(String chargeDescription) {
+	this.chargeDescription = chargeDescription;
+}
+
+public String getChargeType() {
+	return chargeType;
+}
+
+public void setChargeType(String chargeType) {
+	this.chargeType = chargeType;
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCommand.java
new file mode 100644
index 0000000..98d849c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/commands/ChargeCommand.java
@@ -0,0 +1,123 @@
+package org.mifosplatform.portfolio.charge.commands;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+/**
+ * Immutable data object for creating and modifying defined charges.
+ */
+public class ChargeCommand {
+
+    private final Long id;
+    private final String name;
+    private final BigDecimal amount;
+    private final String currencyCode;
+
+    private final Integer chargeTimeType;
+    private final Integer chargeAppliesTo;
+    private final Integer chargeCalculationType;
+
+    private final boolean penalty;
+    private final boolean active;
+
+    private final Set<String> modifiedParameters;
+
+    public ChargeCommand(
+		final Set<String> modifiedParameters,
+		final Long id,
+		final String name,
+		final BigDecimal amount,
+		final String currencyCode,
+		final Integer chargeTimeType,
+		final Integer chargeAppliesTo,
+		final Integer chargeCalculationType,
+		final boolean penalty,
+		final boolean active) {
+        this.id = id;
+        this.name = name;
+        this.amount = amount;
+        this.currencyCode = currencyCode;
+        this.chargeTimeType = chargeTimeType;
+        this.chargeAppliesTo = chargeAppliesTo;
+        this.chargeCalculationType = chargeCalculationType;
+        this.modifiedParameters = modifiedParameters;
+        this.penalty = penalty;
+        this.active = active;
+    }
+
+    public Long getId() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public BigDecimal getAmount() {
+        return amount;
+    }
+
+    public Set<String> getModifiedParameters() {
+        return modifiedParameters;
+    }
+
+    public String getCurrencyCode() {
+        return currencyCode;
+    }
+
+    public Integer getChargeCalculationType() {
+        return chargeCalculationType;
+    }
+
+    public Integer getChargeAppliesTo() {
+        return chargeAppliesTo;
+    }
+
+    public Integer getChargeTimeType() {
+        return chargeTimeType;
+    }
+
+    public boolean isPenalty() {
+		return penalty;
+	}
+
+    public boolean isFee() {
+		return !penalty;
+	}
+
+	public boolean isActive() {
+        return active;
+    }
+
+    public boolean isNameChanged(){
+        return this.modifiedParameters.contains("name");
+    }
+
+    public boolean isAmountChanged(){
+        return this.modifiedParameters.contains("amount");
+    }
+
+    public boolean isCurrencyCodeChanged(){
+        return this.modifiedParameters.contains("currencyCode");
+    }
+
+    public boolean isChargeTimeTypeChanged(){
+        return this.modifiedParameters.contains("chargeTimeType");
+    }
+
+    public boolean isChargeAppliesToChanged(){
+        return this.modifiedParameters.contains("chargeAppliesTo");
+    }
+
+    public boolean isChargeCalculationTypeChanged(){
+        return this.modifiedParameters.contains("chargeCalculationType");
+    }
+
+    public boolean isPenaltyChanged(){
+        return this.modifiedParameters.contains("penalty");
+    }
+
+    public boolean isActiveChanged(){
+        return this.modifiedParameters.contains("active");
+    }
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/CategoryOptionData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/CategoryOptionData.java
new file mode 100644
index 0000000..91e452f
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/CategoryOptionData.java
@@ -0,0 +1,26 @@
+package org.mifosplatform.portfolio.charge.data;
+
+public class CategoryOptionData {
+
+		private final Long id;
+		private final String code;
+		private final String value;
+
+		public CategoryOptionData(final Long id, final String code, final String value) {
+			this.id = id;
+			this.code = code;
+			this.value = value;
+		}
+
+		public Long getId() {
+			return id;
+		}
+
+		public String getCode() {
+			return code;
+		}
+
+		public String getValue() {
+			return value;
+		}
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargeCodeData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargeCodeData.java
new file mode 100644
index 0000000..8f7734b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargeCodeData.java
@@ -0,0 +1,25 @@
+package org.mifosplatform.portfolio.charge.data;
+
+public class ChargeCodeData {
+private Long id;
+private String chargeCode;
+public ChargeCodeData(Long id,String chargeCode)
+{
+	this.id=id;
+	this.chargeCode=chargeCode;
+
+}
+public Long getId() {
+	return id;
+}
+public void setId(Long id) {
+	this.id = id;
+}
+public String getChargeCode() {
+	return chargeCode;
+}
+public void setChargeCode(String chargeCode) {
+	this.chargeCode = chargeCode;
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargesData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargesData.java
new file mode 100644
index 0000000..b9af179
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/data/ChargesData.java
@@ -0,0 +1,40 @@
+package org.mifosplatform.portfolio.charge.data;
+
+public class ChargesData {
+
+
+
+		private final Long id;
+
+		private final String charge_code;
+		private final String charge_description;
+
+		public ChargesData(final Long id,final String charge_code,final String charge_description)
+		{
+
+			this.charge_description=charge_description;
+			this.id=id;
+			this.charge_code=charge_code;
+		}
+
+		public ChargesData(Long id, String charge_code) {
+			this.charge_description=null;
+			this.id=id;
+			this.charge_code=charge_code;
+		}
+
+		public Long getId() {
+			return id;
+		}
+
+		public String getChargeCode() {
+			return charge_code;
+		}
+
+		public String getChargeDescription() {
+			return charge_description;
+		}
+
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/domain/Charge.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/domain/Charge.java
index 347284e..af63411 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/domain/Charge.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/domain/Charge.java
@@ -191,4 +191,9 @@ public class Charge extends AbstractPersistable<Long> {
         this.deleted = true;
         this.name = this.getId() + "_" + this.name;
     }
+
+	public void updateBillId(Long billId) {
+		// TODO Auto-generated method stub
+		
+	}
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/service/ChargeCode.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/service/ChargeCode.java
new file mode 100644
index 0000000..e8ef379
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/charge/service/ChargeCode.java
@@ -0,0 +1,36 @@
+package org.mifosplatform.portfolio.charge.service;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "charge_codes")
+public class ChargeCode extends AbstractPersistable<Long>{
+
+	@Column(name = "charge_code", nullable = false, length = 20, unique=true)
+	private String chargeCode;
+
+	@Column(name = "charge_description", nullable = false, length = 20)
+	private String chargeDescription;
+
+	@Column(name = "charge_type", nullable = false, length = 20)
+	private String chargeType;
+
+	public ChargeCode(String chargeCode,String chargeDescription,String chargeType)
+	{
+		this.chargeCode=chargeCode;
+		this.chargeDescription=chargeDescription;
+		this.chargeType=chargeType;
+	}
+	public static ChargeCode create(String chargeCode,String chargeDescription,String chargeType)
+	{
+		return new ChargeCode(chargeCode,chargeDescription,chargeType);
+	}
+	public ChargeCode() {
+		// TODO Auto-generated constructor stub
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/domain/ChargeCodeRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/domain/ChargeCodeRepository.java
new file mode 100644
index 0000000..98fba6e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/domain/ChargeCodeRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.chargecode.domain;
+
+import org.mifosplatform.portfolio.charge.service.ChargeCode;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMaster;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ChargeCodeRepository extends JpaRepository<ChargeCode, Long>,
+JpaSpecificationExecutor<TaxMaster>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformService.java
new file mode 100644
index 0000000..4f1e821
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformService.java
@@ -0,0 +1,5 @@
+package org.mifosplatform.portfolio.chargecode.service;
+
+public interface ChargeCodeReadPlatformService {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformServiceImpl.java
new file mode 100644
index 0000000..be3c5b9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeReadPlatformServiceImpl.java
@@ -0,0 +1,5 @@
+package org.mifosplatform.portfolio.chargecode.service;
+
+public class ChargeCodeReadPlatformServiceImpl {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformService.java
new file mode 100644
index 0000000..e19bc00
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformService.java
@@ -0,0 +1,7 @@
+package org.mifosplatform.portfolio.chargecode.service;
+
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
+
+public interface ChargeCodeWritePlatformService {
+	Long createChargeCode(ChargeCodeCommand command);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformServiceJpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformServiceJpaRepositoryImpl.java
new file mode 100644
index 0000000..8755a4e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/chargecode/service/ChargeCodeWritePlatformServiceJpaRepositoryImpl.java
@@ -0,0 +1,39 @@
+package org.mifosplatform.portfolio.chargecode.service;
+
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
+import org.mifosplatform.portfolio.charge.service.ChargeCode;
+import org.mifosplatform.portfolio.chargecode.domain.ChargeCodeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+@Service
+public class ChargeCodeWritePlatformServiceJpaRepositoryImpl  implements ChargeCodeWritePlatformService{
+	private final PlatformSecurityContext context;
+	private final ChargeCodeRepository chargeCodeRepository;
+
+@Autowired
+ public ChargeCodeWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,final ChargeCodeRepository chargeCodeRepository)
+{
+	this.context=context;
+	this.chargeCodeRepository=chargeCodeRepository;
+}
+
+@Transactional
+@Override
+	public Long createChargeCode(final ChargeCodeCommand command)
+	{
+	try {
+		context.authenticatedUser();
+		ChargeCode chargeCode = ChargeCode.create(command.getChargeCode(),command.getChargeDescription(),command.getChargeType());
+			this.chargeCodeRepository.save(chargeCode);
+		return chargeCode.getId();
+	} catch (DataIntegrityViolationException dve) {
+		 return Long.valueOf(-1);
+	}
+
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/api/ClientsApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/api/ClientsApiResource.java
index 69f4c43..53fb80f 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/api/ClientsApiResource.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/api/ClientsApiResource.java
@@ -37,6 +37,7 @@ import org.mifosplatform.organisation.office.service.OfficeReadPlatformService;
 import org.mifosplatform.portfolio.client.data.ClientAccountSummaryCollectionData;
 import org.mifosplatform.portfolio.client.data.ClientData;
 import org.mifosplatform.portfolio.client.service.ClientReadPlatformService;
+import org.mifosplatform.portfolio.order.data.OrderData;
 import org.mifosplatform.portfolio.savingsaccount.PortfolioApiDataConversionService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Scope;
@@ -48,7 +49,7 @@ import org.springframework.stereotype.Component;
 public class ClientsApiResource {
 
     private final Set<String> CLIENT_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id", "accountNo", "officeId", "officeName", "externalId",
-            "firstname", "middlename", "lastname", "fullname", "joinedDate", "displayName", "clientOrBusinessName", "allowedOffices", "imagePresent"));
+            "firstname", "middlename", "lastname", "fullname", "joinedDate", "displayName", "clientOrBusinessName", "allowedOffices", "imagePresent","balance"));
 
     private final PlatformSecurityContext context;
     private final ClientReadPlatformService clientReadPlatformService;
@@ -285,4 +286,7 @@ public class ClientsApiResource {
         final ApiRequestJsonSerializationSettings settings = apiRequestParameterHelper.process(uriInfo.getQueryParameters());
         return this.clientAccountSummaryToApiJsonSerializer.serialize(settings, clientAccount, CLIENT_ACCOUNTS_DATA_PARAMETERS);
     }
+    
+    
+   
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/data/ClientData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/data/ClientData.java
index f2fd41c..61ac323 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/data/ClientData.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/data/ClientData.java
@@ -1,5 +1,6 @@
 package org.mifosplatform.portfolio.client.data;
 
+import java.math.BigDecimal;
 import java.util.Collection;
 import java.util.List;
 
@@ -24,6 +25,7 @@ final public class ClientData {
     private final String officeName;
     private final LocalDate joinedDate;
     private final String imageKey;
+    private  BigDecimal balance;
     @SuppressWarnings("unused")
     private final Boolean imagePresent;
 
@@ -37,41 +39,42 @@ final public class ClientData {
 
         String localDisplayName = null;
         return new ClientData(null, officeId, null, id, firstname, middlename, lastname, fullname, localDisplayName, externalId,
-                joiningDate, null, null, null, null);
+                joiningDate, null, null, null, null,null);
     }
 
     public static ClientData integrateChanges(final ClientData clientData, ClientData currentChange, final Collection<ClientData> allChanges) {
         return new ClientData(clientData.accountNo, clientData.officeId, clientData.officeName, clientData.id, clientData.firstname,
                 clientData.middlename, clientData.lastname, clientData.fullname, clientData.displayName, clientData.externalId,
-                clientData.joinedDate, clientData.imageKey, clientData.allowedOffices, currentChange, allChanges);
+                clientData.joinedDate, clientData.imageKey, clientData.allowedOffices, currentChange, allChanges,clientData.balance);
     }
 
     public static ClientData template(final Long officeId, final LocalDate joinedDate, final List<OfficeLookup> allowedOffices) {
-        return new ClientData(null, officeId, null, null, null, null, null, null, null, null, joinedDate, null, allowedOffices, null, null);
+        return new ClientData(null, officeId, null, null, null, null, null, null, null, null, joinedDate, null, allowedOffices, null, null,null);
     }
 
     public static ClientData templateOnTop(final ClientData clientData, final List<OfficeLookup> allowedOffices) {
 
         return new ClientData(clientData.accountNo, clientData.officeId, clientData.officeName, clientData.id, clientData.firstname,
                 clientData.middlename, clientData.lastname, clientData.fullname, clientData.displayName, clientData.externalId,
-                clientData.joinedDate, clientData.imageKey, allowedOffices, clientData.currentChange, clientData.allChanges);
+                clientData.joinedDate, clientData.imageKey, allowedOffices, clientData.currentChange, clientData.allChanges,clientData.balance);
     }
 
     public static ClientData clientIdentifier(final Long id, final String accountIdentifier, final String firstname,
             final String middlename, final String lastname, final String fullname, final String displayName, final Long officeId,
-            final String officeName) {
+            final String officeName,BigDecimal balance) {
 
         return new ClientData(accountIdentifier, officeId, officeName, id, firstname, middlename, lastname, fullname, displayName, null,
-                null, null, null, null, null);
+                null, null, null, null, null,balance);
     }
 
     public ClientData(final String accountNo, final Long officeId, final String officeName, final Long id, final String firstname,
             final String middlename, final String lastname, final String fullname, final String displayName, final String externalId,
             final LocalDate joinedDate, final String imageKey, final List<OfficeLookup> allowedOffices, final ClientData currentChange,
-            final Collection<ClientData> allChanges) {
+            final Collection<ClientData> allChanges,BigDecimal balance) {
         this.accountNo = accountNo;
         this.officeId = officeId;
         this.officeName = officeName;
+        this.balance=balance;
         this.id = id;
         this.firstname = StringUtils.defaultIfEmpty(firstname, null);
         this.middlename = StringUtils.defaultIfEmpty(middlename, null);
@@ -81,6 +84,7 @@ final public class ClientData {
         this.externalId = StringUtils.defaultIfEmpty(externalId, null);
         this.joinedDate = joinedDate;
         this.imageKey = imageKey;
+     
         if (imageKey != null) {
             this.imagePresent = Boolean.TRUE;
         } else {
@@ -122,4 +126,10 @@ final public class ClientData {
     public ClientData currentChange() {
         return this.currentChange;
     }
+
+	public BigDecimal getBalance() {
+		return balance;
+	}
+    
+    
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformService.java
index a89eead..278bc3c 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformService.java
@@ -1,6 +1,7 @@
 package org.mifosplatform.portfolio.client.service;
 
 import java.util.Collection;
+import java.util.List;
 
 import org.mifosplatform.portfolio.client.data.ClientAccountSummaryCollectionData;
 import org.mifosplatform.portfolio.client.data.ClientAccountSummaryData;
@@ -8,6 +9,7 @@ import org.mifosplatform.portfolio.client.data.ClientData;
 import org.mifosplatform.portfolio.client.data.ClientIdentifierData;
 import org.mifosplatform.portfolio.client.data.ClientLookup;
 import org.mifosplatform.portfolio.client.data.NoteData;
+import org.mifosplatform.portfolio.order.data.OrderData;
 
 public interface ClientReadPlatformService {
 
@@ -34,4 +36,6 @@ public interface ClientReadPlatformService {
     ClientIdentifierData retrieveClientIdentifier(Long clientId, Long clientIdentifierId);
 
     ClientData retrieveClientByIdentifier(Long identifierTypeId, String identifierKey);
+
+	List<OrderData> retrieveClientOrderDetails(Long clientId);
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformServiceImpl.java
index a0fdce2..34e818e 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/client/service/ClientReadPlatformServiceImpl.java
@@ -1,5 +1,6 @@
 package org.mifosplatform.portfolio.client.service;
 
+import java.math.BigDecimal;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.util.ArrayList;
@@ -26,6 +27,8 @@ import org.mifosplatform.portfolio.client.exception.ClientIdentifierNotFoundExce
 import org.mifosplatform.portfolio.client.exception.ClientNotFoundException;
 import org.mifosplatform.portfolio.client.exception.NoteNotFoundException;
 import org.mifosplatform.portfolio.loanproduct.service.LoanEnumerations;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.SavingStatusEnumaration;
 import org.mifosplatform.useradministration.data.AppUserData;
 import org.mifosplatform.useradministration.domain.AppUser;
 import org.mifosplatform.useradministration.service.AppUserReadPlatformService;
@@ -130,10 +133,10 @@ public class ClientReadPlatformServiceImpl implements ClientReadPlatformService
     private static final class ClientMapper implements RowMapper<ClientData> {
 
         public String clientSchema() {
-            return "c.account_no as accountNo, c.office_id as officeId, o.name as officeName, c.id as id, "
-                    + "c.firstname as firstname, c.middlename as middlename, c.lastname as lastname, "
-                    + "c.fullname as fullname, c.display_name as displayName, "
-                    + "c.external_id as externalId, c.joined_date as joinedDate, c.image_key as imagekey from m_client c join m_office o on o.id = c.office_id "
+            return "c.account_no as accountNo,c.office_id as officeId, o.name as officeName, c.id as id, c.firstname as firstname, c.lastname as lastname," +
+            		"c.fullname as fullname, c.display_name as displayName, "
+                    + " c.middlename as middlename,c.external_id as externalId, c.joined_date as joinedDate, c.image_key as imagekey,cb.balance_amount as balance from m_client c join m_office o on o.id = c.office_id" +
+                    " left join client_balance cb on cb.client_id=c.id "
                     + " where o.hierarchy like ? and c.is_deleted=0 ";
         }
 
@@ -152,9 +155,10 @@ public class ClientReadPlatformServiceImpl implements ClientReadPlatformService
             final LocalDate joinedDate = JdbcSupport.getLocalDate(rs, "joinedDate");
             final String imageKey = rs.getString("imageKey");
             final String officeName = rs.getString("officeName");
+            final BigDecimal balance = rs.getBigDecimal("balance");
 
             return new ClientData(accountNo, officeId, officeName, id, firstname, middlename, lastname, fullname, displayName, externalId,
-                    joinedDate, imageKey, null, null, null);
+                    joinedDate, imageKey, null, null, null,balance);
         }
 
     }
@@ -543,7 +547,7 @@ public class ClientReadPlatformServiceImpl implements ClientReadPlatformService
             final Long officeId = rs.getLong("officeId");
             final String officeName = rs.getString("officeName");
 
-            return ClientData.clientIdentifier(id, accountNo, firstname, middlename, lastname, fullname, displayName, officeId, officeName);
+            return ClientData.clientIdentifier(id, accountNo, firstname, middlename, lastname, fullname, displayName, officeId, officeName,null);
         }
     }
 
@@ -570,5 +574,44 @@ public class ClientReadPlatformServiceImpl implements ClientReadPlatformService
             return new ClientAccountSummaryData(id, externalId, productId, productName, accountStatusId);
         }
     }
+    
+	@Override
+public List<OrderData> retrieveClientOrderDetails(Long clientId) {
+try {
+final ClientOrderMapper mapper = new ClientOrderMapper();
+
+final String sql = "select " + mapper.clientOrderLookupSchema()+" where o.plan_id = p.id and o.client_id= ? and o.is_deleted='n' ";
+
+return jdbcTemplate.query(sql, mapper, new Object[] { clientId});
+} catch (EmptyResultDataAccessException e) {
+return null;
+}
+
+}
+
+private static final class ClientOrderMapper implements RowMapper<OrderData> {
+
+public String clientOrderLookupSchema() {
+return "o.id as id, o.plan_id as plan_id,o.start_date as start_date,o.order_status as order_status,p.plan_code as plan_code,o.contract_period as contract_period,"
++"o.end_date as end_date,(select sum(ol.price) as price from order_price ol where o.id=ol.order_id) as price from orders o,plan_master p";
+}
+
+@Override
+public OrderData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+final Long id = rs.getLong("id");
+final Long planId = rs.getLong("plan_id");
+final String plancode = rs.getString("plan_code");
+final int status = rs.getInt("order_status");
+LocalDate startDate=JdbcSupport.getLocalDate(rs,"start_date");
+LocalDate endDate=JdbcSupport.getLocalDate(rs,"end_date");
+final double price=rs.getDouble("price");
+
+
+EnumOptionData status1=SavingStatusEnumaration.interestCompoundingPeriodType(status);
+
+return new OrderData(id, planId, plancode, status1, startDate,endDate,price);
+}
+}
 
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/clientbalance/data/ClientBalanceData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/clientbalance/data/ClientBalanceData.java
new file mode 100644
index 0000000..b3a8914
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/clientbalance/data/ClientBalanceData.java
@@ -0,0 +1,42 @@
+package org.mifosplatform.portfolio.clientbalance.data;
+
+import java.math.BigDecimal;
+
+public class ClientBalanceData {
+private Long id;
+private Long clientId;
+private BigDecimal balanceAmount;
+
+public ClientBalanceData(Long id,Long clientId,BigDecimal balanceAmount)
+{
+	this.id=id;
+	this.clientId=clientId;
+	this.balanceAmount=balanceAmount;
+}
+
+public Long getId() {
+	return id;
+}
+
+public void setId(Long id) {
+	this.id = id;
+}
+
+public Long getClientId() {
+	return clientId;
+}
+
+public void setClientId(Long clientId) {
+	this.clientId = clientId;
+}
+
+public BigDecimal getBalanceAmount() {
+	return balanceAmount;
+}
+
+public void setBalanceAmount(BigDecimal balanceAmount) {
+	this.balanceAmount = balanceAmount;
+}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/api/DiscountMasterApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/api/DiscountMasterApiResource.java
new file mode 100644
index 0000000..8a1ad3e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/api/DiscountMasterApiResource.java
@@ -0,0 +1,147 @@
+package org.mifosplatform.portfolio.discountmaster.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.discountmaster.commands.Discount;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.discountmaster.service.DiscountMasterReadPlatformService;
+import org.mifosplatform.portfolio.discountmaster.service.DiscountMasterWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/discountmasters")
+@Component
+@Scope("singleton")
+public class DiscountMasterApiResource {
+
+
+	@Autowired
+	private DiscountMasterWritePlatformService discountMasterWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@Autowired
+	private DiscountMasterReadPlatformService discountMasterReadPlatformService;
+
+	@GET
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveDiscountMasterDatas(@Context final UriInfo uriInfo) {
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","discountCode" ,"discountDescription", "discounType","discountValue"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		final Collection<DiscountMasterData> datas = this.discountMasterReadPlatformService.retrieveAllDiscountMasterData();
+
+		return this.apiJsonSerializerService.serializeDiscountMasterDataToJson(prettyPrint, responseParameters, datas);
+	}
+	@GET
+	@Path("{chartcode}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveDiscountMasterData(@PathParam("id") final Long id,@Context final UriInfo uriInfo) {
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		final DiscountMasterData data = this.discountMasterReadPlatformService.retrieveDiscountMasterData(id);
+
+		return this.apiJsonSerializerService.serializeDiscountMasterDataToJson(prettyPrint, responseParameters, data);
+
+	}
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createDiscountMaster(final String jsonRequestBody) {
+
+		final DiscountMasterCommand command = this.apiDataConversionService.convertJsonToDiscountMasterCommand(null, jsonRequestBody);
+		Long id=discountMasterWritePlatformService.createDiscountMaster(command);
+		return Response.ok().entity(id).build();
+	}
+
+    @GET
+    @Path("template")
+    @Consumes({MediaType.APPLICATION_JSON})
+    @Produces({MediaType.APPLICATION_JSON})
+    public String retrieveTempleteInfo(@Context final UriInfo uriInfo) {
+
+	Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("discountOptions"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+
+	final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+     //  final Collection<DiscountMasterData> datas = this.discountMasterReadPlatformService.retrieveAllDiscountMasterData();
+       final Collection<Discount> datass=new ArrayList<Discount>();
+       Discount d=new Discount();
+       d.setdiscount1();
+       datass.add(d);
+	//final Collection<Discount> datas = new ArrayList<Discount>();
+
+		//return this.apiJsonSerializerService.serializeDiscountMasterDataToJsonTemplete(prettyPrint, responseParameters, d);
+	return this.apiJsonSerializerService.serializeDiscountMasterDataToJsonTemplete(prettyPrint, responseParameters,datass );
+    }
+
+
+	@PUT
+	@Path("{Id}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response updateCode(@PathParam("Id") final Long codeId, final String jsonRequestBody) {
+
+		final DiscountMasterCommand command = this.apiDataConversionService.convertJsonToDiscountMasterCommand(codeId, jsonRequestBody);
+		//Long id=discountMasterWritePlatformService.updateDiscountMaster(command);
+
+		//return Response.ok().entity(new EntityIdentifier(id)).build();
+return null;
+
+	}
+
+	@DELETE
+	@Path("{codeId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response deleteCodeApplication(@PathParam("codeId") final Long id) {
+
+		CommandProcessingResult identifier = this.discountMasterWritePlatformService.deleteDiscountMaster(id);
+
+		return Response.ok().entity(identifier).build();
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/Discount.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/Discount.java
new file mode 100644
index 0000000..fc0cd06
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/Discount.java
@@ -0,0 +1,40 @@
+package org.mifosplatform.portfolio.discountmaster.commands;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+
+public class Discount {
+
+	/*@SuppressWarnings("unused")
+	private List<String> discountOptions = Arrays.asList("percentage","flatamount");
+*/
+	private List<DiscountValues> discountOptions;
+
+	public void setdiscount1()
+	{
+		discountOptions=new ArrayList<DiscountValues>();
+		discountOptions.add(new DiscountValues("percentage"));
+		discountOptions.add(new DiscountValues("flatamount"));
+	}
+
+	public void setadjustment_type()
+	{
+
+		discountOptions=new ArrayList<DiscountValues>();
+		discountOptions.add(new DiscountValues("CREDIT"));
+		discountOptions.add(new DiscountValues("DEBIT"));
+
+
+	}
+
+
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountMasterCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountMasterCommand.java
new file mode 100644
index 0000000..c95fb6b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountMasterCommand.java
@@ -0,0 +1,74 @@
+package org.mifosplatform.portfolio.discountmaster.commands;
+
+import java.util.Set;
+
+public class DiscountMasterCommand {
+private long discountCode;
+private String discountDescription;
+private String discounType;
+private long discountValue;
+private final Set<String> modifiedParameters;
+
+public DiscountMasterCommand(long discountCode,String discountDescription,String discounType,long discountValue,Set<String> modifiedParameters)
+{
+	this.discountCode=discountCode;
+	this.discountDescription=discountDescription;
+	this.discounType=discounType;
+	this.discountValue=discountValue;
+	this.modifiedParameters=modifiedParameters;
+}
+
+public long getDiscountCode() {
+	return discountCode;
+}
+
+public void setDiscountCode(long discountCode) {
+	this.discountCode = discountCode;
+}
+
+public String getDiscountDescription() {
+	return discountDescription;
+}
+
+public void setDiscountDescription(String discountDescription) {
+	this.discountDescription = discountDescription;
+}
+
+public String getDiscounType() {
+	return discounType;
+}
+
+public void setDiscounType(String discounType) {
+	this.discounType = discounType;
+}
+
+public long getDiscountValue() {
+	return discountValue;
+}
+
+public void setDiscountValue(long discountValue) {
+	this.discountValue = discountValue;
+}
+
+public Set<String> getModifiedParameters() {
+	return modifiedParameters;
+}
+
+public boolean isDiscountCodeChanged() {
+    return this.modifiedParameters.contains("discountCode");
+}
+
+public boolean isDiscountDescriptionChanged() {
+    return this.modifiedParameters.contains("discountDescription");
+}
+public boolean isDiscounTypeChanged() {
+    return this.modifiedParameters.contains("discounType");
+}
+public boolean isDiscountValueChanged() {
+    return this.modifiedParameters.contains("discountValue");
+}
+
+
+
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountValues.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountValues.java
new file mode 100644
index 0000000..2192dd1
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/commands/DiscountValues.java
@@ -0,0 +1,19 @@
+package org.mifosplatform.portfolio.discountmaster.commands;
+
+public class DiscountValues {
+	public String discountType;
+
+	public DiscountValues(String discountType)
+	{
+		this.discountType=discountType;
+	}
+	public String getDiscountType() {
+		return discountType;
+	}
+
+	public void setDiscountType(String discountType) {
+		this.discountType = discountType;
+	}
+
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/data/DiscountMasterData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/data/DiscountMasterData.java
new file mode 100644
index 0000000..a11be3d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/data/DiscountMasterData.java
@@ -0,0 +1,54 @@
+package org.mifosplatform.portfolio.discountmaster.data;
+
+public class DiscountMasterData {
+	    private long id;
+		private String discountCode;
+		private String discountDescription;
+		private String discounType;
+		private long discountValue;
+
+		public DiscountMasterData(long id,long discountCode,String discountDescription,String discounType,long discountValue)
+		{   this.id=id;
+			this.discountDescription=discountDescription;
+			this.discounType=discounType;
+			this.discountValue=discountValue;
+
+		}
+		public DiscountMasterData(Long id, String discountcode,String discountdesc) {
+			this.id=id;
+			this.discountCode=discountcode;
+			this.discountDescription=discountdesc;
+			this.discounType=null;
+			//this.discountValue=;
+		}
+		public long getId() {
+			return id;
+		}
+		public void setId(long id) {
+			this.id = id;
+		}
+		public String getDiscountCode() {
+			return discountCode;
+		}
+		public void setDiscountCode(String discountCode) {
+			this.discountCode = discountCode;
+		}
+		public String getDiscountDescription() {
+			return discountDescription;
+		}
+		public void setDiscountDescription(String discountDescription) {
+			this.discountDescription = discountDescription;
+		}
+		public String getDiscounType() {
+			return discounType;
+		}
+		public void setDiscounType(String discounType) {
+			this.discounType = discounType;
+		}
+		public long getDiscountValue() {
+			return discountValue;
+		}
+		public void setDiscountValue(long discountValue) {
+			this.discountValue = discountValue;
+		}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMaster.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMaster.java
new file mode 100644
index 0000000..5b4f987
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMaster.java
@@ -0,0 +1,66 @@
+package org.mifosplatform.portfolio.discountmaster.domain;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "m_discountmaster")
+public class DiscountMaster extends AbstractPersistable<Long> {
+	@Column(name = "discountcode", nullable = false, length = 20)
+	private long discountCode;
+	@Column(name = "discountdescription", nullable = false, length = 100)
+	private String discountDescription;
+	@Column(name = "discountype", nullable = false, length = 100)
+	private String discounType;
+	@Column(name = "discountvalue", nullable = false, length = 20)
+	private long discountValue;
+	public DiscountMaster(long discountCode,String discountDescription,String discounType,long discountValue)
+	{
+		this.discountCode=discountCode;
+		this.discountDescription=discountDescription;
+		this.discounType=discounType;
+		this.discountValue=discountValue;
+	}
+
+	public static DiscountMaster create(long discountCode,String discountDescription,String discounType,long discountvalue)
+	{
+		return new DiscountMaster(discountCode,discountDescription,discounType,discountvalue);
+	}
+
+	public long getDiscountCode() {
+		return discountCode;
+	}
+
+	public void setDiscountCode(long discountCode) {
+		this.discountCode = discountCode;
+	}
+
+	public String getDiscountDescription() {
+		return discountDescription;
+	}
+
+	public void setDiscountDescription(String discountDescription) {
+		this.discountDescription = discountDescription;
+	}
+
+	public String getDiscounType() {
+		return discounType;
+	}
+
+	public void setDiscounType(String discounType) {
+		this.discounType = discounType;
+	}
+
+	public long getDiscountValue() {
+		return discountValue;
+	}
+
+	public void setDiscountValue(long discountValue) {
+		this.discountValue = discountValue;
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMasterRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMasterRepository.java
new file mode 100644
index 0000000..e8acf53
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/domain/DiscountMasterRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.discountmaster.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface DiscountMasterRepository extends JpaRepository<DiscountMaster, Long>, JpaSpecificationExecutor<DiscountMaster>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformService.java
new file mode 100644
index 0000000..a20fabf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformService.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.discountmaster.service;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+
+public interface DiscountMasterReadPlatformService {
+	public Collection<DiscountMasterData> retrieveAllDiscountMasterData();
+	public DiscountMasterData retrieveDiscountMasterData(final Long id);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformServiceImpl.java
new file mode 100644
index 0000000..a9eaeea
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterReadPlatformServiceImpl.java
@@ -0,0 +1,74 @@
+package org.mifosplatform.portfolio.discountmaster.service;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Collection;
+
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class DiscountMasterReadPlatformServiceImpl implements DiscountMasterReadPlatformService{
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  DiscountMasterReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+	@Override
+	public Collection<DiscountMasterData> retrieveAllDiscountMasterData() {
+		this.context.authenticatedUser();
+
+		DiscountMasterMapper mapper = new DiscountMasterMapper();
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+	@Override
+	public DiscountMasterData retrieveDiscountMasterData(Long id) {
+
+           this.context.authenticatedUser();
+
+           DiscountMasterMapper mapper = new DiscountMasterMapper();
+		String sql = "select " + mapper.schema() + " where d.id=?";
+
+		DiscountMasterData discountMasterData=this.jdbcTemplate.queryForObject(sql, mapper, new Object[] {id});
+		return discountMasterData;
+
+	}
+
+	protected static final class DiscountMasterMapper implements RowMapper<DiscountMasterData> {
+
+		@Override
+		public DiscountMasterData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+            Long id=JdbcSupport.getLong(rs, "id");
+			Long discountCode = JdbcSupport.getLong(rs, "discountCode");
+			String discountDescription = rs.getString("discountDescription");
+			String discounType = rs.getString("discounType");
+			long discountValue=rs.getLong("discountValue");
+
+
+			return new DiscountMasterData(id,discountCode,discountDescription,discounType,discountValue);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id, d.discountcode as discountcode , d.discountdescription as discountdescription, d.discountype as discountype ,d.discountvalue as " +
+					"discountvalue from m_discountmaster d";
+		}
+}
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformService.java
new file mode 100644
index 0000000..a008f29
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformService.java
@@ -0,0 +1,14 @@
+package org.mifosplatform.portfolio.discountmaster.service;
+
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+
+public interface DiscountMasterWritePlatformService {
+
+	public Long createDiscountMaster(final DiscountMasterCommand command);
+	public Long updateDiscountMaster(final DiscountMasterData data);
+	public CommandProcessingResult deleteDiscountMaster(long id);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformServicejpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformServicejpaRepositoryImpl.java
new file mode 100644
index 0000000..baca1aa
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/discountmaster/service/DiscountMasterWritePlatformServicejpaRepositoryImpl.java
@@ -0,0 +1,95 @@
+package org.mifosplatform.portfolio.discountmaster.service;
+
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.discountmaster.domain.DiscountMaster;
+import org.mifosplatform.portfolio.discountmaster.domain.DiscountMasterRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+@Service
+public class DiscountMasterWritePlatformServicejpaRepositoryImpl  implements DiscountMasterWritePlatformService {
+
+		private final PlatformSecurityContext context;
+		private final DiscountMasterRepository discountMasterRepository;
+
+	@Autowired
+	 public DiscountMasterWritePlatformServicejpaRepositoryImpl(final PlatformSecurityContext context,final DiscountMasterRepository discountMasterRepository)
+	{
+		this.context=context;
+		this.discountMasterRepository=discountMasterRepository;
+	}
+	@Transactional
+	@Override
+	public Long createDiscountMaster(DiscountMasterCommand command) {
+		// TODO Auto-generated method stub
+
+		try {
+			context.authenticatedUser();
+
+			DiscountMaster discountmaster;
+
+		     discountmaster = DiscountMaster.create(command.getDiscountCode(),command.getDiscountDescription(),command.getDiscounType(),command.getDiscountValue());
+
+			this.discountMasterRepository.saveAndFlush(discountmaster);
+
+			return discountmaster.getId();
+
+		} catch (DataIntegrityViolationException dve) {
+			 return Long.valueOf(-1);
+		}
+
+
+	}
+
+
+		@Transactional
+		@Override
+		public Long updateDiscountMaster(DiscountMasterData data)
+		{
+			try {
+				context.authenticatedUser();
+
+				 long discountMasterId=data.getId();
+
+				DiscountMaster discountmaster=this.discountMasterRepository.findOne(discountMasterId);
+
+				if(discountmaster==null)
+				{
+
+				}
+
+
+				this.discountMasterRepository.saveAndFlush(discountmaster);
+
+				return discountmaster.getId();
+
+			} catch (DataIntegrityViolationException dve) {
+				 return Long.valueOf(-1);
+			}
+
+		}
+
+		@Transactional
+		@Override
+		public CommandProcessingResult deleteDiscountMaster(long id)
+		{
+				context.authenticatedUser();
+
+				DiscountMaster discountmaster=this.discountMasterRepository.findOne(id);
+
+				if(discountmaster==null)
+				{
+
+				}
+				this.discountMasterRepository.delete(discountmaster);
+
+				return new CommandProcessingResult(discountmaster.getId());
+			}
+
+
+		}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/api/FinancialTransactionApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/api/FinancialTransactionApiResource.java
new file mode 100644
index 0000000..19ad5c4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/api/FinancialTransactionApiResource.java
@@ -0,0 +1,76 @@
+package org.mifosplatform.portfolio.financialtransaction.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.billmaster.service.BillMasterReadPlatformService;
+import org.mifosplatform.portfolio.financialtransaction.data.FinancialTransactionsData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+
+
+@Path("/financialTransactions")
+@Component
+@Scope("singleton")
+public class FinancialTransactionApiResource {
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private BillMasterReadPlatformService billMasterReadPlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "FINANCIALTRANSACTION";
+
+
+	@GET
+	  @Path("{clientId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveTransactionalData(
+			@PathParam("clientId") final Long clientId,
+			@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("transactionId","transactionDate","transactionType","amount"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		List<FinancialTransactionsData> transactionData = this.billMasterReadPlatformService.retrieveInvoiceFinancialData(clientId);
+
+
+
+		return this.apiJsonSerializerService.serializeTransactionalDataToJson(prettyPrint, responseParameters, transactionData);
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/data/FinancialTransactionsData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/data/FinancialTransactionsData.java
new file mode 100644
index 0000000..794b2c4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/financialtransaction/data/FinancialTransactionsData.java
@@ -0,0 +1,108 @@
+package org.mifosplatform.portfolio.financialtransaction.data;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import org.joda.time.LocalDate;
+
+public class FinancialTransactionsData {
+	
+	private Long id;
+	private Long transactionId;
+	private Date transactionDate;
+	private String transactionType;
+	private BigDecimal amount;
+	private LocalDate transDate;
+	private LocalDate transactionalDate;
+	private LocalDate billDate;
+	private LocalDate dueDate;
+
+	public FinancialTransactionsData(final Long transactionId,final Date transactionDate,String transactionType,BigDecimal amount) {
+		this.transactionId = transactionId;
+		this.transactionDate = transactionDate;
+		this.transactionType = transactionType;
+		this.amount = amount;
+	}
+
+	public FinancialTransactionsData(Long transactionId, LocalDate transDate,
+			String transactionType, BigDecimal amount) {
+
+		this.transactionId = transactionId;
+		this.transDate = transDate;
+		this.transactionType = transactionType;
+		this.amount = amount;
+
+	}
+
+
+
+	public FinancialTransactionsData(Long transctionId,
+			String transactionType, LocalDate transactionDate, BigDecimal amount) {
+		this.transactionId = transctionId;
+		this.transactionalDate = transactionDate;
+		this.transactionType = transactionType;
+		this.amount = amount;
+	}
+
+	public FinancialTransactionsData(Long id, LocalDate billDate,
+			LocalDate dueDate, BigDecimal amount) {
+		this.id=id;
+		this.billDate=billDate;
+		this.dueDate=dueDate;
+		this.amount=amount;
+	}
+
+	public Long getTransactionId() {
+		return transactionId;
+	}
+
+	public void setTransactionId(Long transactionId) {
+		this.transactionId = transactionId;
+	}
+
+	public Date getTransactionDate() {
+		return transactionDate;
+	}
+
+	public void setTransactionDate(Date transactionDate) {
+		this.transactionDate = transactionDate;
+	}
+
+	public String getTransactionType() {
+		return transactionType;
+	}
+
+	public void setTransactionType(String transactionType) {
+		this.transactionType = transactionType;
+	}
+
+	public BigDecimal getAmount() {
+		return amount;
+	}
+
+	public void setAmount(BigDecimal amount) {
+		this.amount = amount;
+	}
+
+	public LocalDate getTransDate() {
+		return transDate;
+	}
+
+	public LocalDate getTransactionalDate() {
+		return transactionalDate;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public LocalDate getBillDate() {
+		return billDate;
+	}
+
+	public LocalDate getDueDate() {
+		return dueDate;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/api/OrdersApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/api/OrdersApiResource.java
new file mode 100644
index 0000000..6508524
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/api/OrdersApiResource.java
@@ -0,0 +1,241 @@
+package org.mifosplatform.portfolio.order.api;
+
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.client.service.ClientReadPlatformService;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.order.service.OrderReadPlatformService;
+import org.mifosplatform.portfolio.order.service.OrderWritePlatformService;
+import org.mifosplatform.portfolio.payterms.data.PaytermData;
+import org.mifosplatform.portfolio.plan.data.PlanCodeData;
+import org.mifosplatform.portfolio.plan.service.PlanReadPlatformService;
+import org.mifosplatform.portfolio.pricing.service.PriceReadPlatformService;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+@Path("/orders")
+@Component
+@Scope("singleton")
+public class OrdersApiResource {
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private OrderWritePlatformService orderWritePlatformService;
+
+	@Autowired
+	private OrderReadPlatformService orderReadPlatformService;
+
+	@Autowired
+	private PriceReadPlatformService priceReadPlatformService;
+
+	@Autowired
+	private PlanReadPlatformService planReadPlatformService;
+	
+	
+	@Autowired
+	private ClientReadPlatformService clientReadPlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "ORDER";
+
+	@POST
+	  @Path("{clientId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createPlan(@PathParam("clientId") final Long clientId, final String jsonRequestBody) {
+
+		OrdersCommand command = this.apiDataConversionService.convertJsonToOrderCommand(null,clientId, jsonRequestBody);
+
+CommandProcessingResult userId = this.orderWritePlatformService.createOrder(command);
+		return Response.ok().entity(userId).build();
+	}
+	@GET
+	@Path("template")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveNewDepositProductDetails(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("allowedtypes","data","service_code","startDate"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		responseParameters.addAll(Arrays.asList("id","data","allowedtypes","startDate"));
+		OrderData orderData = handleTemplateRelatedData(responseParameters);
+
+		return this.apiJsonSerializerService.serializeOrderToJson(prettyPrint, responseParameters, orderData);
+	}
+
+
+	private OrderData handleTemplateRelatedData(final Set<String> responseParameters) {
+
+		List<PlanCodeData> allowedtypes = this.orderReadPlatformService.retrieveAllPlatformData();
+		List<PaytermData> data=this.orderReadPlatformService.retrieveAllPaytermData();
+		//this.orderReadPlatformService.retrieveInvoice();
+		 List<SubscriptionData> contractPeriod=this.planReadPlatformService.retrieveSubscriptionData();
+
+
+		return new OrderData(allowedtypes,data,contractPeriod);
+	}
+
+	@GET
+	@Path("{orderId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrievePlanDetails(
+			@PathParam("orderId") final Long orderId,
+			@Context final UriInfo uriInfo) {
+
+		context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","start_date","billing_frequency","contract_period","endDate","price"));
+
+		Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		boolean template = ApiParameterHelper.template(uriInfo
+				.getQueryParameters());
+
+		OrderData data = this.orderReadPlatformService
+				.retrieveOrderData(orderId);
+		responseParameters.addAll(Arrays.asList("servicedata"));
+
+
+		if (template) {
+
+
+			List<PlanCodeData> allowedtypes = this.orderReadPlatformService.retrieveAllPlatformData();
+			List<PaytermData> data1=this.orderReadPlatformService.retrieveAllPaytermData();
+			 List<SubscriptionData> contractPeriod=this.planReadPlatformService.retrieveSubscriptionData();
+
+	      data= new OrderData(allowedtypes,data1,contractPeriod,data);
+
+
+		}
+
+		return this.apiJsonSerializerService.serializeOrderToJson(prettyPrint, responseParameters,data);
+	}
+
+
+	@PUT
+	@Path("{orderId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response updateOrder(@PathParam("orderId") final Long orderId
+			) {
+
+		//OrdersCommand command = this.apiDataConversionService.convertJsonToOrderCommand(null,null,jsonRequestBody);
+		CommandProcessingResult entityIdentifier = this.orderWritePlatformService
+				.updateOrder(orderId);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+
+
+	@GET
+	 @Path("{planCode}/template")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String getBillingFrequency(@PathParam("planCode") final Long planCode,@Context final UriInfo uriInfo
+			) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("allowedtypes","data","service_code"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		responseParameters.addAll(Arrays.asList("id","data","allowedtypes"));
+		OrderData orderData = handleTemplateRelatedData(responseParameters);
+		List<PaytermData> datas  = this.orderReadPlatformService
+				.getChargeCodes(planCode);
+		orderData.setPaytermData(datas);
+		return this.apiJsonSerializerService.serializeOrderToJson(prettyPrint, responseParameters, orderData);
+	}
+
+	@DELETE
+	@Path("{orderId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response deleteOrder(
+			@PathParam("orderId") final Long orderId) {
+
+List<OrderData> orederData=this.orderReadPlatformService.retrieveOrderLineData(orderId);
+OrderPriceData orderPrice=this.orderReadPlatformService.retrieveOrderPriceData(orderId);
+
+
+		this.orderWritePlatformService.deleteOrder(orderId,orederData,orderPrice);
+
+		return Response.ok().build();
+	}
+
+	 @GET
+	    @Path("{clientId}/orders")
+	    @Consumes({MediaType.APPLICATION_JSON})
+	    @Produces({MediaType.APPLICATION_JSON})
+	    public String retrieveOrderDetails(@PathParam("clientId") final Long clientId, @Context final UriInfo uriInfo) {
+
+	        context.authenticatedUser().validateHasReadPermission("CLIENTORDER");
+
+	        final Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+	        final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+	        final List<OrderData> clientAccount = this.clientReadPlatformService.retrieveClientOrderDetails(clientId);
+
+	        return this.apiJsonSerializerService.serializeClientOrderDataToJson(prettyPrint, responseParameters,
+	                clientAccount);
+	    }
+	 
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/command/OrdersCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/command/OrdersCommand.java
new file mode 100644
index 0000000..feef6ed
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/command/OrdersCommand.java
@@ -0,0 +1,112 @@
+package org.mifosplatform.portfolio.order.command;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+import org.joda.time.LocalDate;
+
+public class OrdersCommand {
+
+	private final Long planid;
+	private final String billingFrequency;
+	private final Long clientId;
+
+	private final Long serviceStatus;
+	private final Long chargeType;
+
+	private final LocalDate startDate;
+
+	private String chargeDuration;
+	private Long durationType;
+	private Long contractPeriod;
+	private final String[] serviceType;
+	private final int[] serviceId;
+	private final Long chargeCode;
+	private final Set<String> modifiedParameters;
+	private final BigDecimal price;
+	private final boolean billAlign;
+
+	public OrdersCommand(final Set<String> modifiedParameters,
+			final Long plan_id, final Long client_id,
+			final LocalDate start_date, final String paytermtype,
+			final Long contractPeriod, Long clientId,boolean billalign) { 
+		this.billingFrequency = paytermtype;
+		this.chargeCode = null;
+		this.chargeDuration = null;
+		this.chargeType = null;
+		this.clientId = clientId;
+		this.durationType = null;
+		this.modifiedParameters = modifiedParameters;
+		this.planid = plan_id;
+		this.price = null;
+		this.serviceId = null;
+		this.serviceStatus = null;
+		this.serviceType = null;
+		this.startDate = start_date;
+		this.contractPeriod = contractPeriod;
+		this.billAlign=billalign;
+	}
+
+	public Long getPlanid() {
+		return planid;
+	}
+
+	public String getBillingFrequency() {
+		return billingFrequency;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public Long getServiceStatus() {
+		return serviceStatus;
+	}
+
+	public Long getChargeType() {
+		return chargeType;
+	}
+
+	public String getChargeDuration() {
+		return chargeDuration;
+	}
+
+	public Long getDurationType() {
+		return durationType;
+	}
+
+	public Long getChargeCode() {
+		return chargeCode;
+	}
+
+	public LocalDate getStartDate() {
+		return startDate;
+	}
+
+	public String[] getServiceType() {
+		return serviceType;
+	}
+
+	public int[] getServiceId() {
+		return serviceId;
+	}
+
+	public Set<String> getModifiedParameters() {
+		return modifiedParameters;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public Long getContractPeriod() {
+		return contractPeriod;
+	}
+
+	public boolean isBillAlign() {
+		return billAlign;
+	}
+	
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderData.java
new file mode 100644
index 0000000..6138dc5
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderData.java
@@ -0,0 +1,219 @@
+package org.mifosplatform.portfolio.order.data;
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.payterms.data.PaytermData;
+import org.mifosplatform.portfolio.plan.data.PlanCodeData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+
+
+public class OrderData {
+	private final Long id;
+	private final Long pdid;
+	private final Long pcid;
+	private final String service_code;
+	private final String plan_code;
+	private final String chargeCode;
+	private  double price;
+	private final String variant;
+	private final EnumOptionData status;
+	private final Long period;
+	private LocalDate startDate;
+	private LocalDate endDate;
+	private String billingFrequency;
+	private final List<PlanCodeData> plandata;
+	private  List<PaytermData> paytermdata;
+	private final  List<SubscriptionData> subscriptiondata;
+
+	public OrderData(final Long id,final Long did,final Long cid, final String service_code,final String plan_code,final double price,final String variant,final String charge_code)
+	{
+		this.id=id;
+		this.pcid=did;
+		this.pdid=cid;
+		this.service_code=service_code;
+		this.plan_code=plan_code;
+		this.price=price;
+		this.variant=variant;
+		this.chargeCode=charge_code;
+		this.plandata=null;
+		this.paytermdata=null;
+		this.subscriptiondata=null;
+		this.status=null;
+		this.period=null;
+	}
+
+	public OrderData(List<PlanCodeData> allowedtypes, List<PaytermData> data, List<SubscriptionData> subscription)
+	{
+		this.id=null;
+		this.plan_code=null;
+		this.pcid=null;
+		this.pdid=null;
+		this.service_code=null;
+	 this.startDate=new LocalDate();
+		this.variant=null;
+		this.chargeCode=null;
+		this.paytermdata=data;
+		this.plandata=allowedtypes;
+		this.subscriptiondata=subscription;
+		this.status=null;
+		this.period=null;
+	}
+
+
+
+
+
+
+
+
+
+
+	public OrderData(Long id, Long plan_id, LocalDate start_date,
+			Long billing_frequency, Long contarctPeriod) {
+
+		this.id=id;
+		this.pdid=plan_id;
+		this.plan_code=null;
+		this.status=null;
+		this.period=contarctPeriod;
+		this.pcid=billing_frequency;
+		this.service_code=null;
+
+		this.startDate=start_date;
+		this.variant=null;
+		this.chargeCode=null;
+		this.paytermdata=null;
+		this.plandata=null;
+		this.subscriptiondata=null;
+
+	}
+
+	public OrderData(List<PlanCodeData> allowedtypes, List<PaytermData> data1,
+			List<SubscriptionData> contractPeriod, OrderData data) {
+
+		this.id=data.getId();
+		this.pdid=data.getPdid();
+		this.plan_code=data.getPlan_code();
+		this.status=null;
+		this.period=data.getPeriod();
+		this.pcid=data.getPcid();
+		this.service_code=null;
+
+		this.startDate=data.getStartDate();
+		this.variant=null;
+		this.chargeCode=null;
+		this.paytermdata=data1;
+		this.plandata=allowedtypes;
+		this.subscriptiondata=contractPeriod;
+
+	}
+
+	public OrderData(Long id, Long planId, String plancode,
+			EnumOptionData status1, LocalDate startDate, LocalDate endDate,
+			double price) {
+		this.id=id;
+		this.pdid=planId;
+		this.plan_code=plancode;
+		this.status=status1;
+		this.period=null;
+		this.startDate=startDate;
+		this.endDate=endDate;
+		this.pcid=null;
+		this.service_code=null;
+		this.price=price;
+		this.variant=null;
+		this.chargeCode=null;
+		this.paytermdata=null;
+		this.plandata=null;
+		this.subscriptiondata=null;
+	}
+
+	public OrderData(Long id, Long orderId, Long serviceId, Long status,String serviceType) {
+
+		this.id=id;
+		this.pdid=orderId;
+		this.plan_code=null;
+		this.status=null;
+		this.period=status;
+		this.startDate=null;
+		this.endDate=null;
+		this.pcid=serviceId;
+		this.service_code=serviceType;
+		this.billingFrequency=serviceType;
+		this.variant=null;
+		this.chargeCode=null;
+		this.paytermdata=null;
+		this.plandata=null;
+		this.subscriptiondata=null;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public Long getPdid() {
+		return pdid;
+	}
+
+	public Long getPcid() {
+		return pcid;
+	}
+
+	public String getService_code() {
+		return service_code;
+	}
+
+
+
+	public LocalDate getEndDate() {
+		return endDate;
+	}
+
+	public EnumOptionData getStatus() {
+		return status;
+	}
+
+	public Long getPeriod() {
+		return period;
+	}
+
+	public LocalDate getStartDate() {
+		return startDate;
+	}
+
+	public String getPlan_code() {
+		return plan_code;
+	}
+
+	public double getPrice() {
+		return price;
+	}
+
+	public String getVariant() {
+		return variant;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public List<PlanCodeData> getPlandata() {
+		return plandata;
+	}
+
+	public List<PaytermData> getPaytermdata() {
+		return paytermdata;
+	}
+
+	public List<SubscriptionData> getSubscriptiondata() {
+		return subscriptiondata;
+	}
+public void setPaytermData(List<PaytermData> data)
+{
+this.paytermdata=data;
+}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderPriceData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderPriceData.java
new file mode 100644
index 0000000..07fe28c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderPriceData.java
@@ -0,0 +1,111 @@
+package org.mifosplatform.portfolio.order.data;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+public class OrderPriceData {
+
+	private final Long id;
+	private final Long orderId;
+	private final Long serviceId;
+	private final String chargeCode;
+	private final String chargeType;
+	private final String chargeDuration;
+	private final String durationType;
+	private final BigDecimal price;
+
+	private Date invoiceTillDate;
+	private Long createdBy;
+	private Date createdDate;
+	private Date lastModifiedDate;
+	private Long lastModifiedBy;
+
+	public OrderPriceData(Long id, Long orderId, Long serviceId,
+			String chargeCode, String chargeType, String chargeDuration,
+			String durationtype, BigDecimal price) {
+
+		this.id=id;
+		this.orderId=orderId;
+		this.serviceId=serviceId;
+		this.chargeCode=chargeCode;
+		this.chargeType=chargeType;
+		this.chargeDuration=chargeDuration;
+		this.durationType=durationtype;
+		this.price=price;
+
+
+	}
+
+
+
+	public OrderPriceData(Long id, Long orderId, Long serviceId,
+			String chargeCode, String chargeType, String chargeDuration,
+			String durationType, Date invoiceTillDate, BigDecimal price,
+			Long createdbyId, Date createdDate, Date lastModefiedDate,
+			Long lastModefiedId) {
+		this.id=id;
+		this.orderId=orderId;
+		this.serviceId=serviceId;
+		this.chargeCode=chargeCode;
+		this.chargeType=chargeType;
+		this.chargeDuration=chargeDuration;
+		this.durationType=durationType;
+		this.price=price;
+	}
+
+
+
+	public Long getId() {
+		return id;
+	}
+
+	public Long getOrderId() {
+		return orderId;
+	}
+
+	public Long getServiceId() {
+		return serviceId;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public String getChargeType() {
+		return chargeType;
+	}
+
+	public String getChargeDuration() {
+		return chargeDuration;
+	}
+
+	public String getDurationType() {
+		return durationType;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public Date getInvoiceTillDate() {
+		return invoiceTillDate;
+	}
+
+	public Long getCreatedBy() {
+		return createdBy;
+	}
+
+	public Date getCreatedDate() {
+		return createdDate;
+	}
+
+	public Date getLastModifiedDate() {
+		return lastModifiedDate;
+	}
+
+	public Long getLastModifiedBy() {
+		return lastModifiedBy;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderingData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderingData.java
new file mode 100644
index 0000000..e38e48d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/OrderingData.java
@@ -0,0 +1,19 @@
+package org.mifosplatform.portfolio.order.data;
+
+import org.mifosplatform.portfolio.order.data.OrderData;
+
+public class OrderingData {
+
+	private final OrderData data;
+
+	public OrderingData(final OrderData datas)
+	{
+		this.data=datas;
+	}
+
+	public OrderData getData() {
+		return data;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/SavingStatusEnumaration.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/SavingStatusEnumaration.java
new file mode 100644
index 0000000..1d7a45c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/data/SavingStatusEnumaration.java
@@ -0,0 +1,36 @@
+package org.mifosplatform.portfolio.order.data;
+
+
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.plan.domain.StatusTypeEnum;
+
+public class SavingStatusEnumaration {
+
+	public static EnumOptionData interestCompoundingPeriodType(final int id) {
+		return interestCompoundingPeriodType(StatusTypeEnum.fromInt(id));
+	}
+
+	public static EnumOptionData interestCompoundingPeriodType(final StatusTypeEnum type) {
+		final String codePrefix = "deposit.interest.compounding.period.";
+		EnumOptionData optionData = null;
+		switch (type) {
+		case ACTIVE:
+			optionData = new EnumOptionData(StatusTypeEnum.ACTIVE.getValue().longValue(), codePrefix + StatusTypeEnum.ACTIVE.getCode(), "ACTIVE");
+			break;
+		case INACTIVE:
+			optionData = new EnumOptionData(StatusTypeEnum.INACTIVE.getValue().longValue(), codePrefix + StatusTypeEnum.INACTIVE.getCode(), "INACTIVE");
+			break;
+
+		case CANCELLED:
+			optionData = new EnumOptionData(StatusTypeEnum.CANCELLED.getValue().longValue(), codePrefix + StatusTypeEnum.CANCELLED.getCode(), "CANCELLED");
+			break;
+
+		default:
+			optionData = new EnumOptionData(StatusTypeEnum.INVALID.getValue().longValue(), StatusTypeEnum.INVALID.getCode(), "INVALID");
+			break;
+		}
+		return optionData;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/Order.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/Order.java
new file mode 100644
index 0000000..08ef651
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/Order.java
@@ -0,0 +1,170 @@
+package org.mifosplatform.portfolio.order.domain;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+import org.hibernate.annotations.LazyCollection;
+import org.hibernate.annotations.LazyCollectionOption;
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+
+@Entity
+@Table(name = "orders")
+public class Order {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name = "client_id")
+	private Long clientId;
+
+	@Column(name = "plan_id")
+	private Long plan_id;
+
+	@Column(name = "order_status")
+	private Long status;
+
+	@Column(name = "transaction_type")
+	private String transaction_type;
+
+	@Column(name = "billing_frequency")
+	private String billing_frequency;
+
+	@Column(name = "next_billable_day")
+	private Date next_billable_day;
+
+	@Column(name = "start_date")
+	private Date start_date;
+
+	@Temporal(TemporalType.TIMESTAMP)
+	@Column(name = "end_date")
+	private Date end_date;
+
+	@Column(name = "contract_period")
+	private Long contarctPeriod;
+
+	@Column(name = "is_deleted")
+	private char is_deleted;
+
+	@Column(name = "billing_align")
+	private char billingAlign;
+
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@OneToMany(cascade = CascadeType.ALL, mappedBy = "orders", orphanRemoval = true)
+	private List<OrderLine> services = new ArrayList<OrderLine>();
+
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@OneToMany(cascade = CascadeType.ALL, mappedBy = "orders", orphanRemoval = true)
+	private List<OrderPrice> price = new ArrayList<OrderPrice>();
+
+	public Order() {
+	}
+
+	public Order(Long client_id, Long plan_id, Long status, Long duration_type,String billingFreq,
+			LocalDate startDate, LocalDate endDate, Long contract,
+			List<OrderLine> serviceDetails, List<OrderPrice> orderprice,char billalign) {
+		this.clientId = client_id;
+		this.plan_id = plan_id;
+		this.status = status;
+		this.transaction_type = "Add Order";
+		this.billing_frequency =billingFreq;
+		this.start_date = startDate.toDate();
+		if (endDate != null)
+			this.end_date = endDate.toDate();
+		this.services = serviceDetails;
+		this.price = orderprice;
+		this.contarctPeriod = contract;
+		this.billingAlign=billalign;
+		this.is_deleted='n';
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public Long getClientId() {
+		return clientId;
+	}
+
+	public Long getPlan_id() {
+		return plan_id;
+	}
+
+	public Long getStatus() {
+		return status;
+	}
+
+	public String getTransaction_type() {
+		return transaction_type;
+	}
+
+	public String getBilling_frequency() {
+		return billing_frequency;
+	}
+
+
+	public Date getNext_billable_day() {
+		return next_billable_day;
+	}
+
+	public Date getStart_date() {
+		return start_date;
+	}
+
+	public Date getEnd_date() {
+		return end_date;
+	}
+
+	public List<OrderLine> getServices() {
+		return services;
+	}
+
+	public List<OrderPrice> getPrice() {
+		return price;
+	}
+
+	public void addServiceDeatils(OrderLine orderDetail) {
+		orderDetail.update(this);
+		this.services.add(orderDetail);
+
+	}
+
+	public void addOrderDeatils(OrderPrice price) {
+		price.update(this);
+		this.price.add(price);
+
+	}
+
+	public Long getContarctPeriod() {
+		return contarctPeriod;
+	}
+
+	public void delete() {
+		this.is_deleted = 'y';
+
+	}
+
+	public void update(LocalDate currentDate) {
+
+		if (this.status != 3) {
+			this.end_date = currentDate.toDate();
+
+			this.status = new Integer(3).longValue();
+		}
+
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderCommanValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderCommanValidator.java
new file mode 100644
index 0000000..6c97476
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderCommanValidator.java
@@ -0,0 +1,33 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+
+
+public class OrderCommanValidator {
+
+	private final OrdersCommand command;
+
+	public OrderCommanValidator(final OrdersCommand command) {
+		this.command=command;
+	}
+
+
+	public void validateForCreate() {
+         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("plan");
+		baseDataValidator.reset().parameter("planCode").value(command.getPlanid()).notBlank();
+		//baseDataValidator.reset().parameter("subscription_type").value(command.getSubscription_type()).notBlank().notNull();
+		baseDataValidator.reset().parameter("start_date").value(command.getStartDate()).notBlank();
+		baseDataValidator.reset().parameter("paytermCode").value(2).notBlank();
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+	}
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLine.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLine.java
new file mode 100644
index 0000000..f3dc7f7
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLine.java
@@ -0,0 +1,92 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "order_line")
+public class OrderLine {
+
+@Id
+@GeneratedValue
+@Column(name="id")
+private Long id;
+
+
+@ManyToOne
+@JoinColumn(name="order_id")
+	private Order orders;
+
+	@Column(name = "service_id")
+	private Long service_id;
+
+	@Column(name = "service_type")
+	private String service_type;
+
+	@Column(name = "service_status")
+	private Long service_status;
+
+	@Column(name = "is_deleted")
+	private boolean is_deleted;
+
+	public OrderLine()
+	{}
+
+	public OrderLine(final Long service_id,final String service_type,final Long service_status,final boolean isdeleted )
+	{
+		this.orders=null;
+		this.service_id=service_id;
+		this.service_status=service_id;
+		this.is_deleted=isdeleted;
+		this.service_type=service_type;
+
+	}
+public OrderLine(final String service_code)
+{
+	this.service_type=service_code;
+	}
+
+	public Order getOrder_id() {
+		return orders;
+	}
+
+
+	public Long getService_id() {
+		return service_id;
+	}
+
+
+	public String getService_type() {
+		return service_type;
+	}
+
+
+	public Long getService_status() {
+		return service_status;
+	}
+
+
+	public boolean isIs_deleted() {
+		return is_deleted;
+	}
+	public  void update(Order order2)
+	{
+		this.orders=order2;
+
+	}
+
+	public void delete() {
+
+		this.is_deleted=true;
+
+
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLineRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLineRepository.java
new file mode 100644
index 0000000..ae73369
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderLineRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import org.mifosplatform.portfolio.order.domain.OrderLine;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface OrderLineRepository extends
+JpaRepository<OrderLine, Long>,
+JpaSpecificationExecutor<OrderLine>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPrice.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPrice.java
new file mode 100644
index 0000000..bcc58d2
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPrice.java
@@ -0,0 +1,202 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.OneToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+
+@Entity
+@Table(name = "order_price")
+public class OrderPrice {
+
+	@Id
+	@GeneratedValue
+	@Column(name = "id")
+	private Long id;
+
+	@Column(name = "service_id")
+	private Long serviceId;
+
+	@Column(name = "charge_code")
+	private String chargeCode;
+
+	@Column(name = "charge_type")
+	private String chargeType;
+
+	@Column(name = "price")
+	private BigDecimal price;
+
+	@Column(name = "charge_duration")
+	private String chargeDuration;
+
+	@Column(name = "duration_type")
+	private String durationType;
+
+	@Column(name = "invoice_tilldate")
+	private Date invoiceTillDate;
+	
+	@Column(name = "bill_start_date")
+	private Date billStartDate;
+	
+	@Column(name = "bill_end_date")
+	private Date billEndDate;
+
+	@Column(name = "is_deleted")
+	private boolean isDeleted;
+
+	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
+	@JoinColumn(name = "order_id", insertable = true, updatable = true, nullable = true, unique = true)
+	private Order orders;
+
+	public OrderPrice(final Long serviceId, final String chargeCode,
+			final String chargeType, final BigDecimal price,
+			final Date invoiceTillDate, final String chargetype,
+			final String chargeduration, final String durationType,
+			final Date billStartDate,final Date billEndDate) {
+
+		this.orders = null;
+		this.serviceId = serviceId;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargetype;
+		this.chargeDuration = chargeduration;
+		this.durationType = durationType;
+		this.price = price;
+		this.invoiceTillDate = invoiceTillDate;
+		this.billStartDate=billStartDate;
+		this.billEndDate=billEndDate;
+		
+
+	}
+
+	public OrderPrice() {
+		// TODO Auto-generated constructor stub
+	}
+
+	public OrderPrice(Long id2, Order order, Long serviceId, String chargeCode,
+			String chargeType, String chargeDuration, String durationType,
+			Date invoiceTillDate, BigDecimal price, Long createdBy,
+			Date createdDate, Date lastModifiedDate, Long lastModifiedBy) {
+
+		this.orders = order;
+		this.serviceId = serviceId;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargeType;
+		this.chargeDuration = chargeDuration;
+		this.durationType = durationType;
+		this.price = price;
+		this.invoiceTillDate = invoiceTillDate;
+
+	}
+
+	public OrderPrice(Long id, Long orderId, Long serviceId,
+			String chargeCode, String chargeType, String chargeDuration,
+			String durationType, Date invoiceTillDate, BigDecimal price,
+			Long createdBy, Date createdDate, Date lastModifiedDate,
+			Long lastModifiedBy) {
+
+		this.orders = null;
+		this.serviceId = serviceId;
+		this.chargeCode = chargeCode;
+		this.chargeType = chargeType;
+		this.chargeDuration = chargeDuration;
+		this.durationType = durationType;
+		this.price = price;
+		this.invoiceTillDate = invoiceTillDate;
+
+
+
+
+	}
+
+	public Long getOrderId() {
+		return orderId;
+	}
+
+	public void setOrderId(Long orderId) {
+		this.orderId = orderId;
+	}
+
+	@Transient
+	private Long orderId;
+
+	public Long getServiceId() {
+		return serviceId;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public String getChargeType() {
+		return chargeType;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public String getChargeDuration() {
+		return chargeDuration;
+	}
+
+	public String getDurationType() {
+		return durationType;
+	}
+
+	public Date getInvoiceTillDate() {
+		return invoiceTillDate;
+	}
+
+	public void setInvoiceTillDate(Date invoiceTillDate) {
+		this.invoiceTillDate = invoiceTillDate;
+	}
+
+	public boolean isIsDeleted() {
+		return isDeleted;
+	}
+
+	public Order getOrder() {
+		return orders;
+	}
+
+	public void update(Order order) {
+		this.orders = order;
+
+	}
+
+	public void delete() {
+		this.isDeleted = true;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setChargeDuration(String chargeDuration) {
+		this.chargeDuration = chargeDuration;
+	}
+
+	public Date getBillStartDate() {
+		return billStartDate;
+	}
+
+	public Date getBillEndDate() {
+		return billEndDate;
+	}
+
+	public Order getOrders() {
+		return orders;
+	}
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPriceRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPriceRepository.java
new file mode 100644
index 0000000..2e3c9d4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderPriceRepository.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import org.mifosplatform.portfolio.order.domain.OrderPrice;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface OrderPriceRepository extends
+
+JpaRepository<OrderPrice, Long>,
+JpaSpecificationExecutor<OrderPrice>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderReadPlatformImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderReadPlatformImpl.java
new file mode 100644
index 0000000..2945224
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderReadPlatformImpl.java
@@ -0,0 +1,143 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.data.PriceData;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+
+public class OrderReadPlatformImpl {
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+
+
+	public OrderReadPlatformImpl(PlatformSecurityContext context2,
+			JdbcTemplate jdbcTemplate2) {
+
+		this.context=context2;
+		this.jdbcTemplate=jdbcTemplate2;
+
+	}
+
+
+
+	public List<ServiceData> retrieveAllServices(Long plan_code) {
+
+
+		PlanMapper mapper = new PlanMapper();
+
+		String sql = "select " + mapper.schema()+" and da.plan_id = '"+plan_code+"'" ;
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+	private static final class PlanMapper implements RowMapper<ServiceData> {
+
+		public String schema() {
+			return "da.id as id,se.id as serviceId, da.service_code as service_code, da.plan_id as plan_code"
+					+" from plan_detail da,service se where da.service_code = se.service_code";
+
+		}
+
+		@Override
+		public ServiceData mapRow(final ResultSet rs,
+				@SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id = rs.getLong("id");
+			String serviceCode = rs.getString("service_code");
+			String planCode = rs.getString("plan_code");
+			Long serviceid = rs.getLong("serviceId");
+
+
+
+
+			return new ServiceData(id,serviceid,serviceCode, planCode,null,null);
+
+		}
+	}
+		public List<PriceData> retrieveAllPrices(Long plan_code,String billingFreq) {
+
+
+			PriceMapper mapper1 = new PriceMapper();
+
+			String sql = "select " + mapper1.schema()+" and da.plan_code = '"+plan_code+"' and (c.billfrequency_code='"+billingFreq+"'  or c.billfrequency_code='Once')";
+			return this.jdbcTemplate.query(sql, mapper1, new Object[] {});
+
+		}
+
+		private static final class PriceMapper implements RowMapper<PriceData> {
+
+			public String schema() {
+				return "da.id as id, se.id as serviceId,da.service_code as service_code, da.charge_code as charge_code,da.charging_variant as charging_variant,"
+        +" c.charge_type as charge_type,c.charge_duration as charge_duration,c.duration_type as duration_type,"
+						+"da.price as price from plan_pricing da,charge_codes c,service se where da.charge_code = c.charge_code and da.service_code=se.service_code";
+
+			}
+
+			@Override
+			public PriceData mapRow(final ResultSet rs,
+					@SuppressWarnings("unused") final int rowNum)
+					throws SQLException {
+
+				Long id = rs.getLong("id");
+				String service_code = rs.getString("service_code");
+				String charge_code = rs.getString("charge_code");
+				String charging_variant = rs.getString("charging_variant");
+				BigDecimal price=rs.getBigDecimal("price");
+				String charge_type = rs.getString("charge_type");
+				String charge_duration = rs.getString("charge_duration");
+				String duration_type = rs.getString("duration_type");
+				Long serviceid = rs.getLong("serviceId");
+				return new PriceData(id, service_code, charge_code,charging_variant,price,charge_type,charge_duration,duration_type,serviceid);
+
+			}
+	}
+public PlanData retrievePlanData(Long id) {
+
+
+	PlanMapper1 mapper2 = new PlanMapper1();
+
+			String sql = "select " + mapper2.schema()+" where da.id = "+id ;
+			return this.jdbcTemplate.queryForObject(sql, mapper2, new Object[] {});
+
+		}
+
+		private static final class PlanMapper1 implements RowMapper<PlanData> {
+
+			public String schema() {
+				return "da.id as id, da.plan_code as plan_code, da.start_date as start_date,da.end_date as end_date,"
+						+ "da.plan_status as plan_status, da.contract_period as contract_period from plan_master da";
+
+			}
+
+			@Override
+			public PlanData mapRow(final ResultSet rs,
+					@SuppressWarnings("unused") final int rowNum)
+					throws SQLException {
+
+				Long id = rs.getLong("id");
+				String plan_code = rs.getString("plan_code");
+				Long charge_code =rs.getLong("plan_status");
+				String contract_period = rs.getString("contract_period");
+				LocalDate startDate=JdbcSupport.getLocalDate(rs,"start_date");
+				LocalDate endDate=JdbcSupport.getLocalDate(rs,"end_date");
+				
+
+
+				return new PlanData(id, plan_code, charge_code,contract_period,startDate,endDate);
+
+			}
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderRepository.java
new file mode 100644
index 0000000..3472ee2
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/domain/OrderRepository.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.order.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface OrderRepository  extends
+JpaRepository<Order, Long>,
+JpaSpecificationExecutor<Order>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformService.java
new file mode 100644
index 0000000..3ecfce8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformService.java
@@ -0,0 +1,22 @@
+package org.mifosplatform.portfolio.order.service;
+
+import java.util.List;
+
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.payterms.data.PaytermData;
+import org.mifosplatform.portfolio.plan.data.PlanCodeData;
+
+public interface OrderReadPlatformService {
+
+	List<PlanCodeData>  retrieveAllPlatformData();
+	List<PaytermData>  retrieveAllPaytermData();
+
+	List<OrderData> retrieveOrderLineData(Long orderId);
+	OrderPriceData retrieveOrderPriceData(Long orderId);
+
+OrderData retrieveOrderData(Long orderId);
+void retrieveInvoice(Long clientId);
+List<PaytermData> getChargeCodes(Long planCode);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformServiceImpl.java
new file mode 100644
index 0000000..b9b9612
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderReadPlatformServiceImpl.java
@@ -0,0 +1,732 @@
+package org.mifosplatform.portfolio.order.service;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.order.domain.OrderRepository;
+import org.mifosplatform.portfolio.payterms.data.PaytermData;
+import org.mifosplatform.portfolio.plan.data.PlanCodeData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.service.PriceReadPlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+import com.lowagie.text.Document;
+import com.lowagie.text.Element;
+import com.lowagie.text.Font;
+import com.lowagie.text.FontFactory;
+import com.lowagie.text.Image;
+import com.lowagie.text.Paragraph;
+import com.lowagie.text.pdf.CMYKColor;
+import com.lowagie.text.pdf.PdfContentByte;
+import com.lowagie.text.pdf.PdfPCell;
+import com.lowagie.text.pdf.PdfPTable;
+import com.lowagie.text.pdf.PdfWriter;
+
+@Service
+public class OrderReadPlatformServiceImpl implements OrderReadPlatformService
+
+{
+
+
+	  private final JdbcTemplate jdbcTemplate;
+	    private final PlatformSecurityContext context;
+	    private OrderRepository orderRepository;
+
+        private  static  PriceReadPlatformService priceReadPlatformService;
+	    @Autowired
+	    public OrderReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource,
+			final PriceReadPlatformService priceReadPlatformService,final OrderRepository repository) {
+	        this.context = context;
+	        this.jdbcTemplate = new JdbcTemplate(dataSource);
+	        this.orderRepository=repository;
+	       OrderReadPlatformServiceImpl.priceReadPlatformService=priceReadPlatformService;
+
+	    }
+	@Override
+	public List<PlanCodeData> retrieveAllPlatformData() {
+		  context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.plan_code as plan_code from plan_master s where s.plan_status=1 and  s.is_deleted='n'  ";
+
+	        RowMapper<PlanCodeData> rm = new PeriodMapper();
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] {});
+	}
+
+	 private static final class PeriodMapper implements RowMapper<PlanCodeData> {
+
+	        @Override
+	        public PlanCodeData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String plan_code = rs.getString("plan_code");
+
+	            List<ServiceData> services= priceReadPlatformService.retrievePrcingDetails(id);
+	            return new PlanCodeData(id,plan_code,services);
+
+	        }
+
+
+	 }
+
+	@Override
+	public List<PaytermData> retrieveAllPaytermData() {
+
+
+		 context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.paymode_code as payterm_type,s.paymode_description as units from paymodes s";
+
+	        RowMapper<PaytermData> rm = new PaytermMapper();
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] {});
+	}
+
+	 private static final class PaytermMapper implements RowMapper<PaytermData> {
+
+	        @Override
+	        public PaytermData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String paytermtype = rs.getString("payterm_type");
+	            String units = rs.getString("units");
+
+  String data=units.concat(paytermtype);
+	            return new PaytermData(id,data);
+	        }
+
+
+	}
+
+
+	@Override
+	public OrderPriceData retrieveOrderPriceData(Long orderId) {
+		 context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.order_id as order_id,s.charge_code as charge_code,s.service_id as service_id,s.charge_type as charge_type,s.charge_duration as charge_duration,"
+                    +"s.duration_type as duration_type,s.price as price from order_price s where s.order_id = ?";
+
+	        RowMapper<OrderPriceData> rm = new OrderPriceMapper();
+
+	        return this.jdbcTemplate.queryForObject(sql, rm, new Object[] { orderId });
+	}
+
+	 private static final class OrderPriceMapper implements RowMapper<OrderPriceData> {
+
+	        @Override
+	        public OrderPriceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+
+			  Long id = rs.getLong("id");
+			  Long orderId = rs.getLong("order_id");
+			  Long serviceId = rs.getLong("service_id");
+	            String chargeCode = rs.getString("charge_code");
+	            String chargeType = rs.getString("charge_type");
+	            String chargeDuration = rs.getString("charge_duration");
+	            String durationtype = rs.getString("duration_type");
+	            BigDecimal price=rs.getBigDecimal("price");
+
+	            return new OrderPriceData(id,orderId,serviceId,chargeCode,chargeType,chargeDuration,durationtype,price);
+	        }
+
+	}
+
+	@Override
+	public List<OrderData> retrieveOrderLineData(Long orderId) {
+
+
+		 context.authenticatedUser();
+
+	        String sql = "select o.id as id,o.order_id as order_id,o.service_id as service_id,o.service_type as service_type,"
+				+"o.service_status as service_status from order_line o where o.order_id= ?";
+
+
+	        RowMapper<OrderData> rm = new OrderLineMapper();
+
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] { orderId });
+	}
+
+	 private static final class OrderLineMapper implements RowMapper<OrderData> {
+
+	        @Override
+	        public OrderData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+
+			  Long id = rs.getLong("id");
+			  Long orderId = rs.getLong("order_id");
+			  Long serviceId = rs.getLong("service_id");
+	            String serviceType = rs.getString("service_type");
+	            Long status = rs.getLong("service_status");
+
+
+	            return new OrderData(id,orderId,serviceId,status,serviceType);
+	}
+
+	}
+	@SuppressWarnings({ "unchecked", "rawtypes" })
+	@Override
+	public void retrieveInvoice(Long clientId) {
+		 context.authenticatedUser();
+
+	        String sql = "select *from bill_master b,bill_details be,client_address cd,m_client mc where b.id = bill_id and b.client_id=cd.client_id and mc.id=cd.client_id and mc.id ="+clientId+" ;";
+
+
+
+	       this.jdbcTemplate.query(sql, new invoice(), new Object[] {});
+	}
+
+
+	private static final class invoice<T> implements RowMapper<T> {
+
+	        @Override
+	        public T mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+			try
+			{
+			String fileLocation="D:"+File.separator+"invoice"+File.separator;
+				if (!new File(fileLocation).isDirectory()) {
+					   new File(fileLocation).mkdirs();
+					  }
+
+			Document document = new Document();
+
+			PdfWriter writer = PdfWriter.getInstance(document,
+					new FileOutputStream("invoice"+rs.getInt("bill_no")+".pdf"));
+
+
+			document.open();
+			PdfContentByte pdfContentByte = writer.getDirectContent();
+			Font b = new Font(Font.BOLD + Font.BOLD,8);
+			Font b1 = new Font(Font.BOLD + Font.UNDERLINE + Font.BOLDITALIC+Font.TIMES_ROMAN,8);
+
+
+			pdfContentByte.beginText();
+
+			PdfPTable table = new PdfPTable(11);
+			table.setWidthPercentage(100);
+
+			PdfPCell cell1 = new PdfPCell(
+					(new Paragraph("Statment of Invoice", FontFactory.getFont(FontFactory.HELVETICA,12, Font.BOLD))));
+			cell1.setColspan(11);
+			cell1.setHorizontalAlignment(Element.ALIGN_CENTER);
+			cell1.setPadding(10.0f);
+			table.addCell(cell1);
+			PdfPCell cell = new PdfPCell();
+			cell.setColspan(2);
+			Paragraph para = new Paragraph("Name           :", b1);
+			Paragraph add = new Paragraph("  ", b);
+			Paragraph addr = new Paragraph("Address        :", b);
+			Paragraph branch = new Paragraph("Branch       :", b);
+			branch.setSpacingBefore(12);
+
+			cell.addElement(para);
+			cell.addElement(addr);
+			cell.addElement(branch);
+			cell.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell);
+			PdfPCell cell0 = new PdfPCell();
+			Paragraph add0 = new Paragraph(""+rs.getString("firstname")+"   "+rs.getString("lastname")+"", b);
+			Paragraph add1 = new Paragraph(""+rs.getString("address_no")+","+rs.getString("street"), b);
+			add1.setSpacingBefore(10);
+			Paragraph add2 = new Paragraph(""+rs.getString("city")+","+rs.getString("state")+"-"+rs.getString("zip"), b);
+			cell0.setColspan(4);
+			cell0.disableBorderSide(PdfPCell.LEFT);
+			cell0.addElement(add0);
+			cell0.addElement(add1);
+			cell0.addElement(add2);
+			table.addCell(cell0);
+
+			 Image image = Image.getInstance("logo.jpg");
+			 image.scaleAbsolute(60,60);
+			 PdfPCell cell2 = new PdfPCell();
+			 cell2.addElement(image);
+			 cell2.disableBorderSide(PdfPCell.TOP);
+				 cell2.disableBorderSide(PdfPCell.BOTTOM);
+				 cell2.disableBorderSide(PdfPCell.LEFT);
+				cell2.disableBorderSide(PdfPCell.RIGHT);
+			cell2.setColspan(2);
+			table.addCell(cell2);
+			 PdfPCell cell02 = new PdfPCell();
+			 Paragraph addr1 = new Paragraph("Hugo Technologies LLP",
+				       FontFactory.getFont(FontFactory.HELVETICA, 8, Font.BOLD,
+								       new CMYKColor(0, 255, 255,17)));
+			 Paragraph addr2 = new Paragraph("# 501, Sai Balaji Cubicles,", b);
+			 Paragraph addr3 = new Paragraph("Raghavendra Society, Kondapur,", b);
+			 Paragraph addr4 = new Paragraph(" Hyderabad - 500 084, AP, India.",b);
+			 Paragraph addr5 = new Paragraph(" Tel:	+91-40-65141823",b);
+			 Paragraph addr6 = new Paragraph("www.hugotechnologies.com",b);
+			 cell02.addElement(addr1);
+			 cell02.addElement(addr2);
+			 cell02.addElement(addr3);
+			 cell02.addElement(addr4);
+			 cell02.addElement(addr5);
+			 cell02.addElement(addr6);
+
+			 cell02.disableBorderSide(PdfPCell.TOP);
+			 cell02.disableBorderSide(PdfPCell.BOTTOM);
+			 cell02.disableBorderSide(PdfPCell.LEFT);
+			cell2.disableBorderSide(PdfPCell.RIGHT);
+			cell02.setColspan(3);
+			table.addCell(cell02);
+			PdfPCell cell3 = new PdfPCell();
+			// cell3.setPadding (1.0f);
+			Paragraph BillId = new Paragraph("Bill Id:   " + rs.getInt("id"), b);
+			cell3.setColspan(6);
+			cell3.addElement(BillId);
+			cell3.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell3);
+			PdfPCell cell12 = new PdfPCell();
+			Paragraph billNo = new Paragraph("billNo:"
+					+ rs.getString("bill_no"), b);
+			// billNo.setIndentationLeft(280);
+			Paragraph billDate = new Paragraph("Bill Date:"
+					+ JdbcSupport.getLocalDate(rs, "bill_date"), b);
+			// billDate.setIndentationLeft(280);
+			Paragraph BillPeriod = new Paragraph("Bill Period:"
+					+ rs.getString("bill_Period"), b);
+			// BillPeriod.setIndentationLeft(280);
+			Paragraph dueDate = new Paragraph("Due Date:"
+					+ JdbcSupport.getLocalDate(rs, "due_date"), b);
+			// dueDate.setIndentationLeft(280);
+
+			// cell12.disableBorderSide(PdfPCell.TOP);
+			// cell12.disableBorderSide(PdfPCell.BOTTOM);
+			cell12.disableBorderSide(PdfPCell.LEFT);
+			// cell12.disableBorderSide(PdfPCell.RIGHT);
+			cell12.addElement(billNo);
+			cell12.addElement(billDate);
+			cell12.addElement(BillPeriod);
+			cell12.setColspan(5);
+			cell12.addElement(dueDate);
+			table.addCell(cell12);
+			PdfPCell cell4 = new PdfPCell();
+
+			Paragraph previousbal = new Paragraph("Previous Balance:", b);
+			Paragraph previousamount = new Paragraph(""
+					+ rs.getDouble("previous_balance"), b);
+			cell4.setColspan(2);
+			cell4.addElement(previousbal);
+			cell4.addElement(previousamount);
+			cell4.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			// cell4.disableBorderSide(PdfPCell.LEFT);
+			cell4.disableBorderSide(PdfPCell.RIGHT);
+
+			table.addCell(cell4);
+			pdfContentByte.setTextMatrix(390, 405);
+
+			PdfPCell cell5 = new PdfPCell();
+			Paragraph adjstment = new Paragraph("Adjustment Amount:", b);
+			Paragraph adjstmentamount = new Paragraph(""
+					+ rs.getDouble("adjustment_amount"), b);
+			cell5.setColspan(2);
+			cell5.addElement(adjstment);
+			cell5.addElement(adjstmentamount);
+			cell5.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell5.disableBorderSide(PdfPCell.LEFT);
+			cell5.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell5);
+
+			PdfPCell cell6 = new PdfPCell();
+			Paragraph paid_amount = new Paragraph("paid_amount:", b);
+			Paragraph amount = new Paragraph("" + rs.getDouble("paid_amount"),
+					b);
+			cell6.setColspan(2);
+			cell6.addElement(paid_amount);
+			cell6.addElement(amount);
+			cell6.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell6.disableBorderSide(PdfPCell.LEFT);
+			cell6.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell6);
+
+			PdfPCell cell7 = new PdfPCell();
+			Paragraph charge_amount = new Paragraph("Charge Amount:", b);
+			Paragraph chargeamount = new Paragraph(""
+					+ rs.getDouble("charges_amount"), b);
+			cell7.setColspan(2);
+			cell7.addElement(charge_amount);
+			cell7.addElement(chargeamount);
+
+			cell7.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell7.disableBorderSide(PdfPCell.LEFT);
+			cell7.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell7);
+
+			PdfPCell cell8 = new PdfPCell();
+			Paragraph due_amount = new Paragraph("Due Amount:", b);
+			Paragraph dueamount = new Paragraph(
+					"" + rs.getDouble("due_amount"), b);
+			cell8.setColspan(3);
+			cell8.addElement(due_amount);
+			cell8.addElement(dueamount);
+
+			cell8.disableBorderSide(PdfPCell.TOP);
+			// cell5.disableBorderSide(PdfPCell.BOTTOM);
+			cell8.disableBorderSide(PdfPCell.LEFT);
+			// cell8.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell8);
+
+			PdfPCell cell9 = new PdfPCell();
+			Paragraph invoice = new Paragraph("Invoice Charges:", b);
+			// cell9.disableBorderSide(PdfPCell.LEFT);
+			cell9.disableBorderSide(PdfPCell.RIGHT);
+			cell9.addElement(invoice);
+			cell9.setColspan(4);
+			table.addCell(cell9);
+			PdfPCell cell10 = new PdfPCell();
+			Paragraph name = new Paragraph("User Name:", b);
+			cell10.disableBorderSide(PdfPCell.LEFT);
+			cell10.disableBorderSide(PdfPCell.RIGHT);
+			cell10.setColspan(4);
+			cell10.addElement(name);
+			table.addCell(cell10);
+
+			PdfPCell cell11 = new PdfPCell();
+			Paragraph Uname = new Paragraph("User:", b);
+			cell11.setColspan(3);
+			cell11.disableBorderSide(PdfPCell.LEFT);
+			cell10.disableBorderSide(PdfPCell.RIGHT);
+			cell11.addElement(Uname);
+			table.addCell(cell11);
+
+			PdfPCell cell13 = new PdfPCell();
+			Paragraph bill_No = new Paragraph("Bill No", b);
+			cell13.addElement(bill_No);
+			cell13.setColspan(1);
+			table.addCell(cell13);
+
+			PdfPCell cell14 = new PdfPCell();
+			Paragraph periodno = new Paragraph("Period", b);
+			cell14.addElement(periodno);
+			cell14.setColspan(1);
+			table.addCell(cell14);
+
+			PdfPCell cell15 = new PdfPCell();
+			Paragraph service = new Paragraph("Service Type", b);
+			cell15.addElement(service);
+			cell15.setColspan(1);
+			table.addCell(cell15);
+
+			PdfPCell cell16 = new PdfPCell();
+			Paragraph desc = new Paragraph("Description", b);
+			cell16.addElement(desc);
+			cell16.setColspan(1);
+			table.addCell(cell16);
+
+			PdfPCell cell18 = new PdfPCell();
+			Paragraph pack = new Paragraph("Package", b);
+			cell18.addElement(pack);
+			cell18.setColspan(1);
+			table.addCell(cell18);
+
+			PdfPCell cell17 = new PdfPCell();
+			Paragraph rate = new Paragraph("Rate", b);
+			cell17.addElement(rate);
+			cell17.setColspan(1);
+			table.addCell(cell17);
+
+			PdfPCell cell22 = new PdfPCell();
+			Paragraph quantity = new Paragraph("Quantity", b);
+			cell22.addElement(quantity);
+			cell22.setColspan(2);
+			table.addCell(cell22);
+
+			PdfPCell cell19 = new PdfPCell();
+			Paragraph amount1 = new Paragraph("Amount", b);
+			cell19.addElement(amount1);
+			cell16.setColspan(1);
+			table.addCell(cell19);
+
+			PdfPCell cell20 = new PdfPCell();
+			Paragraph tax = new Paragraph("Tax", b);
+			cell20.addElement(tax);
+			cell20.setColspan(1);
+			table.addCell(cell20);
+
+			PdfPCell cell21 = new PdfPCell();
+			Paragraph total = new Paragraph("Total", b);
+			cell21.addElement(total);
+			cell21.setColspan(2);
+			table.addCell(cell21);
+
+			PdfPCell cell23 = new PdfPCell();
+			Paragraph billid = new Paragraph("" + rs.getString("bill_no"), b);
+			cell23.addElement(billid);
+			cell23.setColspan(1);
+			table.addCell(cell23);
+
+			PdfPCell cell24 = new PdfPCell();
+			Paragraph period = new Paragraph("" + rs.getString("bill_Period"),
+					b);
+			cell24.addElement(period);
+			cell24.setColspan(1);
+			table.addCell(cell24);
+
+			PdfPCell cell25 = new PdfPCell();
+			Paragraph trans = new Paragraph(""
+					+ rs.getString("transaction_type"), b);
+			cell25.addElement(trans);
+			cell25.setColspan(1);
+			table.addCell(cell25);
+
+			PdfPCell cell26 = new PdfPCell();
+			Paragraph description = new Paragraph(""
+					+ rs.getString("description"), b);
+			cell26.addElement(description);
+			cell26.setColspan(1);
+			table.addCell(cell26);
+
+			PdfPCell cell27 = new PdfPCell();
+			Paragraph pack1 = new Paragraph("" + rs.getString("plan_code"), b);
+			cell27.addElement(pack1);
+			cell27.setColspan(1);
+			table.addCell(cell27);
+
+			PdfPCell cell28 = new PdfPCell();
+			Paragraph rate1 = new Paragraph("" + rs.getString("amount"), b);
+			cell28.addElement(rate1);
+			cell28.setColspan(1);
+			table.addCell(cell28);
+
+			PdfPCell cell29 = new PdfPCell();
+			Paragraph period1 = new Paragraph("" + rs.getString("bill_Period"),
+					b);
+			cell29.addElement(period1);
+			cell29.setColspan(2);
+			table.addCell(cell29);
+
+			PdfPCell cell30 = new PdfPCell();
+			Paragraph camount = new Paragraph(""
+					+ rs.getDouble("charges_amount"), b);
+			cell30.addElement(camount);
+			cell30.setColspan(1);
+			table.addCell(cell30);
+
+			PdfPCell cell31 = new PdfPCell();
+			Paragraph tamount = new Paragraph("" + rs.getDouble("tax_amount"),
+					b);
+			cell31.addElement(tamount);
+			cell31.setColspan(1);
+			table.addCell(cell31);
+
+			PdfPCell cell32 = new PdfPCell();
+			Paragraph bamount = new Paragraph("" + rs.getDouble("amount"), b);
+			cell32.addElement(bamount);
+			cell32.setColspan(1);
+			table.addCell(cell32);
+
+			PdfPCell cell33 = new PdfPCell();
+			Paragraph totalBal = new Paragraph("Total:", b);
+			Paragraph totalinv = new Paragraph("Total Invoice Amount:", b);
+
+			cell33.addElement(totalBal);
+			cell33.addElement(totalinv);
+			cell33.setColspan(8);
+			totalBal.setIndentationLeft(333);
+			totalinv.setIndentationLeft(280);
+			cell33.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell33);
+
+			PdfPCell cell34 = new PdfPCell();
+
+			cell34.addElement(bamount);
+			cell34.addElement(bamount);
+			cell34.setColspan(3);
+			cell34.disableBorderSide(PdfPCell.LEFT);
+			table.addCell(cell34);
+
+			PdfPCell cell35 = new PdfPCell();
+			Paragraph title = new Paragraph(
+					"Payments/Adjustments/Discounts/Deposits/RefundsOtherCharges:",
+					b1);
+			cell35.addElement(title);
+			cell35.setColspan(11);
+
+			// cell35.disableBorderSide(PdfPCell.TOP);
+			cell35.disableBorderSide(PdfPCell.BOTTOM);
+			// cell35.disableBorderSide(PdfPCell.LEFT);
+			// cell35.disableBorderSide(PdfPCell.RIGHT);
+			table.addCell(cell35);
+
+			PdfPCell cell38 = new PdfPCell();
+			Paragraph em = new Paragraph("", b);
+			cell38.disableBorderSide(PdfPCell.TOP);
+			cell38.disableBorderSide(PdfPCell.RIGHT);
+			cell38.disableBorderSide(PdfPCell.BOTTOM);
+			cell38.addElement(em);
+			cell38.setColspan(2);
+			table.addCell(cell38);
+
+			PdfPCell cell36 = new PdfPCell();
+			Paragraph ref = new Paragraph("AccountNo:", b);
+			cell36.disableBorderSide(PdfPCell.TOP);
+			cell36.disableBorderSide(PdfPCell.LEFT);
+			cell36.disableBorderSide(PdfPCell.RIGHT);
+			cell36.disableBorderSide(PdfPCell.BOTTOM);
+			cell36.addElement(ref);
+			cell36.setColspan(3);
+			table.addCell(cell36);
+
+			PdfPCell cell37 = new PdfPCell();
+			Paragraph uname = new Paragraph("UserName:", b);
+			cell37.disableBorderSide(PdfPCell.TOP);
+			cell37.disableBorderSide(PdfPCell.LEFT);
+			cell37.disableBorderSide(PdfPCell.BOTTOM);
+			cell37.addElement(uname);
+			cell37.setColspan(6);
+			table.addCell(cell37);
+
+			PdfPCell cell39 = new PdfPCell();
+			Paragraph ref1 = new Paragraph("RefNo:", b);
+			cell39.disableBorderSide(PdfPCell.TOP);
+			// cell39.disableBorderSide(PdfPCell.LEFT);
+			cell39.disableBorderSide(PdfPCell.RIGHT);
+			cell39.addElement(ref1);
+			cell39.setColspan(2);
+			table.addCell(cell39);
+
+			PdfPCell cell40 = new PdfPCell();
+			Paragraph details = new Paragraph("Details:", b);
+			cell40.disableBorderSide(PdfPCell.TOP);
+			cell40.disableBorderSide(PdfPCell.LEFT);
+			cell40.disableBorderSide(PdfPCell.RIGHT);
+			cell40.addElement(details);
+			cell40.setColspan(2);
+			table.addCell(cell40);
+
+			PdfPCell cell41 = new PdfPCell();
+			Paragraph pol = new Paragraph("Polarity:", b);
+			cell41.disableBorderSide(PdfPCell.TOP);
+			cell41.disableBorderSide(PdfPCell.LEFT);
+			cell41.disableBorderSide(PdfPCell.RIGHT);
+			cell41.addElement(pol);
+			cell41.setColspan(2);
+			table.addCell(cell41);
+
+			PdfPCell cell42 = new PdfPCell();
+			Paragraph am = new Paragraph("Amount:", b);
+			cell42.disableBorderSide(PdfPCell.TOP);
+			cell42.disableBorderSide(PdfPCell.LEFT);
+			cell42.disableBorderSide(PdfPCell.RIGHT);
+			cell42.addElement(am);
+			cell42.setColspan(1);
+			table.addCell(cell42);
+
+			PdfPCell cell43 = new PdfPCell();
+
+			cell43.disableBorderSide(PdfPCell.TOP);
+			cell43.disableBorderSide(PdfPCell.LEFT);
+			cell43.disableBorderSide(PdfPCell.RIGHT);
+			cell43.addElement(tax);
+			cell43.setColspan(1);
+			table.addCell(cell43);
+
+			PdfPCell cell44 = new PdfPCell();
+
+			cell44.disableBorderSide(PdfPCell.TOP);
+			cell44.disableBorderSide(PdfPCell.LEFT);
+			cell44.disableBorderSide(PdfPCell.RIGHT);
+			cell44.addElement(total);
+			cell44.setColspan(1);
+			table.addCell(cell44);
+
+			PdfPCell cell45 = new PdfPCell();
+			Paragraph re = new Paragraph("Remarks:", b);
+			cell45.disableBorderSide(PdfPCell.TOP);
+			cell45.disableBorderSide(PdfPCell.LEFT);
+
+			cell45.addElement(re);
+			cell45.setColspan(2);
+			table.addCell(cell45);
+
+			PdfPCell cell46 = new PdfPCell();
+
+			cell46.setFixedHeight(25f);
+			cell46.setColspan(11);
+			table.addCell(cell46);
+
+			PdfPCell cell47 = new PdfPCell();
+
+			Paragraph para2 = new Paragraph(":", b);
+			Paragraph toal3 = new Paragraph("Total:", b);
+
+			para2.setIndentationLeft(333);
+			toal3.setIndentationLeft(318);
+			cell47.addElement(para2);
+			cell47.addElement(toal3);
+			cell47.setColspan(11);
+			table.addCell(cell47);
+
+			table.addCell("Delhi");
+			table.addCell("RoseIndia");
+			table.addCell("Delhi");
+			pdfContentByte.endText();
+			document.add(table);
+			document.close();
+			Runtime.getRuntime().exec(
+					"rundll32 url.dll,FileProtocolHandler invoice"+rs.getInt("bill_no")+".pdf");
+
+
+
+return null;
+			}
+			catch(Exception e)
+			{
+				e.printStackTrace();
+				return null;
+			}
+	        }
+	}
+
+
+	@Override
+	public List<PaytermData> getChargeCodes(Long planCode) {
+
+		 context.authenticatedUser();
+
+	        String sql = "Select DISTINCT b.billfrequency_code as billfrequency_code,b.id as id from plan_pricing a,charge_codes b where a.charge_code=b.charge_code and " +
+	        		" a.is_deleted='n' and plan_code=?";
+
+
+	        RowMapper<PaytermData> rm = new BillingFreaquencyMapper();
+
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] { planCode });
+	}
+
+	 private static final class BillingFreaquencyMapper implements RowMapper<PaytermData> {
+
+	        @Override
+	        public PaytermData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+
+			  Long id = rs.getLong("id");
+
+	            String serviceType = rs.getString("billfrequency_code");
+
+	            return new PaytermData(id,serviceType);
+	}
+	}
+
+	@Override
+	public OrderData retrieveOrderData(Long orderId) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformService.java
new file mode 100644
index 0000000..014641b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformService.java
@@ -0,0 +1,18 @@
+package org.mifosplatform.portfolio.order.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+
+public interface OrderWritePlatformService {
+
+	CommandProcessingResult createOrder(final OrdersCommand command);
+
+	void deleteOrder(Long orderId, List<OrderData> orederData, OrderPriceData orderPrice);
+
+	CommandProcessingResult updateOrder(Long orderId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformServiceImpl.java
new file mode 100644
index 0000000..3fb6767
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/order/service/OrderWritePlatformServiceImpl.java
@@ -0,0 +1,245 @@
+package org.mifosplatform.portfolio.order.service;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import org.joda.time.DateTime;
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.order.data.OrderData;
+import org.mifosplatform.portfolio.order.data.OrderPriceData;
+import org.mifosplatform.portfolio.order.domain.Order;
+import org.mifosplatform.portfolio.order.domain.OrderCommanValidator;
+import org.mifosplatform.portfolio.order.domain.OrderLine;
+import org.mifosplatform.portfolio.order.domain.OrderPrice;
+import org.mifosplatform.portfolio.order.domain.OrderPriceRepository;
+import org.mifosplatform.portfolio.order.domain.OrderReadPlatformImpl;
+import org.mifosplatform.portfolio.order.domain.OrderRepository;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.data.PriceData;
+import org.mifosplatform.portfolio.pricing.domain.PriceRepository;
+import org.mifosplatform.portfolio.savingplan.domain.Plan;
+import org.mifosplatform.portfolio.savingplan.domain.PlanRepository;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceDetailsRepository;
+import org.mifosplatform.portfolio.subscription.domain.Subscription;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.stereotype.Service;
+
+//import org.mifosng.platform.savingorder.domain.OrderLineRepository;
+
+@Service
+public class OrderWritePlatformServiceImpl implements OrderWritePlatformService {
+
+	private PlatformSecurityContext context;
+	private OrderRepository orderRepository;
+	// private OrderLineRepository OrderLineRepository;
+	private ServiceDetailsRepository serviceDetailsRepository;
+	private PlanRepository planRepository;
+	private PriceRepository planPriceRepository;
+	private SubscriptionRepository subscriptionRepository;
+	private OrderPriceRepository OrderPriceRepository;
+	private final JdbcTemplate jdbcTemplate;
+
+	// private final TenantAwareRoutingDataSource dataSource;
+	@Autowired
+	public OrderWritePlatformServiceImpl(final PlatformSecurityContext context,
+			final OrderRepository orderRepository,
+			final PlanRepository planRepository,
+			final OrderPriceRepository OrderPriceRepository,
+			final ServiceDetailsRepository serviceDetailsRepository,
+			final TenantAwareRoutingDataSource dataSource,
+			final PriceRepository priceRepository,
+			final SubscriptionRepository subscriptionRepository) {
+		this.context = context;
+		this.orderRepository = orderRepository;
+		// this.OrderLineRepository = OrderLineRepository;
+		this.OrderPriceRepository = OrderPriceRepository;
+		this.planPriceRepository = priceRepository;
+		this.planRepository = planRepository;
+		this.serviceDetailsRepository = serviceDetailsRepository;
+		this.subscriptionRepository = subscriptionRepository;
+
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+
+	}
+
+	@Override
+	public CommandProcessingResult createOrder(OrdersCommand command) {
+
+		try {
+			this.context.authenticatedUser();
+			OrderCommanValidator validator = new OrderCommanValidator(command);
+			validator.validateForCreate();
+			List<OrderLine> serviceDetails = new ArrayList<OrderLine>();
+			List<OrderPrice> orderprice = new ArrayList<OrderPrice>();
+
+			OrderReadPlatformImpl obj = new OrderReadPlatformImpl(context,
+					jdbcTemplate);
+			// PlanData plan = obj.retrievePlanData(command.getPlan_id());
+
+			Plan plan = this.planRepository.findOne(command.getPlanid());
+			List<ServiceData> details = obj.retrieveAllServices(command
+					.getPlanid());
+			List<PriceData> datas = obj.retrieveAllPrices(command.getPlanid(),
+					command.getBillingFrequency());
+			LocalDate endDate = null;
+			Subscription subscriptionData = this.subscriptionRepository
+					.findOne(command.getContractPeriod());
+
+			if (subscriptionData.getSubscription_type().equalsIgnoreCase(
+					"DAY(s)")) {
+				endDate = command.getStartDate().plusDays(
+						subscriptionData.getUnits().intValue() - 1);
+
+			} else if (subscriptionData.getSubscription_type()
+					.equalsIgnoreCase("MONTH(s)")) {
+				endDate = command.getStartDate()
+						.plusMonths(subscriptionData.getUnits().intValue())
+						.minusDays(1);
+
+			} else if (subscriptionData.getSubscription_type()
+					.equalsIgnoreCase("YEAR(s)")) {
+				endDate = command.getStartDate()
+						.plusYears(subscriptionData.getUnits().intValue())
+						.minusDays(1);
+			} else if (subscriptionData.getSubscription_type()
+					.equalsIgnoreCase("WEEK(s)")) {
+
+				endDate = command.getStartDate()
+						.plusWeeks(subscriptionData.getUnits().intValue())
+						.minusDays(1);
+			}
+
+			else if (subscriptionData.getSubscription_type().equalsIgnoreCase(
+					"HOUR(s)")) {
+
+				DateTime startDate = command.getStartDate().toDateTime(null,
+						null);
+				endDate = startDate.plusHours(
+						subscriptionData.getUnits().intValue()).toLocalDate();
+
+			}
+                
+			char billAlign=command.isBillAlign()?'y':'n';
+			Order order = new Order(command.getClientId(), command.getPlanid(),
+					plan.getStatus(), command.getDurationType(),
+					command.getBillingFrequency(), command.getStartDate(),
+					endDate, command.getContractPeriod(), serviceDetails,
+					orderprice, billAlign);
+
+			for (PriceData data : datas) {
+
+				Date billstartDate = command.getStartDate().toDate();
+				Date billEndDate = null;
+				if (data.getChagreType().equalsIgnoreCase("RC")
+						&& endDate != null) {
+					billEndDate = endDate.toDate();
+
+				} else {
+
+					billEndDate = billstartDate;
+				}
+
+				OrderPrice price = new OrderPrice(data.getServiceId(),
+						data.getChargeCode(), data.getCharging_variant(),
+						data.getPrice(), null, data.getChagreType(),
+						data.getChargeDuration(), data.getDurationType(),
+						billstartDate, billEndDate);
+				order.addOrderDeatils(price);
+
+			}
+
+			// for( PriceData datas:data)
+			// {
+			// orderprice = new OrderPrice(datas.getId(),
+			// datas.getChargeCode(), datas.getCharging_variant(),
+			// datas.getPrice(),order);
+			//
+			// order.addOrderDeatils(orderprice);
+			// }
+
+			for (ServiceData data : details) {
+				OrderLine orderdetails = new OrderLine(data.getServiceId(),
+						data.getCode(), plan.getStatus(), false);
+				order.addServiceDeatils(orderdetails);
+			}
+
+			// order.addOrderDeatils(orderprice);
+			this.orderRepository.save(order);
+
+			// this.OrderPriceRepository.save(orderprice);
+
+			return new CommandProcessingResult(command.getPlanid());
+
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+	}
+
+	private void handleDataIntegrityIssues(OrdersCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public void deleteOrder(Long orderId, List<OrderData> orederData,
+			OrderPriceData data) {
+		try {
+
+			Order order = this.orderRepository.findOne(orderId);
+			// OrderPrice orderPrice=order.getPrice();
+			List<OrderLine> orderline = order.getServices();
+
+			for (OrderLine orderData : orderline) {
+				orderData.delete();
+			}
+
+			// orderPrice.delete();
+			order.delete();
+			this.orderRepository.save(order);
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(dve);
+		}
+
+	}
+
+	private void handleDataIntegrityIssues(DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public CommandProcessingResult updateOrder(Long orderId) {
+
+		try {
+
+			Order order = this.orderRepository.findOne(orderId);
+
+			LocalDate currentDate = new LocalDate();
+			currentDate.toDate();
+
+			// if (order==null || order.getStatus() == 3) {
+			// throw new ProductNotFoundException(order.getId());
+			// }
+
+			order.update(currentDate);
+			this.orderRepository.save(order);
+			return new CommandProcessingResult(Long.valueOf(order.getId()));
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/command/Paymentcommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/command/Paymentcommand.java
new file mode 100644
index 0000000..43693e9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/command/Paymentcommand.java
@@ -0,0 +1,79 @@
+package org.mifosplatform.portfolio.payment.command;
+
+import java.math.BigDecimal;
+
+import org.joda.time.LocalDate;
+
+
+public class Paymentcommand {
+
+	private final Long clientId;
+	private final Long payment_id;
+	private final Long externalId;
+	private final Long statement_id;
+	private final String payment_code;
+	private final String remarks;
+	private final BigDecimal amount_paid;
+	private final LocalDate payment_date;
+
+
+public Paymentcommand(final Long clientId,final Long payment_id,final Long externalId,final Long statement_id,final String payment_code,
+		final String remarks, final BigDecimal amount_paid,final LocalDate payment_date )
+
+{
+	this.clientId=clientId;
+	this.payment_id=payment_id;
+	this.externalId=externalId;
+	this.statement_id=statement_id;
+	this.payment_code=payment_code;
+	this.remarks=remarks;
+	this.amount_paid=amount_paid;
+	this.payment_date=payment_date;
+}
+
+
+public Long getClientId() {
+	return clientId;
+}
+
+
+public Long getPayment_id() {
+	return payment_id;
+}
+
+
+public Long getExternalId() {
+	return externalId;
+}
+
+
+public Long getStatement_id() {
+	return statement_id;
+}
+
+
+public String getPayment_code() {
+	return payment_code;
+}
+
+
+
+
+public String getRemarks() {
+	return remarks;
+}
+
+
+public BigDecimal getAmount_paid() {
+	return amount_paid;
+}
+
+
+
+
+public LocalDate getPayment_date() {
+	return payment_date;
+}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/Payment.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/Payment.java
new file mode 100644
index 0000000..f388d01
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/Payment.java
@@ -0,0 +1,94 @@
+package org.mifosplatform.portfolio.payment.domain;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.domain.AbstractAuditableCustom;
+import org.mifosplatform.useradministration.domain.AppUser;
+
+@Entity
+@Table(name = "payments")
+public class Payment extends AbstractAuditableCustom<AppUser, Long> {
+
+	@Column(name = "client_id", nullable = false)
+	private Long client_id;
+
+	@Column(name = "amount_paid", scale = 6, precision = 19, nullable = false)
+	private BigDecimal amountPaid;
+
+	@Column(name = "bill_id", nullable = false)
+	private Long statementId;
+	
+	
+	@Column(name = "is_deleted", nullable = false)
+	private boolean deleted = false;
+
+	@Temporal(TemporalType.DATE)
+	@Column(name = "payment_date")
+	private Date paymentDate;
+
+	@Column(name = "Remarks")
+	private String remarks;
+
+	@Column(name = "paymode_code")
+	private String paymode_code;
+	
+	public Payment()
+	{}
+
+	public Payment(final Long client_id, final Long payment_id,
+			final Long external_id, final BigDecimal amountPaid,
+			final Long statmentId, final LocalDate paymentDate,
+			final String remark, final String Paymode_code) {
+
+		this.client_id = client_id;
+
+		this.statementId = statmentId;
+		this.amountPaid = amountPaid;
+		this.paymentDate = paymentDate.toDate();
+		this.remarks = remark;
+		this.paymode_code = Paymode_code;
+
+	}
+
+	public Long getClient_id() {
+		return client_id;
+	}
+
+	public BigDecimal getAmountPaid() {
+		return amountPaid;
+	}
+
+	public Long getStatementId() {
+		return statementId;
+	}
+
+	public boolean isDeleted() {
+		return deleted;
+	}
+
+	public Date getPaymentDate() {
+		return paymentDate;
+	}
+
+	public String getRemarks() {
+		return remarks;
+	}
+
+	public String getPaymode_code() {
+		return paymode_code;
+	}
+
+	public void updateBillId(Long billId) {
+		this.statementId=billId;
+		
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentRepository.java
new file mode 100644
index 0000000..b0cc600
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentRepository.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.payment.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface PaymentRepository extends JpaRepository<Payment,Long >,
+
+JpaSpecificationExecutor<Payment>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentValidator.java
new file mode 100644
index 0000000..7ca9751
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/domain/PaymentValidator.java
@@ -0,0 +1,33 @@
+package org.mifosplatform.portfolio.payment.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+
+public class PaymentValidator {
+
+	private final Paymentcommand command;
+
+	public PaymentValidator(final  Paymentcommand command) {
+		this.command=command;
+	}
+
+
+	public void validateForCreate() {
+         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("payment");
+		baseDataValidator.reset().parameter("payment_code").value(command.getPayment_code()).notBlank().notNull();
+		//baseDataValidator.reset().parameter("subscription_type").value(command.getSubscription_type()).notBlank().notNull();
+		baseDataValidator.reset().parameter("payment_date").value(command.getPayment_date()).notBlank().notNull();
+		baseDataValidator.reset().parameter("amount_paid").value(command.getAmount_paid()).notBlank().zeroOrPositiveAmount();
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformService.java
new file mode 100644
index 0000000..33b3028
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformService.java
@@ -0,0 +1,13 @@
+package org.mifosplatform.portfolio.payment.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+
+public interface PaymentWritePlatformService {
+
+	CommandProcessingResult createPayment(Paymentcommand command,Long clientId, Long clientBalanceId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformServiceImpl.java
new file mode 100644
index 0000000..0c0cb05
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentWritePlatformServiceImpl.java
@@ -0,0 +1,87 @@
+package org.mifosplatform.portfolio.payment.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalance;
+import org.mifosplatform.portfolio.adjustment.domain.ClientBalanceRepository;
+import org.mifosplatform.portfolio.adjustment.service.UpdateClientBalance;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.payment.domain.Payment;
+import org.mifosplatform.portfolio.payment.domain.PaymentRepository;
+import org.mifosplatform.portfolio.payment.domain.PaymentValidator;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class PaymentWritePlatformServiceImpl implements
+		PaymentWritePlatformService {
+
+	private final PlatformSecurityContext context;
+	private final PaymentRepository paymentRepository;
+	private final UpdateClientBalance updateClientBalance;
+	private final ClientBalanceRepository clientBalanceRepository;
+
+	@Autowired
+	public PaymentWritePlatformServiceImpl(
+			final PlatformSecurityContext context,
+			PaymentRepository paymentRepository,
+			final UpdateClientBalance updateClientBalance,
+			final ClientBalanceRepository clientBalanceRepository) {
+
+		this.context = context;
+		this.paymentRepository = paymentRepository;
+		this.updateClientBalance = updateClientBalance;
+		this.clientBalanceRepository = clientBalanceRepository;
+	}
+
+	@Transactional
+	@Override
+	public CommandProcessingResult createPayment(Paymentcommand command, Long clientId,Long clientBalanceId) {
+		try {
+			this.context.authenticatedUser();
+			PaymentValidator validator = new PaymentValidator(command);
+			validator.validateForCreate();
+			Payment data = new Payment(clientId, command.getPayment_id(),
+					command.getExternalId(), command.getAmount_paid(),
+					command.getStatement_id(), command.getPayment_date(),
+					command.getRemarks(), command.getPayment_code());
+
+			this.paymentRepository.save(data);
+			
+			ClientBalance clientBalance = null;
+			if(clientBalanceId != null){
+				clientBalance = clientBalanceRepository.findOne(clientBalanceId);
+			}
+			
+			if(clientBalance == null){
+
+				clientBalance = updateClientBalance.createClientBalance("CREDIT",command.getAmount_paid(),clientId,clientBalance);
+			}else if(clientBalance != null){
+				
+				clientBalance = updateClientBalance.doUpdateClientBalance("CREDIT",command.getAmount_paid(),clientId,clientBalance);
+				
+			}
+			
+			updateClientBalance.saveClientBalanceEntity(clientBalance);
+
+			
+
+
+			return new CommandProcessingResult(data.getId());
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+	}
+
+	private void handleDataIntegrityIssues(Paymentcommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentsCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentsCommandValidator.java
new file mode 100644
index 0000000..89bebdb
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payment/service/PaymentsCommandValidator.java
@@ -0,0 +1,37 @@
+package org.mifosplatform.portfolio.payment.service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+
+public class PaymentsCommandValidator {
+
+
+	private final PaytermsCommand command;
+
+	public PaymentsCommandValidator(final PaytermsCommand command) {
+		this.command=command;
+	}
+
+
+
+public void validateForCreate() {
+
+		List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("payments");
+
+		baseDataValidator.reset().parameter("payment_period").value(command.getPayterm_period()).notNull();
+		baseDataValidator.reset().parameter("payment_type").value(command.getPayterm_type()).notNull();
+		baseDataValidator.reset().parameter("units").value(command.getUnits()).notNull();
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+
+
+}
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payments/api/PaymentsApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payments/api/PaymentsApiResource.java
new file mode 100644
index 0000000..95d7057
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payments/api/PaymentsApiResource.java
@@ -0,0 +1,109 @@
+package org.mifosplatform.portfolio.payments.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+import org.mifosplatform.portfolio.loanaccount.data.LoanBasicDetailsData;
+import org.mifosplatform.portfolio.loanaccount.service.LoanReadPlatformService;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.payment.service.PaymentWritePlatformService;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeTypesData;
+import org.mifosplatform.portfolio.paymodes.service.PaymodeReadPlatformService;
+import org.mifosplatform.portfolioadjustment.service.ClientBalanceReadPlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+@Path("/payments")
+@Component
+@Scope("singleton")
+public class PaymentsApiResource {
+
+
+
+	@Autowired
+	private PaymentWritePlatformService paymentWritePlatformService;
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PaymodeReadPlatformService paymodeReadPlatformService;
+
+    @Autowired
+    private LoanReadPlatformService loanReadPlatformService;
+
+    @Autowired
+    private ClientBalanceReadPlatformService clientBalanceReadPlatformService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	private final String entityType = "PAYMENTS";
+	@Autowired
+	private PlatformSecurityContext context;
+	private static final Set<String> typicalResponseParameters = new HashSet<String>(
+			Arrays.asList("payment_id","clientId","payment_date","payment_code","amount_paid","statment_id","externalId",
+					"cancellation_date","cancellation_remarks","Remarks"));
+
+	@POST
+	 @Path("{clientId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createDepositAccount(@PathParam("clientId") final Long clientId,final String jsonRequestBody){
+
+		final Paymentcommand command = this.apiDataConversionService.convertJsonToPaymentCommand(null, jsonRequestBody);
+		List<ClientBalanceData> clientBalancedatas = clientBalanceReadPlatformService.retrieveAllClientBalances(clientId);
+		Long clientBalanceId = null;
+		if(clientBalancedatas.size()==1){
+			clientBalanceId = clientBalancedatas.get(0).getId();
+		}
+		 CommandProcessingResult entityIdentifier = this.paymentWritePlatformService.createPayment(command,clientId,clientBalanceId);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+
+	 @GET
+	    @Path("template")
+	    @Consumes({ MediaType.APPLICATION_JSON })
+	    @Produces({ MediaType.APPLICATION_JSON })
+	    public String retrieveDetailsForNewLoanApplicationStepOne(@QueryParam("clientId") final Long clientId,
+			 @QueryParam("productId") final Long productId,  @Context final UriInfo uriInfo) {
+
+
+	        final Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+	        final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+	        LoanBasicDetailsData loanBasicDetails;
+		List<PaymodeTypesData> paymentypes = this.paymodeReadPlatformService.retrieveNewPaymode();
+	            loanBasicDetails = this.loanReadPlatformService.retrieveClientAndProductDetails(clientId, productId);
+
+	            PaymodeData data= new PaymodeData(paymentypes);
+
+	            return this.apiJsonSerializerService.serializePaymentToJson(prettyPrint, responseParameters, loanBasicDetails,data);
+
+
+
+	 }
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/api/PaymodeApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/api/PaymodeApiResource.java
new file mode 100644
index 0000000..b8b116c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/api/PaymodeApiResource.java
@@ -0,0 +1,93 @@
+package org.mifosplatform.portfolio.paymodes.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeTypesData;
+import org.mifosplatform.portfolio.paymodes.service.PaymodeReadPlatformService;
+import org.mifosplatform.portfolio.paymodes.service.PaymodeWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+@Path("/paymodes")
+@Component
+@Scope("singleton")
+public class PaymodeApiResource {
+
+	@Autowired
+	private  PaymodeReadPlatformService paymodeReadPlatformService ;
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PaymodeWritePlatformService paymodeWritePlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "PAYMODE";
+
+	@POST
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createSubscription(final String jsonRequestBody) {
+
+		PaymodeCommand command = this.apiDataConversionService.convertJsonToPaymodeCommand(null, jsonRequestBody);
+
+		CommandProcessingResult userId = this.paymodeWritePlatformService.createPaymode(command);
+		return Response.ok().entity(userId).build();
+	}
+
+	@GET
+	@Path("template")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String paymodeTypeDetails(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("categorytypes"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		List<PaymodeTypesData> categorytypes = this.paymodeReadPlatformService.retrieveNewPaymode();
+
+		PaymodeData data= new PaymodeData(categorytypes);
+
+		return this.apiJsonSerializerService.serializePaymodeToJson(prettyPrint, responseParameters, data);
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/commands/PaymodeCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/commands/PaymodeCommand.java
new file mode 100644
index 0000000..307153b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/commands/PaymodeCommand.java
@@ -0,0 +1,52 @@
+package org.mifosplatform.portfolio.paymodes.commands;
+
+public class PaymodeCommand {
+
+
+			private final String paymode;
+
+			private  String description;
+
+			private final Long id;
+			private  String category;
+			public PaymodeCommand(
+					final Long id,
+					final String paymode,
+					final String description,
+					final String category) {
+
+				this.paymode=paymode;
+				this.description=description;
+				this.category=category;
+				this.id=id;
+
+
+
+			}
+			public String getDescription() {
+				return description;
+			}
+			public void setDescription(String description) {
+				this.description = description;
+			}
+			public String getCategory() {
+				return category;
+			}
+			public void setCategory(String category) {
+				this.category = category;
+			}
+			public String getPaymode() {
+				return paymode;
+			}
+			public Long getId() {
+				return id;
+			}
+
+
+
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeData.java
new file mode 100644
index 0000000..d783941
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeData.java
@@ -0,0 +1,38 @@
+package org.mifosplatform.portfolio.paymodes.data;
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class PaymodeData {
+
+	private final List<PaymodeTypesData> categoryType;
+  private final LocalDate startDate;
+
+	public PaymodeData(final List<PaymodeTypesData> type)
+	{
+
+		this.categoryType=type;
+		startDate=new LocalDate();
+	}
+
+
+	
+
+
+	public List<PaymodeTypesData> getCategoryType() {
+		return categoryType;
+	}
+
+
+
+
+
+	public LocalDate getStartDate() {
+		return startDate;
+	}
+
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeTypesData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeTypesData.java
new file mode 100644
index 0000000..4fc2e31
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/PaymodeTypesData.java
@@ -0,0 +1,32 @@
+package org.mifosplatform.portfolio.paymodes.data;
+
+public class PaymodeTypesData {
+
+	private final Long id;
+	private final String paymodeCode;
+	private final String paymodeDescription;
+
+	public PaymodeTypesData(Long id, String paymodeCode, String description) {
+	this.id=id;
+	this.paymodeCode=paymodeCode;
+	this.paymodeDescription=description;
+	
+	
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public String getPaymodeCode() {
+		return paymodeCode;
+	}
+
+	public String getPaymodeDescription() {
+		return paymodeDescription;
+	}
+
+	
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/SavingCategoryEnumaration.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/SavingCategoryEnumaration.java
new file mode 100644
index 0000000..11094e0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/data/SavingCategoryEnumaration.java
@@ -0,0 +1,35 @@
+package org.mifosplatform.portfolio.paymodes.data;
+
+	import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.loanproduct.domain.PeriodFrequencyType;
+import org.mifosplatform.portfolio.paymodes.domain.CategoryType;
+
+	public class SavingCategoryEnumaration {
+
+		public static EnumOptionData interestCompoundingPeriodType(final int id) {
+			return interestCompoundingPeriodType(CategoryType.fromInt(id));
+		}
+
+		public static EnumOptionData interestCompoundingPeriodType(final CategoryType type) {
+			final String codePrefix = "deposit.interest.compounding.period.";
+			EnumOptionData optionData = null;
+			switch (type) {
+			case DIRECT_DEBIT:
+				optionData = new EnumOptionData(CategoryType.DIRECT_DEBIT.getValue().longValue(), codePrefix + CategoryType.DIRECT_DEBIT.getCode(), "DIRECT");
+				break;
+			case CASH:
+				optionData = new EnumOptionData(CategoryType.CASH.getValue().longValue(), codePrefix + CategoryType.CASH.getCode(), "cash");
+				break;
+			case CREDIT_CARD:
+				optionData = new EnumOptionData(CategoryType.CREDIT_CARD.getValue().longValue(), codePrefix + CategoryType.CREDIT_CARD.getCode(), "credit card");
+				break;
+			case CHEQUE:
+				optionData = new EnumOptionData(CategoryType.CHEQUE.getValue().longValue(), codePrefix + CategoryType.CHEQUE.getCode(), "cheque");
+				break;
+			default:
+				optionData = new EnumOptionData(CategoryType.INVALID.getValue().longValue(), PeriodFrequencyType.INVALID.getCode(), "Invalid");
+				break;
+			}
+			return optionData;
+		}
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/CategoryType.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/CategoryType.java
new file mode 100644
index 0000000..e7a376f
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/CategoryType.java
@@ -0,0 +1,52 @@
+package org.mifosplatform.portfolio.paymodes.domain;
+
+
+
+public enum CategoryType {
+
+	DIRECT_DEBIT(0, "CategoryType.direct"), //
+		CASH(1, "CategoryType.cash"), //
+		CREDIT_CARD(2, "CategoryType.credit"),//
+		CHEQUE(3,"CategoryType.cheque"),//
+	   INVALID(3, "CategoryType.invalid");
+
+	    private final Integer value;
+		private final String code;
+
+	    private CategoryType(final Integer value, final String code) {
+	        this.value = value;
+			this.code = code;
+	    }
+
+	    public Integer getValue() {
+	        return this.value;
+	    }
+
+		public String getCode() {
+			return code;
+		}
+
+		public static CategoryType fromInt(final Integer frequency) {
+
+			CategoryType repaymentFrequencyType = CategoryType.INVALID;
+			switch (frequency) {
+			case 0:
+				repaymentFrequencyType = CategoryType.DIRECT_DEBIT;
+				break;
+			case 1:
+				repaymentFrequencyType = CategoryType.CASH;
+				break;
+			case 2:
+				repaymentFrequencyType = CategoryType.CREDIT_CARD;
+				break;
+			case 3:
+				repaymentFrequencyType = CategoryType.CHEQUE;
+				break;
+
+			default:
+				repaymentFrequencyType = CategoryType.INVALID;
+				break;
+			}
+			return repaymentFrequencyType;
+		}
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/Paymode.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/Paymode.java
new file mode 100644
index 0000000..dfc2ee9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/Paymode.java
@@ -0,0 +1,43 @@
+package org.mifosplatform.portfolio.paymodes.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "paymodes")
+public class Paymode extends AbstractPersistable<Long> {
+
+	@Column(name = "paymode_code", nullable = false)
+	private String paymode_code;
+
+	@Column(name = "paymode_description", length = 100)
+	private String description;
+
+	public Paymode(final String paymode_code, final String description,
+			final String category) {
+
+		this.paymode_code = paymode_code;
+		this.description = description;
+
+	}
+
+	public String getPaymode_code() {
+		return paymode_code;
+	}
+
+	public void setPaymode_code(String paymode_code) {
+		this.paymode_code = paymode_code;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeCommandValidator.java
new file mode 100644
index 0000000..2d6edc9
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeCommandValidator.java
@@ -0,0 +1,32 @@
+package org.mifosplatform.portfolio.paymodes.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+
+
+public class PaymodeCommandValidator {
+
+	private final PaymodeCommand command;
+
+	public PaymodeCommandValidator(final PaymodeCommand command) {
+		this.command=command;
+	}
+
+
+	public void validateForCreate() {
+         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("paymode");
+		baseDataValidator.reset().parameter("paymode").value(command.getPaymode()).notBlank().notNull();
+		baseDataValidator.reset().parameter("escription").value(command.getDescription()).notBlank().notNull();
+		baseDataValidator.reset().parameter("category").value(command.getCategory()).notBlank().notNull();
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeRepository.java
new file mode 100644
index 0000000..f5fd82b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/domain/PaymodeRepository.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.paymodes.domain;
+
+
+	import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+	public interface PaymodeRepository  extends
+	JpaRepository<Paymode, Long>,
+	JpaSpecificationExecutor<Paymode>{
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeReadPlatformService.java
new file mode 100644
index 0000000..e2bac93
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeReadPlatformService.java
@@ -0,0 +1,14 @@
+package org.mifosplatform.portfolio.paymodes.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeData;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeTypesData;
+
+public interface PaymodeReadPlatformService {
+
+	List<PaymodeTypesData> retrieveNewPaymode();
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformService.java
new file mode 100644
index 0000000..6f05441
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformService.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.paymodes.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+
+public interface PaymodeWritePlatformService {
+	CommandProcessingResult createPaymode(final PaymodeCommand command);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformServiceImpl.java
new file mode 100644
index 0000000..d323b4f
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/PaymodeWritePlatformServiceImpl.java
@@ -0,0 +1,58 @@
+package org.mifosplatform.portfolio.paymodes.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.paymodes.domain.Paymode;
+import org.mifosplatform.portfolio.paymodes.domain.PaymodeCommandValidator;
+import org.mifosplatform.portfolio.paymodes.domain.PaymodeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class PaymodeWritePlatformServiceImpl implements PaymodeWritePlatformService{
+
+
+	private PlatformSecurityContext context;
+
+	private PaymodeRepository paymodeRepository;
+
+
+
+
+	@Autowired
+	public PaymodeWritePlatformServiceImpl(final PlatformSecurityContext context, final PaymodeRepository paymodeRepository){
+		this.context=context;
+		this.paymodeRepository=paymodeRepository;
+	}
+	@Transactional
+	@Override
+	public CommandProcessingResult createPaymode(PaymodeCommand command) {
+
+			try
+			{
+
+				this.context.authenticatedUser();
+
+				PaymodeCommandValidator validator=new PaymodeCommandValidator(command);
+				validator.validateForCreate();
+
+				Paymode data=new Paymode(command.getPaymode(),command.getDescription(),command.getCategory());
+				this.paymodeRepository.save(data);
+
+				return new CommandProcessingResult(data.getId());
+
+			} catch (DataIntegrityViolationException dve) {
+				 handleDataIntegrityIssues(command, dve);
+				 return new CommandProcessingResult(Long.valueOf(-1));
+			}
+	}
+	private void handleDataIntegrityIssues(PaymodeCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/paymodeReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/paymodeReadPlatformServiceImpl.java
new file mode 100644
index 0000000..8c987df
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/paymodes/service/paymodeReadPlatformServiceImpl.java
@@ -0,0 +1,56 @@
+package org.mifosplatform.portfolio.paymodes.service;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.paymodes.data.PaymodeTypesData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+@Service
+public class paymodeReadPlatformServiceImpl implements PaymodeReadPlatformService{
+	
+	
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  paymodeReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+
+   @SuppressWarnings("null")
+@Transactional
+	@Override
+	public List<PaymodeTypesData> retrieveNewPaymode() {
+
+		PaymodeMapper mapper=new PaymodeMapper();
+		String sql =  "select p.id as id,p.paymode_code as paymodeCode,p.paymode_description as description from paymodes p";
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[]{});
+	}
+
+
+private static final class PaymodeMapper implements RowMapper<PaymodeTypesData>{
+
+		
+		@Override
+		public PaymodeTypesData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String paymodeCode = rs.getString("paymodeCode");
+			String description = rs.getString("description");
+
+			return new PaymodeTypesData(id,paymodeCode,description);
+		}
+
+}
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/api/PaytermApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/api/PaytermApiResource.java
new file mode 100644
index 0000000..704876c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/api/PaytermApiResource.java
@@ -0,0 +1,81 @@
+package org.mifosplatform.portfolio.payterms.api;
+
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+import org.mifosplatform.infrastructure.configuration.service.PeriodReadPlatformService;
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.payterms.service.PaytermsWritePlatformService;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+@Path("/paytypes")
+@Component
+@Scope("singleton")
+public class PaytermApiResource {
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PaytermsWritePlatformService paytermsWritePlatformService;
+
+	@Autowired
+	private  PeriodReadPlatformService periodReadPlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "ORDER";
+
+	@POST
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createPlan(final String jsonRequestBody) {
+
+		PaytermsCommand command = this.apiDataConversionService.convertJsonToPaytermsCommand(null, jsonRequestBody);
+
+		CommandProcessingResult userId = this.paytermsWritePlatformService.createPayterm(command);
+		return Response.ok().entity(userId).build();
+	}
+	 @GET
+	    @Path("template")
+	    @Consumes({ MediaType.APPLICATION_JSON })
+	    @Produces({ MediaType.APPLICATION_JSON })
+	    public String retrieveDetailsForNewLoanApplicationStepOne( @Context final UriInfo uriInfo) {
+
+
+	        final Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+	        final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+       List<PeriodData> allowedtypes = this.periodReadPlatformService.retrieveAllPlatformPeriod();
+       SubscriptionData product = new SubscriptionData(allowedtypes);
+
+		return this.apiJsonSerializerService.serializeSubscriptionToJson(prettyPrint, responseParameters, product);
+
+
+	 }
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/commands/PaytermsCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/commands/PaytermsCommand.java
new file mode 100644
index 0000000..6a5cc16
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/commands/PaytermsCommand.java
@@ -0,0 +1,39 @@
+package org.mifosplatform.portfolio.payterms.commands;
+
+import java.util.Set;
+
+public class PaytermsCommand {
+
+
+	private final Long payterm_period;
+
+	private final String payterm_type;
+
+	private final Long units;
+
+	private final Long id;
+
+	public PaytermsCommand(final Long id,final Long paytermn_period,final String payterm_type,final Long units)
+	{
+		this.id=id;
+		this.payterm_period=paytermn_period;
+		this.payterm_type=payterm_type;
+		this.units=units;
+
+	}
+	public Long getPayterm_period() {
+		return payterm_period;
+	}
+	public String getPayterm_type() {
+		return payterm_type;
+	}
+	public Long getUnits() {
+		return units;
+	}
+	public Long getId() {
+		return id;
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/data/PaytermData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/data/PaytermData.java
new file mode 100644
index 0000000..5dc8d58
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/data/PaytermData.java
@@ -0,0 +1,20 @@
+package org.mifosplatform.portfolio.payterms.data;
+
+public class PaytermData {
+
+	private Long id;
+	private String paytermtype;
+public PaytermData(final Long id,final String paytermtype)
+{
+this.id=id;
+this.paytermtype=paytermtype;
+}
+public Long getId() {
+	return id;
+}
+public String getPaytermtype() {
+	return paytermtype;
+}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/PaytermsRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/PaytermsRepository.java
new file mode 100644
index 0000000..ed4c52d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/PaytermsRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.payterms.domain;
+	import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+	public interface PaytermsRepository  extends
+
+	JpaRepository<payterms, Long>,
+	JpaSpecificationExecutor<payterms>{
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/payterms.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/payterms.java
new file mode 100644
index 0000000..d73641d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/domain/payterms.java
@@ -0,0 +1,68 @@
+package org.mifosplatform.portfolio.payterms.domain;
+
+	import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+
+	@Entity
+	@Table(name = "m_payments")
+	public class payterms extends AbstractPersistable <Long>{
+
+		@Column(name = "payterm_period", nullable = false)
+		private Long payterm_period;
+
+		@Column(name = "payterm_type", length=100)
+		private String payterm_type;
+
+		@Column(name = "units")
+		private Long units;
+
+
+		public payterms(final Long payterm_period,final Long units,final String payterm_type)
+		{
+
+			this.payterm_period=payterm_period;
+			this.payterm_type=payterm_type;
+			this.units=units;
+
+		}
+
+
+		public Long getPayterm_period() {
+			return payterm_period;
+		}
+
+
+		public void setPayterm_period(Long payterm_period) {
+			this.payterm_period = payterm_period;
+		}
+
+
+		public String getPayterm_type() {
+			return payterm_type;
+		}
+
+
+		public void setPayterm_type(String payterm_type) {
+			this.payterm_type = payterm_type;
+		}
+
+
+		public Long getUnits() {
+			return units;
+		}
+
+
+		public void setUnits(Long units) {
+			this.units = units;
+		}
+
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformService.java
new file mode 100644
index 0000000..580e2ea
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformService.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.payterms.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+
+public interface PaytermsWritePlatformService {
+
+	CommandProcessingResult createPayterm(final PaytermsCommand command);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformServiceImpl.java
new file mode 100644
index 0000000..7b62c29
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/payterms/service/PaytermsWritePlatformServiceImpl.java
@@ -0,0 +1,62 @@
+package org.mifosplatform.portfolio.payterms.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.payment.service.PaymentsCommandValidator;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.payterms.domain.PaytermsRepository;
+import org.mifosplatform.portfolio.payterms.domain.payterms;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class PaytermsWritePlatformServiceImpl implements PaytermsWritePlatformService{
+
+	private  PaytermsRepository paytermsRepository;
+
+	private PlatformSecurityContext context;
+
+
+
+
+
+
+	@Autowired
+	public PaytermsWritePlatformServiceImpl(final PlatformSecurityContext context, final PaytermsRepository payterms){
+		this.context=context;
+		this.paytermsRepository=payterms;
+	}
+
+	@Transactional
+	@Override
+	public CommandProcessingResult createPayterm(PaytermsCommand command) {
+		try
+		{
+
+			this.context.authenticatedUser();
+
+			//this.context.authenticatedUser();
+			PaymentsCommandValidator validator=new PaymentsCommandValidator(command);
+			validator.validateForCreate();
+
+			payterms data=new payterms(command.getPayterm_period(),command.getUnits(),command.getPayterm_type());
+			this.paytermsRepository.save(data);
+
+			return new CommandProcessingResult(data.getId());
+
+		} catch (DataIntegrityViolationException dve) {
+			 handleDataIntegrityIssues(command, dve);
+			 return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+	}
+
+	private void handleDataIntegrityIssues(PaytermsCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/api/PlansApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/api/PlansApiResource.java
new file mode 100644
index 0000000..8265f79
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/api/PlansApiResource.java
@@ -0,0 +1,264 @@
+package org.mifosplatform.portfolio.plan.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingorder.data.BillRuleData;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.plan.service.PlanReadPlatformService;
+import org.mifosplatform.portfolio.plan.service.PlanWritePlatformService;
+import org.mifosplatform.portfolio.pricing.service.PriceReadPlatformService;
+import org.mifosplatform.portfolio.savingplan.domain.Plan;
+import org.mifosplatform.portfolio.savingplan.domain.PlanRepository;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/plans")
+@Component
+@Scope("singleton")
+public class PlansApiResource {
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PlanWritePlatformService planWritePlatformService;
+
+	@Autowired
+	private PlanReadPlatformService planReadPlatformService;
+
+	@Autowired
+	private PriceReadPlatformService priceReadPlatformService;
+	
+	@Autowired
+	private PlanRepository planRepository;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "PLAN";
+
+	private static final Set<String> typicalResponseParameters = new HashSet<String>(
+			Arrays.asList("id", "status", "plan_code", "plan_description",
+					"charge_code", "service_code", "service_description",
+					"endDate", "bill_rule"));
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createPlan(final String jsonRequestBody) {
+
+		PlansCommand command = this.apiDataConversionService
+				.convertJsonToPlansCommand(null, jsonRequestBody);
+
+		CommandProcessingResult userId = this.planWritePlatformService.createPlan(command);
+		return Response.ok().entity(userId).build();
+	}
+
+	@GET
+	@Path("template")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrieveClientAccount(
+			@QueryParam("plan_code") final String planCode,
+			@Context final UriInfo uriInfo) {
+
+		// context.authenticatedUser().validateHasReadPermission("CLIENT");
+
+		final Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		List<ServiceData> data = this.planReadPlatformService
+				.retrieveAllServices();
+		List<BillRuleData> billData = this.planReadPlatformService
+				.retrievebillRules();
+		List<SubscriptionData> contractPeriod = this.planReadPlatformService
+				.retrieveSubscriptionData();
+		List<EnumOptionData> status = this.planReadPlatformService
+				.retrieveNewStatus();
+
+		PlanData planData = new PlanData(data, billData, contractPeriod, status);
+
+		return this.apiJsonSerializerService.serializePlanDataToJson(
+				prettyPrint, responseParameters, planData);
+	}
+
+	@GET
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrieveAllSubscription(@Context final UriInfo uriInfo) {
+
+		context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id", "planCode", "service_description",
+						"status", "startDate", "endDate", "bill_rule",
+						"planstatus"));
+
+		Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		List<PlanData> products = this.planReadPlatformService
+				.retrievePlanData();
+		return this.apiJsonSerializerService.serializePlanDataToJson(
+				prettyPrint, responseParameters, products);
+	}
+
+	@GET
+	@Path("{planId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrievePlanDetails(
+			@PathParam("planId") final Long planId,
+			@Context final UriInfo uriInfo) {
+
+		context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id", "planCode", "startDate", "endDate",
+						"status", "plan_description", "billiingcycle",
+						"contractPeriod", "servicedata", "service_code",
+						"selectedservice", "services", "statusname",
+						"planstatus"));
+
+		Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		boolean template = ApiParameterHelper.template(uriInfo
+				.getQueryParameters());
+
+		PlanData singlePlandata = this.planReadPlatformService
+				.retrievePlanData(planId);
+		
+		
+		
+		
+		
+		responseParameters.addAll(Arrays.asList("servicedata"));
+
+		List<ServiceData> data = this.planReadPlatformService
+				.retrieveAllServices();
+		List<BillRuleData> billData = this.planReadPlatformService
+				.retrievebillRules();
+		List<SubscriptionData> contractPeriod = this.planReadPlatformService
+				.retrieveSubscriptionData();
+		List<EnumOptionData> status = this.planReadPlatformService
+				.retrieveNewStatus();
+		if (template) {
+			List<ServiceData> services = this.priceReadPlatformService
+					.retrievePrcingDetails(planId);
+			List<ServiceData> data1 = new ArrayList<ServiceData>();
+
+			int size = data.size();
+			int selectedsize = services.size();
+
+			for (int i = 0; i < selectedsize; i++)
+
+			{
+
+				Long selected = services.get(i).getId();
+
+				for (int j = 0; j < size; j++) {
+					Long avialble = data.get(j).getId();
+
+					if (selected == avialble) {
+						data.remove(j);
+						size--;
+					}
+
+				}
+
+			}
+
+			// services.remove(data);
+			singlePlandata = new PlanData(data, billData, contractPeriod,
+					status, singlePlandata, services);
+
+		}
+
+		return this.apiJsonSerializerService.serializePlanDataToJson(
+				prettyPrint, responseParameters, singlePlandata);
+	}
+
+	@PUT
+	@Path("{planCode}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response updatePlan(@PathParam("planCode") final Long planCode,
+			final String jsonRequestBody) {
+
+		PlansCommand command = this.apiDataConversionService
+				.convertJsonToPlansCommand(null, jsonRequestBody);
+		PlanData serviceData = this.planReadPlatformService
+				.retrievePlanData(planCode);
+		List<ServiceData> services = this.priceReadPlatformService
+				.retrievePrcingDetails(planCode);
+		CommandProcessingResult entityIdentifier = this.planWritePlatformService
+				.updatePlan(command, serviceData, services,planCode);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+
+	@DELETE
+	@Path("{planCode}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response deleteSubscription(
+			@PathParam("planCode") final Long planCode) {
+		List<ServiceData> services = this.priceReadPlatformService
+				.retrievePrcingDetails(planCode);
+
+		PlanData serviceData = this.planReadPlatformService
+				.retrievePlanData(planCode);
+
+		this.planWritePlatformService.deletePlan(planCode, serviceData,
+				services);
+
+		return Response.ok().build();
+	}
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/commands/PlansCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/commands/PlansCommand.java
new file mode 100644
index 0000000..d8bad6c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/commands/PlansCommand.java
@@ -0,0 +1,135 @@
+package org.mifosplatform.portfolio.plan.commands;
+
+import java.util.Set;
+
+import org.joda.time.LocalDate;
+
+public class PlansCommand {
+
+
+		private final String plan_code;
+
+		private final String plan_description;
+		private final String contractPeriod;
+
+		 private final LocalDate startDate;
+		 private final LocalDate endDate;
+
+		private Long status;
+		private final String[] services;
+		private String charge_code;
+		private final Set<String> modifiedParameters;
+		private final Long bill_rule;
+
+		public PlansCommand(final Set<String> modifiedParameters,
+
+				final String plan_code,final String plan_description,final LocalDate startDate,
+				final LocalDate endDate,final Long status,String[] services,
+				final Long bill_rule,final String charge_code,final String contractPeriod) {
+			this.plan_code = plan_code;
+            this.plan_description=plan_description;
+			this.startDate = startDate;
+			this.endDate = endDate;;
+			this.status = status;
+			this.services=services;
+			this.charge_code=charge_code;
+			this.bill_rule=bill_rule;
+			this.contractPeriod=contractPeriod;
+
+			this.modifiedParameters = modifiedParameters;
+		}
+
+
+
+		public String getPlan_code() {
+			return plan_code;
+		}
+
+		public String getPlan_description() {
+			return plan_description;
+		}
+
+		public LocalDate getStartDate() {
+			return startDate;
+		}
+
+		public LocalDate getEndDate() {
+			return endDate;
+		}
+
+
+
+		public Long getStatus() {
+			return status;
+		}
+
+
+
+		public Long getBillRule() {
+			return bill_rule;
+		}
+
+
+
+		public String[] getServices() {
+			return services;
+		}
+
+
+
+		public String getCharge_code() {
+			return charge_code;
+		}
+
+		public Set<String> getModifiedParameters() {
+			return modifiedParameters;
+		}
+
+
+
+		public String getContractPeriod() {
+			return contractPeriod;
+		}
+
+
+
+		public Long getBill_rule() {
+			return bill_rule;
+		}
+
+		public boolean isplanCodeChanged() {
+			return this.modifiedParameters.contains("plan_code");
+		}
+
+		public boolean isplanDescriptionChanged() {
+			return this.modifiedParameters.contains("plan_description");
+		}
+		public boolean isStartDateChanged() {
+			return this.modifiedParameters.contains("startDate");
+		}
+		public boolean isendDateChanged() {
+			return this.modifiedParameters.contains("endDate");
+		}
+
+		public boolean isPlanStatusChanged() {
+			return this.modifiedParameters.contains("status");
+		}
+
+		public boolean isBillingCycleChanged() {
+			return this.modifiedParameters.contains("anyDayAllowed");
+		}
+
+		public boolean isBillingRuleChanged() {
+			return this.modifiedParameters.contains("bill_rule");
+		}
+
+		public boolean isServicesChanged() {
+			return this.modifiedParameters.contains("services");
+		}
+
+		public boolean isContractPeriodChanged() {
+			return this.modifiedParameters.contains("contractPeriod");
+		}
+
+
+		}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/EnumData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/EnumData.java
new file mode 100644
index 0000000..6c232c7
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/EnumData.java
@@ -0,0 +1,32 @@
+package org.mifosplatform.portfolio.plan.data;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class EnumData {
+
+	private List<EnumOptionData> statusType,billingType,billingCycleType;
+
+	public EnumData( final List<EnumOptionData> statusType,final List<EnumOptionData> billingType,final List<EnumOptionData> billingCycleType)
+	{
+
+		this.billingType=billingType;
+		this.statusType=statusType;
+		this.billingCycleType=billingCycleType;
+	}
+
+	public List<EnumOptionData> getStatusType() {
+		return statusType;
+	}
+
+	public List<EnumOptionData> getBillingType() {
+		return billingType;
+	}
+
+	public List<EnumOptionData> getBillingCycleType() {
+		return billingCycleType;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanCodeData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanCodeData.java
new file mode 100644
index 0000000..2aff4b0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanCodeData.java
@@ -0,0 +1,38 @@
+package org.mifosplatform.portfolio.plan.data;
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+
+public class PlanCodeData {
+	private Long id;
+	private String planCode;
+	private List<ServiceData> availableServices;
+	private LocalDate start_date;
+	public PlanCodeData(final Long id,final String planCode,final List<ServiceData> data)
+	{
+		this.id=id;
+		this.planCode=planCode;
+		this.availableServices=data;
+		this.start_date=new LocalDate();
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public String getPlanCode() {
+		return planCode;
+	}
+
+	public List<ServiceData> getData() {
+		return availableServices;
+	}
+
+	public LocalDate getStartDate() {
+		return start_date;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanData.java
new file mode 100644
index 0000000..eb72a22
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/PlanData.java
@@ -0,0 +1,272 @@
+package org.mifosplatform.portfolio.plan.data;
+
+
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.billingorder.data.BillRuleData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+
+public class PlanData {
+
+		private final Long id;
+		private final Long billRule;
+
+		private final String plan_code;
+		private final String plan_description;
+		private  LocalDate startDate;
+		private final LocalDate endDate;
+		private final Long status;
+		private  EnumOptionData planstatus;
+		private final String service_description;
+		private  final List<ServiceData> services;
+		private final List<ServiceData>selectedServices;
+		private List<String> contractPeriod;
+		private List<SubscriptionData> subscriptiondata;
+		private List<BillRuleData> statusType;
+		private List<EnumOptionData> planStatus;
+		private final String Period;
+		
+		private PlanData datas;
+		private long statusname;
+
+
+
+		public  PlanData(final Long id,final String plan_code)
+		{
+
+			this.id=id;
+			this.plan_code=plan_code;
+			this.plan_description=null;
+			this.endDate=null;
+			this.startDate=null;
+			this.subscriptiondata=null;
+			this.status=null;
+			this.statusType=null;
+			this.services=null;
+			this.service_description=null;
+			this.billRule=null;
+			this.Period=null;
+			this.datas=null;
+			this.selectedServices=null;
+
+		}
+
+
+
+		public PlanData(Long id, String plan_code,
+				String service_description, LocalDate start_date,
+				Long plan_status, LocalDate end_date,EnumOptionData status) {
+			this.id=id;
+			this.plan_code=plan_code;
+			this.service_description=service_description;
+			this.startDate=start_date;
+			this.status=plan_status;
+			this.endDate=end_date;
+			this.billRule=null;
+			this.plan_description=null;
+			this.services=null;
+			this.statusType=null;
+			this.Period=null;
+			this.datas=null;
+			this.selectedServices=null;
+			this.planstatus=status;
+		}
+
+
+		public PlanData(Long id, String plan_code, Long charge_code,
+				String contract_period, LocalDate startDate, LocalDate endDate) {
+			this.id=id;
+			this.plan_code=plan_code;
+			this.service_description=null;
+			this.startDate=startDate;
+			this.status=charge_code;
+			this.billRule=null;
+			this.endDate=endDate;
+			this.plan_description=contract_period;
+			this.services=null;
+			this.statusType=null;
+			this.Period=null;
+			this.datas=null;
+			this.selectedServices=null;
+		}
+
+		public PlanData(List<ServiceData> data, List<BillRuleData> billData,
+				List<SubscriptionData> contractPeriod,
+			List<EnumOptionData> status,PlanData datas,List<ServiceData> selectedservice) {
+			this.id=datas.getId();
+		this.plan_code=datas.getPlan_code();
+			this.subscriptiondata=contractPeriod;
+			this.startDate=datas.getStartDate();
+			this.status=datas.getStatus();
+		this.billRule=datas.getBillRule();
+		this.endDate=datas.getEndDate();
+			this.plan_description=datas.getPlan_description();
+		this.services=data;
+	
+		this.selectedServices=selectedservice;
+		this.statusType=billData;
+		this.planStatus=status;
+			this.service_description=null;
+			this.Period=null;
+			this.datas=datas;
+			this.datas=null;
+
+		}
+
+
+
+
+		public PlanData(List<ServiceData> data, List<BillRuleData> billData,
+				List<SubscriptionData> contractPeriod,
+				List<EnumOptionData> status) {
+
+			this.id=null;
+			this.plan_code=null;
+			this.subscriptiondata=contractPeriod;
+			this.startDate=null;
+			this.status=null;
+			this.billRule=null;
+			this.endDate=null;
+			this.plan_description=null;
+			this.services=data;
+			this.statusType=billData;
+			this.planStatus=status;
+			this.service_description=null;
+			this.Period=null;
+			this.datas=null;
+			this.selectedServices=null;
+			this.startDate=new LocalDate();
+		}
+
+
+
+		public PlanData(Long id, String plan_code, LocalDate startDate,
+				LocalDate endDate, Long bill_rule, String contractPeriod,
+				 long status, String plan_description,
+				long status1) {
+
+			this.id=id;
+			this.plan_code=plan_code;
+		this.service_description=null;
+			this.startDate=startDate;
+			this.status=status;
+		this.billRule=bill_rule;
+			this.endDate=endDate;
+			this.plan_description=plan_description;
+		this.services=null;
+			this.statusType=null;
+		this.Period=contractPeriod;
+		
+			this.selectedServices=null;
+			this.statusname=status1;
+		}
+
+
+
+		public EnumOptionData getPlanstatus() {
+			return planstatus;
+		}
+
+
+
+		public PlanData getDatas() {
+			return datas;
+		}
+
+		public List<ServiceData> getSelectedServices() {
+			return selectedServices;
+		}
+
+
+		public long getStatusname() {
+			return statusname;
+		}
+
+
+
+		
+
+
+
+		public List<EnumOptionData> getPlanStatus() {
+			return planStatus;
+		}
+
+
+
+		public String getPeriod() {
+			return Period;
+		}
+
+		public void setContractPeriod(List<String> contractPeriod) {
+			this.contractPeriod = contractPeriod;
+		}
+
+		public List<BillRuleData> getStatusType() {
+			return statusType;
+		}
+
+
+
+
+		public Long getId() {
+			return id;
+		}
+
+		public String getPlan_code() {
+			return plan_code;
+		}
+
+		public String getPlan_description() {
+			return plan_description;
+		}
+
+		public LocalDate getStartDate() {
+			return startDate;
+		}
+
+		public LocalDate getEndDate() {
+			return endDate;
+		}
+
+		public Long getStatus() {
+			return status;
+		}
+
+		public List<ServiceData> getServicedata() {
+			return services;
+		}
+
+
+
+		public Long getBillRule() {
+			return billRule;
+		}
+
+
+
+		public List<String> getContractPeriod() {
+			return contractPeriod;
+		}
+
+
+
+
+
+		public String getService_description() {
+			return service_description;
+		}
+
+
+
+		public List<SubscriptionData> getSubscriptiondata() {
+			return subscriptiondata;
+		}
+
+
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceData.java
new file mode 100644
index 0000000..f67bbcb
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceData.java
@@ -0,0 +1,148 @@
+package org.mifosplatform.portfolio.plan.data;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class ServiceData {
+
+	private final Long id;
+
+	private final String serviceCode;
+	private final String planDescription;
+	private final String planCode;
+	private final List<EnumOptionData> data;
+	private final String discountCode;
+	private final BigDecimal price;
+	private final String chargeCode;
+	private final String chargeVariant;
+	private final String services;
+	private Long serviceId;
+	private Long planId;
+	private String chargeDescription;
+	private String serviceDescription;
+	private String code;
+
+	public ServiceData(final List<EnumOptionData> data) {
+		this.id = null;
+		this.discountCode = null;
+		this.serviceCode = null;
+		this.planDescription = null;
+		this.planCode = null;
+		this.data = data;
+		this.price = null;
+		this.chargeCode = null;
+		this.chargeVariant = null;
+		this.services = null;
+	}
+
+	public ServiceData(Long id, String planCode, String serviceCode,
+			String planDescription, String chargeCode, String charging_variant,
+			BigDecimal price) {
+
+		this.id = id;
+		this.discountCode = null;
+		this.serviceCode = serviceCode;
+		this.planDescription = planDescription;
+		this.planCode = planCode;
+		this.data = null;
+		this.chargeCode = chargeCode;
+		this.chargeVariant = charging_variant;
+		this.price = price;
+		this.services = null;
+
+	}
+
+	public ServiceData(Long id, Long planId, String planCode,
+			String chargeCode, String serviceCode, String serviceDescription) {
+		this.id = id;
+		this.serviceId = planId;
+		this.discountCode = null;
+		this.serviceCode = serviceCode;
+		this.planDescription = null;
+		this.planCode = serviceDescription;
+		this.data = null;
+		this.chargeCode = chargeCode;
+		this.chargeVariant = null;
+		this.price = null;
+		this.services = null;
+		this.serviceDescription = serviceDescription;
+		this.code=planCode;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public String getServiceCode() {
+		return serviceCode;
+	}
+
+	public String getServiceDescription() {
+		return planDescription;
+	}
+
+	public String getDiscountCode() {
+		return discountCode;
+	}
+
+	public String getPlanCode() {
+		return planCode;
+	}
+
+	public String getServices() {
+		return services;
+	}
+
+	public Long getPlanId() {
+		return planId;
+	}
+
+	public String getPlanDescription() {
+		return planDescription;
+	}
+
+	public List<EnumOptionData> getData() {
+		return data;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public String getChargeVariant() {
+		return chargeVariant;
+	}
+
+	public Long getServiceId() {
+		return serviceId;
+	}
+
+	public String getChargeDescription() {
+		return chargeDescription;
+	}
+
+	public void setChargeDescription(String chargeDescription) {
+		this.chargeDescription = chargeDescription;
+	}
+
+	public void setServiceId(Long serviceId) {
+		this.serviceId = serviceId;
+	}
+
+	public void setPlanId(Long planId) {
+		this.planId = planId;
+	}
+
+	public String getCode() {
+		return code;
+	}
+	
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceDetailsData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceDetailsData.java
new file mode 100644
index 0000000..3168f9d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/ServiceDetailsData.java
@@ -0,0 +1,29 @@
+package org.mifosplatform.portfolio.plan.data;
+
+public class ServiceDetailsData {
+
+	private final Long id;
+	private final String service_code;
+	private final String plan_code;
+
+	public ServiceDetailsData(final Long id,final String service_code,final String plan_code)
+	{
+
+		this.id=id;
+		this.service_code=service_code;
+		this.plan_code=plan_code;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public String getService_code() {
+		return service_code;
+	}
+
+	public String getPlan_code() {
+		return plan_code;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/SinglePlandata.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/SinglePlandata.java
new file mode 100644
index 0000000..4a9e600
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/data/SinglePlandata.java
@@ -0,0 +1,177 @@
+package org.mifosplatform.portfolio.plan.data;
+
+import java.util.Date;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.billingorder.data.BillRuleData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+public class SinglePlandata  {
+	private final Long id;
+	private final Long billRule;
+
+	private final String plan_code;
+	private final String plan_description;
+	private final Date startDate;
+	private final Date endDate;
+	private final String status;
+	private final String service_description;
+	private List<ServiceData> servicedata;
+	private List<String> contractPeriod;
+	private List<SubscriptionData> subscriptiondata;
+	private List<BillRuleData> statusType;
+	private List<EnumOptionData> planStatus;
+	private final String Period;
+	private boolean billingcycle;
+
+
+
+	public SinglePlandata(Long id, String plan_code, Date startDate,
+			Date endDate, Long bill_rule, String contractPeriod,
+			boolean isanyday_bill, String plan_status, String plan_description) {
+		this.id=id;
+		this.plan_code=plan_code;
+		this.service_description=null;
+		this.startDate=startDate;
+		this.status=plan_status;
+		this.billRule=bill_rule;
+		this.endDate=endDate;
+		this.plan_description=plan_description;
+		this.servicedata=null;
+		this.statusType=null;
+		this.Period=contractPeriod;
+		this.billingcycle=isanyday_bill;
+
+
+	}
+
+
+
+	public List<ServiceData> getServicedata() {
+		return servicedata;
+	}
+
+
+
+	public void setServicedata(List<ServiceData> servicedata) {
+		this.servicedata = servicedata;
+	}
+
+
+
+	public List<String> getContractPeriod() {
+		return contractPeriod;
+	}
+
+
+
+	public void setContractPeriod(List<String> contractPeriod) {
+		this.contractPeriod = contractPeriod;
+	}
+
+
+
+	public List<SubscriptionData> getSubscriptiondata() {
+		return subscriptiondata;
+	}
+
+
+
+	public void setSubscriptiondata(List<SubscriptionData> subscriptiondata) {
+		this.subscriptiondata = subscriptiondata;
+	}
+
+
+
+	public List<BillRuleData> getStatusType() {
+		return statusType;
+	}
+
+
+
+	public void setStatusType(List<BillRuleData> statusType) {
+		this.statusType = statusType;
+	}
+
+
+
+	public List<EnumOptionData> getPlanStatus() {
+		return planStatus;
+	}
+
+
+
+	public void setPlanStatus(List<EnumOptionData> planStatus) {
+		this.planStatus = planStatus;
+	}
+
+
+
+	public boolean isBillingcycle() {
+		return billingcycle;
+	}
+
+
+
+	public void setBillingcycle(boolean billingcycle) {
+		this.billingcycle = billingcycle;
+	}
+
+
+
+	public Long getId() {
+		return id;
+	}
+
+
+
+	public Long getBillRule() {
+		return billRule;
+	}
+
+
+
+	public String getPlan_code() {
+		return plan_code;
+	}
+
+
+
+	public String getPlan_description() {
+		return plan_description;
+	}
+
+
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+
+
+	public Date getEndDate() {
+		return endDate;
+	}
+
+
+
+	public String getStatus() {
+		return status;
+	}
+
+
+
+	public String getService_description() {
+		return service_description;
+	}
+
+
+
+	public String getPeriod() {
+		return Period;
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingCycleType.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingCycleType.java
new file mode 100644
index 0000000..4711ddb
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingCycleType.java
@@ -0,0 +1,46 @@
+package org.mifosplatform.portfolio.plan.domain;
+
+public enum BillingCycleType {
+
+
+	OPTION(0, "CategoryType.exact"), //
+	ANY_DAY(1, "CategoryType.full"),
+
+	  INVALID(3, "CategoryType.invalid");
+
+
+    private final Integer value;
+	private final String code;
+
+    private BillingCycleType(final Integer value, final String code) {
+        this.value = value;
+		this.code = code;
+    }
+
+    public Integer getValue() {
+        return this.value;
+    }
+
+	public String getCode() {
+		return code;
+	}
+
+	public static BillingCycleType fromInt(final Integer frequency) {
+
+		BillingCycleType repaymentFrequencyType = BillingCycleType.INVALID;
+		switch (frequency) {
+		case 0:
+			repaymentFrequencyType = BillingCycleType.OPTION;
+			break;
+		case 1:
+			repaymentFrequencyType = BillingCycleType.ANY_DAY;
+			break;
+
+		default:
+			repaymentFrequencyType = BillingCycleType.INVALID;
+			break;
+		}
+		return repaymentFrequencyType;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingTypeEnum.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingTypeEnum.java
new file mode 100644
index 0000000..9b51501
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/BillingTypeEnum.java
@@ -0,0 +1,48 @@
+package org.mifosplatform.portfolio.plan.domain;
+
+public enum BillingTypeEnum {
+	EXACT(0, "CategoryType.exact"), //
+	FULL(1, "CategoryType.full"),
+	CUSTOM(1, "CategoryType.custom"),
+	  INVALID(3, "CategoryType.invalid");
+
+
+    private final Integer value;
+	private final String code;
+
+    private BillingTypeEnum(final Integer value, final String code) {
+        this.value = value;
+		this.code = code;
+    }
+
+    public Integer getValue() {
+        return this.value;
+    }
+
+	public String getCode() {
+		return code;
+	}
+
+	public static BillingTypeEnum fromInt(final Integer frequency) {
+
+		BillingTypeEnum repaymentFrequencyType = BillingTypeEnum.INVALID;
+		switch (frequency) {
+		case 0:
+			repaymentFrequencyType = BillingTypeEnum.EXACT;
+			break;
+		case 1:
+			repaymentFrequencyType = BillingTypeEnum.FULL;
+			break;
+		case 2:
+			repaymentFrequencyType = BillingTypeEnum.CUSTOM;
+			break;
+
+
+		default:
+			repaymentFrequencyType = BillingTypeEnum.INVALID;
+			break;
+		}
+		return repaymentFrequencyType;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/SavingBillingCycleEnum.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/SavingBillingCycleEnum.java
new file mode 100644
index 0000000..db8d7fe
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/SavingBillingCycleEnum.java
@@ -0,0 +1,30 @@
+package org.mifosplatform.portfolio.plan.domain;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class SavingBillingCycleEnum {
+
+
+	public static EnumOptionData interestCompoundingPeriodType(final int id) {
+		return interestCompoundingPeriodType(BillingCycleType.fromInt(id));
+	}
+
+	public static EnumOptionData interestCompoundingPeriodType(final BillingCycleType type) {
+		final String codePrefix = "deposit.interest.compounding.period.";
+		EnumOptionData optionData = null;
+		switch (type) {
+		case OPTION:
+			optionData = new EnumOptionData(BillingCycleType.OPTION.getValue().longValue(), codePrefix + BillingCycleType.OPTION.getCode(), "OPTION");
+			break;
+		case ANY_DAY:
+			optionData = new EnumOptionData(BillingCycleType.ANY_DAY.getValue().longValue(), codePrefix + BillingCycleType.ANY_DAY.getCode(), "ANY_DAY");
+			break;
+
+		default:
+			optionData = new EnumOptionData(BillingCycleType.INVALID.getValue().longValue(), BillingCycleType.INVALID.getCode(), "INVALID");
+			break;
+		}
+		return optionData;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/StatusTypeEnum.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/StatusTypeEnum.java
new file mode 100644
index 0000000..956ae4b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/domain/StatusTypeEnum.java
@@ -0,0 +1,50 @@
+package org.mifosplatform.portfolio.plan.domain;
+
+
+public enum StatusTypeEnum {
+
+	ACTIVE(1, "CategoryType.direct"), //
+	INACTIVE(2, "CategoryType.cash"),
+	CANCELLED(3, "CategoryType.cash"),
+	  INVALID(4, "CategoryType.invalid");
+
+
+    private final Integer value;
+	private final String code;
+
+    private StatusTypeEnum(final Integer value, final String code) {
+        this.value = value;
+		this.code = code;
+    }
+
+    public Integer getValue() {
+        return this.value;
+    }
+
+	public String getCode() {
+		return code;
+	}
+
+	public static StatusTypeEnum fromInt(final Integer frequency) {
+
+		StatusTypeEnum repaymentFrequencyType = StatusTypeEnum.INVALID;
+		switch (frequency) {
+		case 1:
+			repaymentFrequencyType = StatusTypeEnum.ACTIVE;
+			break;
+		case 2:
+			repaymentFrequencyType = StatusTypeEnum.INACTIVE;
+			break;
+
+		case 3:
+			repaymentFrequencyType = StatusTypeEnum.CANCELLED;
+			break;
+
+
+		default:
+			repaymentFrequencyType = StatusTypeEnum.INVALID;
+			break;
+		}
+		return repaymentFrequencyType;
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/exceptions/PlanNotFundException.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/exceptions/PlanNotFundException.java
new file mode 100644
index 0000000..329e1a6
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/exceptions/PlanNotFundException.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.plan.exceptions;
+
+import org.mifosplatform.infrastructure.core.exception.AbstractPlatformResourceNotFoundException;
+
+public class PlanNotFundException extends AbstractPlatformResourceNotFoundException {
+
+public PlanNotFundException() {
+super("error.msg.depositproduct.id.invalid",
+		"Charge Code already exists with same plan");
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/ChargeVariant.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/ChargeVariant.java
new file mode 100644
index 0000000..b8a7064
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/ChargeVariant.java
@@ -0,0 +1,48 @@
+package org.mifosplatform.portfolio.plan.service;
+
+
+public enum ChargeVariant {
+
+	SUBSCRIBER_TYPE(0, "ChargeVariant.subscriber"), //
+	AREAS(1, "ChargeVariant.areas"), //
+	BASE(2, "ChargeVariant.base"),//
+   INVALID(3, "ChargeVariant.invalid");
+
+    private final Integer value;
+	private final String code;
+
+    private ChargeVariant(final Integer value, final String code) {
+        this.value = value;
+		this.code = code;
+    }
+
+    public Integer getValue() {
+        return this.value;
+    }
+
+	public String getCode() {
+		return code;
+	}
+
+	public static ChargeVariant fromInt(final Integer frequency) {
+
+		ChargeVariant repaymentFrequencyType = ChargeVariant.INVALID;
+		switch (frequency) {
+		case 0:
+			repaymentFrequencyType = ChargeVariant.SUBSCRIBER_TYPE;
+			break;
+		case 1:
+			repaymentFrequencyType = ChargeVariant.AREAS;
+			break;
+		case 2:
+			repaymentFrequencyType = ChargeVariant.BASE;
+			break;
+
+		default:
+			repaymentFrequencyType = ChargeVariant.INVALID;
+			break;
+		}
+		return repaymentFrequencyType;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanCommandValidator.java
new file mode 100644
index 0000000..cf4a670
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanCommandValidator.java
@@ -0,0 +1,33 @@
+package org.mifosplatform.portfolio.plan.service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+
+
+public class PlanCommandValidator {
+
+	private final PlansCommand command;
+
+	public PlanCommandValidator(final PlansCommand command) {
+		this.command=command;
+	}
+
+
+	public void validateForCreate() {
+         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("plan");
+		baseDataValidator.reset().parameter("plan_code").value(command.getPlan_code()).notBlank();
+		//baseDataValidator.reset().parameter("subscription_type").value(command.getSubscription_type()).notBlank().notNull();
+		baseDataValidator.reset().parameter("startDate").value(command.getStartDate()).notBlank();
+		baseDataValidator.reset().parameter("services").value(command.getServices()).notBlank();
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformService.java
new file mode 100644
index 0000000..da2cf6d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformService.java
@@ -0,0 +1,22 @@
+package org.mifosplatform.portfolio.plan.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.billingorder.data.BillRuleData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+public interface PlanReadPlatformService {
+	List<ServiceData> retrieveAllServices();
+	List<PlanData> retrievePlanData();
+	List<SubscriptionData> retrieveSubscriptionData();
+	List<EnumOptionData> retrieveNewStatus();
+	List<ServiceData> getselectedService(List<ServiceData> data,List<ServiceData> services);
+	List<BillRuleData> retrievebillRules();
+	PlanData retrievePlanData(Long planCode);
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformServiceImpl.java
new file mode 100644
index 0000000..4dd4da6
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanReadPlatformServiceImpl.java
@@ -0,0 +1,236 @@
+package org.mifosplatform.portfolio.plan.service;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Arrays;
+import java.util.List;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingorder.data.BillRuleData;
+import org.mifosplatform.portfolio.order.data.SavingStatusEnumaration;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.plan.domain.StatusTypeEnum;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+@Service
+public class PlanReadPlatformServiceImpl implements PlanReadPlatformService {
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public PlanReadPlatformServiceImpl(final PlatformSecurityContext context,
+			final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+	@Override
+	public List<ServiceData> retrieveAllServices() {
+
+		context.authenticatedUser();
+		PlanMapper mapper = new PlanMapper();
+
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+	private static final class PlanMapper implements RowMapper<ServiceData> {
+
+		public String schema() {
+			return "da.id as id, da.service_code as service_code, da.service_description as service_description "
+					+ " from service da where da.is_deleted='n' ";
+
+		}
+
+		@Override
+		public ServiceData mapRow(final ResultSet rs,
+				@SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String serviceCode = rs.getString("service_code");
+			String serviceDescription = rs.getString("service_description");
+			//String serviceDescription = rs.getString("service_description");
+			return new ServiceData(id,null,null,null,serviceCode, serviceDescription);
+
+		}
+	}
+
+	@Override
+	public List<BillRuleData> retrievebillRules() {
+
+		context.authenticatedUser();
+
+		BillRuleDataMapper mapper = new BillRuleDataMapper();
+
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+	}
+
+	private static final class BillRuleDataMapper implements
+			RowMapper<BillRuleData> {
+
+		public String schema() {
+			return "b.id as id,b.billing_rule as billingRule from billing_rules b;";
+
+		}
+
+		@Override
+		public BillRuleData mapRow(ResultSet rs, int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String billrules = rs.getString("billingRule");
+			BillRuleData data = new BillRuleData(id, billrules);
+
+			return data;
+
+		}
+
+	}
+
+	@Override
+	public List<PlanData> retrievePlanData() {
+
+		context.authenticatedUser();
+
+		PlanDataMapper mapper = new PlanDataMapper();
+
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+	}
+
+	private static final class PlanDataMapper implements RowMapper<PlanData> {
+
+		public String schema() {
+			
+			
+			return " pm.id,pm.plan_code,pm.plan_description,pm.start_date,pm.end_date,pm.plan_status "
+
+					 +"from  plan_master pm  where pm.is_deleted='n' "; 
+
+		}
+
+		@Override
+		public PlanData mapRow(ResultSet rs, int rowNum) throws SQLException {
+
+			Long id = rs.getLong("id");
+			String plan_code = rs.getString("plan_code");
+			String service_description = rs.getString("plan_description");
+			LocalDate start_date = JdbcSupport.getLocalDate(rs, "start_date");
+		    int plan_status = JdbcSupport.getInteger(rs,"plan_status");
+			LocalDate end_date = JdbcSupport.getLocalDate(rs, "end_date");
+			long plan=plan_status;
+			EnumOptionData status=SavingStatusEnumaration.interestCompoundingPeriodType(plan_status);
+			return new PlanData(id, plan_code, service_description, start_date,
+					plan, end_date,status);
+		}
+	}
+
+	@Override
+	public List<SubscriptionData> retrieveSubscriptionData() {
+
+		context.authenticatedUser();
+
+		SubscriptionDataMapper mapper = new SubscriptionDataMapper();
+
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+	}
+
+	private static final class SubscriptionDataMapper implements
+			RowMapper<SubscriptionData> {
+
+		public String schema() {
+			return " sb.id as id,sb.contract_period as subscription_type,sb.contract_duration as units "
+					+ " from contract_period sb where is_deleted=0";
+
+		}
+
+		@Override
+		public SubscriptionData mapRow(ResultSet rs, int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String subscription_type = rs.getString("subscription_type");
+			String units = rs.getString("units");
+
+			SubscriptionData data = new SubscriptionData(id, subscription_type);
+
+			return data;
+
+		}
+
+	}
+
+	@Override
+	public List<EnumOptionData> retrieveNewStatus() {
+		EnumOptionData active = SavingStatusEnumaration
+				.interestCompoundingPeriodType(StatusTypeEnum.ACTIVE);
+		EnumOptionData inactive = SavingStatusEnumaration
+				.interestCompoundingPeriodType(StatusTypeEnum.INACTIVE);
+		List<EnumOptionData> categotyType = Arrays.asList(active, inactive);
+		return categotyType;
+
+	}
+
+	@Override
+	public PlanData retrievePlanData(Long planCode) {
+		  context.authenticatedUser();
+
+	        String sql = "SELECT pm.id as id,pm.plan_code as plan_code,pm.plan_description as plan_description,pm.start_date as start_date,"
+				+"pm.end_date as end_date,pm.plan_status as plan_status,pm.bill_rule as bill_rule,pm.contract_period as contract_period "
+				+"  from plan_master pm  Where pm.id=? and pm.is_deleted='n'";
+
+
+	        RowMapper<PlanData> rm = new ServiceMapper();
+
+	        return this.jdbcTemplate.queryForObject(sql, rm, new Object[] { planCode });
+	}
+
+
+	 private static final class ServiceMapper implements RowMapper<PlanData> {
+
+	        @Override
+	        public PlanData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String plan_code = rs.getString("plan_code");
+	            LocalDate startDate = JdbcSupport.getLocalDate(rs, "start_date");
+	            LocalDate endDate = JdbcSupport.getLocalDate(rs, "end_date");
+	            Long bill_rule = rs.getLong("bill_rule");
+	            int plan_status = JdbcSupport.getInteger(rs,"plan_status");
+	            String plan_description = rs.getString("plan_description");
+	            String contractPeriod = rs.getString("contract_period");
+	          
+	            EnumOptionData status = SavingStatusEnumaration.interestCompoundingPeriodType(plan_status);
+	            long status1=plan_status;
+	            return new PlanData(id,plan_code,startDate,endDate,bill_rule,contractPeriod,status1,plan_description,status1);
+	        }
+	}
+
+	@Override
+	public List<ServiceData> getselectedService(List<ServiceData> data,
+			List<ServiceData> services) {
+		// TODO Auto-generated method stub
+		return null;
+	}
+
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformService.java
new file mode 100644
index 0000000..120a32e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformService.java
@@ -0,0 +1,19 @@
+package org.mifosplatform.portfolio.plan.service;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+
+public interface PlanWritePlatformService {
+
+	CommandProcessingResult createPlan(final PlansCommand command);
+
+	CommandProcessingResult updatePlan(PlansCommand command, PlanData serviceData,
+			List<ServiceData> services,Long planId);
+	
+	void deletePlan(Long planCode, PlanData serviceData,
+			List<ServiceData> services);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformServiceImpl.java
new file mode 100644
index 0000000..8b034b3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/plan/service/PlanWritePlatformServiceImpl.java
@@ -0,0 +1,178 @@
+package org.mifosplatform.portfolio.plan.service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.savingplan.domain.Plan;
+import org.mifosplatform.portfolio.savingplan.domain.PlanRepository;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceDescription;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceDescriptionRepository;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceDetails;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class PlanWritePlatformServiceImpl implements PlanWritePlatformService {
+
+	private PlatformSecurityContext context;
+	private PlanRepository planRepository;
+	private ServiceDescriptionRepository serviceDescriptionRepository;
+	private ServiceRepository serviceRepository;
+
+
+	@Autowired
+	public PlanWritePlatformServiceImpl(final PlatformSecurityContext context,
+			final PlanRepository planRepository,
+			final ServiceDescriptionRepository serviceDescriptionRepository,
+			final ServiceRepository serviceRepository) {
+		this.context = context;
+		this.planRepository = planRepository;
+		this.serviceDescriptionRepository = serviceDescriptionRepository;
+		this.serviceRepository=serviceRepository;
+
+	}
+
+	@Override
+	public CommandProcessingResult createPlan(PlansCommand command) {
+
+		try {
+
+
+			this.context.authenticatedUser();
+
+			PlanCommandValidator validator=new PlanCommandValidator(command);
+			validator.validateForCreate();
+			@SuppressWarnings("unchecked")
+			String[] services=command.getServices();
+			 List<ServiceDetails> serviceDetails = new ArrayList<ServiceDetails>();
+			Plan data = new Plan(command.getPlan_code(),
+					command.getPlan_description(), command.getStartDate(),
+					command.getEndDate(), command.getBillRule(),command.getStatus(),command.getContractPeriod(),serviceDetails);
+			 for (String clientId : services) {
+	                final Long id = Long.valueOf(clientId);
+	                ServiceDescription service1 = this.serviceDescriptionRepository.findOne(id);
+	                ServiceDetails detail=new ServiceDetails(service1.getService_code());
+	             //  serviceDetails.add(detail);
+	               data.addServieDetails(detail);
+			  }
+         this.planRepository.save(data);
+
+
+			return new CommandProcessingResult(Long.valueOf(-1));
+
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+	}
+
+	private void handleDataIntegrityIssues(PlansCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+	 @Transactional 
+	@Override
+	public CommandProcessingResult updatePlan(PlansCommand command,
+			PlanData serviceData, List<ServiceData> services,Long planId) {
+
+		try
+
+		{
+
+			PlanCommandValidator validator=new PlanCommandValidator(command);
+			validator.validateForCreate();
+		Plan plan=this.planRepository.findOne(planId);
+
+		// ServiceDetails serviceDetails = new ArrayList<ServiceDetails>();
+
+			for(ServiceData data:services)
+			{
+
+				 ServiceDetails details=new ServiceDetails(data.getServiceCode());
+				 plan.addServieDetails(details);
+
+				if(command.isServicesChanged())
+				{
+					plan.getDetails().clear();
+					String[] service=command.getServices();
+					 for (String clientId : service) {
+			                final Long id = Long.valueOf(clientId);
+			                ServiceDescription service1 = this.serviceDescriptionRepository.findOne(id);
+			                ServiceDetails detail=new ServiceDetails(service1.getService_code());
+			             //  serviceDetails.add(detail);
+			               plan.addServieDetails(detail);
+					  }
+				}
+					 else
+					 {
+					ServiceDetails serviceDetails=new ServiceDetails(data.getServiceCode());
+					  plan.addServieDetails(serviceDetails);
+				}
+
+
+			}
+
+
+		plan.update(command, serviceData,services);
+		 this.planRepository.save(plan);
+			return new CommandProcessingResult(Long.valueOf(serviceData.getId()));
+	} catch (DataIntegrityViolationException dve) {
+		 handleDataIntegrityIssues(command, dve);
+		 return new CommandProcessingResult(Long.valueOf(-1));
+	}
+	}
+
+ @Transactional
+@Override
+public void deletePlan(Long planCode, PlanData serviceData,
+		List<ServiceData> services) {
+	 /*if(serviceData==null){
+			throw new DepositProductNotFoundException(planCode);
+		}*/
+
+
+//	 Plan plan=new Plan(serviceData.getPlan_code(),serviceData.getPlan_description(),
+//			 serviceData.getStartDate(),serviceData.getEndDate(),serviceData.getBillRule(),
+//			 serviceData.getStatus(),serviceData.isBillingcycle(),
+//			 "contract",serviceDetails);
+
+	 Plan plan=this.planRepository.findOne(planCode);
+ for(ServiceData data:services)
+		{
+
+			 ServiceDetails details=new ServiceDetails(data.getPlanCode());
+			 plan.addServieDetails(details);
+			 details.delete();
+
+		}
+
+
+
+
+	 plan.delete(serviceData);
+
+
+
+	 this.planRepository.save(plan);
+
+}
+
+
+	
+}
+
+
+
+
+
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/api/PricingApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/api/PricingApiResource.java
new file mode 100644
index 0000000..26b02d8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/api/PricingApiResource.java
@@ -0,0 +1,209 @@
+package org.mifosplatform.portfolio.pricing.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.charge.data.ChargesData;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+import org.mifosplatform.portfolio.pricing.data.PricingData;
+import org.mifosplatform.portfolio.pricing.service.PriceReadPlatformService;
+import org.mifosplatform.portfolio.pricing.service.PriceWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/prices")
+@Component
+@Scope("singleton")
+public class PricingApiResource {
+
+	private static final String planCode = null;
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PriceWritePlatformService priceWritePlatformService;
+
+	@Autowired
+	private PriceReadPlatformService priceReadPlatformService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	private final String entityType = "PRICE";
+
+	@POST
+	@Path("{planId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createSubscription(@PathParam("planId") final Long planId,
+			final String jsonRequestBody) {
+
+		PricingCommand command = this.apiDataConversionService
+				.convertJsonToPricingCommand(null, jsonRequestBody);
+		List<ServiceData> serviceData = this.priceReadPlatformService
+				.retrieveServiceCodeDetails(planId);
+		CommandProcessingResult userId = this.priceWritePlatformService
+				.createPricing(command, serviceData, planId);
+		return Response.ok().entity(userId).build();
+	}
+
+	@GET
+	@Path("template")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrievePricing(@QueryParam("plan_code") final Long planCode,
+			@Context final UriInfo uriInfo) {
+
+		// context.authenticatedUser().validateHasReadPermission("CLIENT");
+
+		final Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		List<ServiceData> serviceData = this.priceReadPlatformService
+				.retrievePrcingDetails(planCode);
+		List<ChargesData> chargeDatas = this.priceReadPlatformService
+				.retrieveChargeCode();
+		List<EnumOptionData> datas = this.priceReadPlatformService
+				.retrieveChargeVariantData();
+		List<DiscountMasterData> discountdata = this.priceReadPlatformService
+				.retrieveDiscountDetails();
+
+		PricingData data = new PricingData(serviceData, chargeDatas, datas,
+				discountdata, serviceData.get(0).getCode(), planCode,null);
+
+		return this.apiJsonSerializerService.serializePricingDataToJson(
+				prettyPrint, responseParameters, data);
+	}
+
+	@GET
+	@Path("{planCode}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrievePrice(@PathParam("planCode") final String planCode,
+			@Context final UriInfo uriInfo) {
+
+		// context.authenticatedUser().validateHasReadPermission("CLIENT");
+
+		final Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		List<ServiceData> serviceData = this.priceReadPlatformService
+				.retrievePriceDetails(planCode);
+
+		PricingData data = new PricingData(serviceData);
+
+		return this.apiJsonSerializerService.serializePricingDataToJson(
+				prettyPrint, responseParameters, data);
+	}
+
+	@GET
+	@Path("{priceId}/update")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrieveIndividualPrice(
+			@PathParam("priceId") final String priceId,
+			@Context final UriInfo uriInfo) {
+
+		// context.authenticatedUser().validateHasReadPermission("CLIENT");
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("plan_code", "planId", "serviceId", "chargeId",
+						"price", "chargeVariantId", "discountId", "planCode",
+						"id", "serviceData", "chargeData", "data",
+						"charge_code", "charge_varaint", "price"));
+
+		Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		boolean template = ApiParameterHelper.template(uriInfo
+				.getQueryParameters());
+
+		PricingData singlePriceData = this.priceReadPlatformService
+				.retrieveSinglePriceDetails(priceId);
+
+		List<ServiceData> serviceData = this.priceReadPlatformService
+				.retrievePrcingDetails(singlePriceData.getPlanId());
+		List<ChargesData> chargeDatas = this.priceReadPlatformService
+				.retrieveChargeCode();
+		List<EnumOptionData> datas = this.priceReadPlatformService
+				.retrieveChargeVariantData();
+		List<DiscountMasterData> discountdata = this.priceReadPlatformService
+				.retrieveDiscountDetails();
+
+		singlePriceData = new PricingData(serviceData, chargeDatas, datas,
+				discountdata, serviceData.get(0).getCode(),
+				singlePriceData.getPlanId(),singlePriceData);
+
+		// PricingData data=new PricingData(serviceData);
+
+		return this.apiJsonSerializerService.serializePricingDataToJson(
+				prettyPrint, responseParameters, singlePriceData);
+	}
+
+	@PUT
+	@Path("{priceId}/update")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response updatePrice(@PathParam("priceId") final Long priceId,
+			final String jsonRequestBody) {
+
+		PricingCommand command = this.apiDataConversionService
+				.convertJsonToPricingCommand(null, jsonRequestBody);
+
+		CommandProcessingResult entityIdentifier = this.priceWritePlatformService
+				.updatePrice(command, priceId);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+
+	@DELETE
+	@Path("{priceId}")
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response deletePrice(@PathParam("priceId") final Long priceId) {
+
+		this.priceWritePlatformService.deletePrice(priceId);
+
+		return Response.ok(1).build();
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/commands/PricingCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/commands/PricingCommand.java
new file mode 100644
index 0000000..9d96921
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/commands/PricingCommand.java
@@ -0,0 +1,82 @@
+package org.mifosplatform.portfolio.pricing.commands;
+
+import java.math.BigDecimal;
+import java.util.Set;
+
+public class PricingCommand {
+
+	private final  String plan_code;
+	private final String service_code;
+	private final String charge_code;
+	private final  String charging_variant;
+
+	private final  BigDecimal price;
+	private final Long discount_id;
+
+
+	private final Set<String> modifiedParameters;
+
+	public PricingCommand(Set<String> modifiedParameters,
+		 String plan_code, String service_code,
+			String charge_code, String charging_variant, BigDecimal price,
+			Long discount_id) {
+		this.charge_code=charge_code;
+		this.service_code=service_code;
+		this.plan_code=plan_code;
+		this.charging_variant=charging_variant;
+		this.price=price;
+		this.discount_id=discount_id;
+		this.modifiedParameters=modifiedParameters;
+
+
+	}
+
+	public String getPlanCode() {
+		return plan_code;
+	}
+
+	public String getServiceCode() {
+		return service_code;
+	}
+
+	public String getChargeCode() {
+		return charge_code;
+	}
+
+	public String getChargingVariant() {
+		return charging_variant;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public Long getDiscount_id() {
+		return discount_id;
+	}
+
+	public Set<String> getModifiedParameters() {
+		return modifiedParameters;
+	}
+
+	public boolean isServiceCodeChanged() {
+		return this.modifiedParameters.contains("service_code");
+	}
+
+	public boolean isChargeCodeChanged() {
+		return this.modifiedParameters.contains("charge_code");
+	}
+	public boolean isChargeVariantChanged() {
+		return this.modifiedParameters.contains("chargevariant");
+	}
+	public boolean isPriceChanged() {
+		return this.modifiedParameters.contains("price");
+	}
+
+	public boolean isDiscountChanged() {
+		return this.modifiedParameters.contains("discount_id");
+	}
+
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PriceData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PriceData.java
new file mode 100644
index 0000000..2b9b0aa
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PriceData.java
@@ -0,0 +1,58 @@
+package org.mifosplatform.portfolio.pricing.data;
+
+import java.math.BigDecimal;
+
+public class PriceData {
+
+	private Long id;
+	private String chargeCode;
+	private String serviceCode;
+	private String charging_variant;
+	private BigDecimal price;
+	private String chagreType;
+	private String chargeDuration;
+	private String durationType;
+	private Long serviceId;
+	public PriceData(final Long id,final String serviceCode,final String chargeCode,
+			final String charging_variant,final BigDecimal price,final String chrgeType,final String chargeDuration,final String durationType,final Long serviceId)
+	{
+
+		this.id=id;
+		this.chargeCode=chargeCode;
+		this.serviceCode=serviceCode;
+		this.charging_variant=charging_variant;
+		this.price=price;
+		this.chagreType=chrgeType;
+		this.chargeDuration=chargeDuration;
+		this.durationType=durationType;
+		this.serviceId=serviceId;
+	}
+	public Long getId() {
+		return id;
+	}
+	public String getChargeCode() {
+		return chargeCode;
+	}
+	public String getServiceCode() {
+		return serviceCode;
+	}
+	public String getCharging_variant() {
+		return charging_variant;
+	}
+	public BigDecimal getPrice() {
+		return price;
+	}
+	public String getChagreType() {
+		return chagreType;
+	}
+	public String getChargeDuration() {
+		return chargeDuration;
+	}
+	public String getDurationType() {
+		return durationType;
+	}
+	public Long getServiceId() {
+		return serviceId;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PricingData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PricingData.java
new file mode 100644
index 0000000..4c47cd8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/PricingData.java
@@ -0,0 +1,121 @@
+package org.mifosplatform.portfolio.pricing.data;
+
+import java.math.BigDecimal;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.charge.data.ChargesData;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+
+public class PricingData {
+
+	final List<ServiceData> serviceData;
+	final List<ChargesData> chargeData;
+	final List<EnumOptionData> chargevariant;
+	final List<DiscountMasterData> discountdata;
+	final String planCode;
+	private Long planId;
+	private Long serviceId;
+	private Long chargeId;
+	private BigDecimal price;
+	private Long discountId;
+	private int chargeVariantId;
+	private Long id;
+
+	public PricingData(final List<ServiceData> serviceData,	final List<ChargesData> chargeData,
+	final List<EnumOptionData> chargevariant,List<DiscountMasterData> data,final String planCode,Long planId,PricingData pricingData)
+	{
+		
+		if(pricingData!= null)
+		{
+		this.chargeId=pricingData.getChargeId();
+		this.serviceId=pricingData.getServiceId();
+		this.price=pricingData.getPrice();
+		this.discountId=pricingData.getDiscountId();
+		this.chargeVariantId=pricingData.getChargeVariantId();
+		}
+		this.chargeData=chargeData;
+		this.serviceData=serviceData;
+		this.chargevariant=chargevariant;
+		this.discountdata=data;
+		this.planCode=planCode;
+		this.planId=planId;
+		
+	}
+
+	public PricingData(List<ServiceData> serviceData) {
+		this.chargeData=null;
+		this.serviceData=serviceData;
+		this.chargevariant=null;
+		this.discountdata=null;
+		this.planCode=null;
+	}
+
+	public PricingData(Long id, Long serviceId, Long chargeId,
+			BigDecimal price, Long discountId, int chargeVariantId) {
+	    this.serviceData=null;
+		this.chargeData=null;
+		this.chargevariant=null;
+		this.discountdata=null;
+		this.planId=id;
+		this.serviceId=serviceId;
+		this.chargeId=chargeId;
+		this.price=price;
+		this.chargeVariantId=chargeVariantId;
+		this.discountId=discountId;
+		this.planCode=null;
+		
+	}
+
+	public List<ServiceData> getServiceData() {
+		return serviceData;
+	}
+
+	public List<ChargesData> getChargeData() {
+		return chargeData;
+	}
+
+	public List<EnumOptionData> getChargevariant() {
+		return chargevariant;
+	}
+
+	public List<DiscountMasterData> getDiscountdata() {
+		return discountdata;
+	}
+
+	public Long getPlanId() {
+		return planId;
+	}
+
+	public String getPlanCode() {
+		return planCode;
+	}
+
+	public Long getServiceId() {
+		return serviceId;
+	}
+
+	public Long getChargeId() {
+		return chargeId;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public Long getDiscountId() {
+		return discountId;
+	}
+
+	public int getChargeVariantId() {
+		return chargeVariantId;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/SavingChargeVaraint.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/SavingChargeVaraint.java
new file mode 100644
index 0000000..070e550
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/data/SavingChargeVaraint.java
@@ -0,0 +1,34 @@
+package org.mifosplatform.portfolio.pricing.data;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.plan.service.ChargeVariant;
+
+
+public class SavingChargeVaraint {
+
+	public static EnumOptionData interestCompoundingPeriodType(final int id) {
+		return interestCompoundingPeriodType(ChargeVariant.fromInt(id));
+	}
+
+	public static EnumOptionData interestCompoundingPeriodType(final ChargeVariant type) {
+		final String codePrefix = "deposit.interest.compounding.period.";
+		EnumOptionData optionData = null;
+		switch (type) {
+		case SUBSCRIBER_TYPE:
+			optionData = new EnumOptionData(ChargeVariant.SUBSCRIBER_TYPE.getValue().longValue(), codePrefix + ChargeVariant.SUBSCRIBER_TYPE.getCode(), "SUBSCRIBER_TYPE");
+			break;
+		case AREAS:
+			optionData = new EnumOptionData(ChargeVariant.AREAS.getValue().longValue(), codePrefix + ChargeVariant.AREAS.getCode(), "AREAS");
+			break;
+		case BASE:
+			optionData = new EnumOptionData(ChargeVariant.BASE.getValue().longValue(), codePrefix + ChargeVariant.BASE.getCode(), "BASE");
+			break;
+
+		default:
+			optionData = new EnumOptionData(ChargeVariant.INVALID.getValue().longValue(), ChargeVariant.INVALID.getCode(), "Invalid");
+			break;
+		}
+		return optionData;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/Price.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/Price.java
new file mode 100644
index 0000000..f8314ff
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/Price.java
@@ -0,0 +1,111 @@
+package org.mifosplatform.portfolio.pricing.domain;
+
+import java.math.BigDecimal;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "plan_pricing")
+public class Price extends AbstractPersistable<Long> {
+
+	@Column(name = "plan_code")
+	private Long plan_code;
+
+	@Column(name = "service_code")
+	private String service_code;
+
+	@Column(name = "charge_code")
+	private String charge_code;
+
+	@Column(name = "charging_variant")
+	private String charging_variant;
+
+	@Column(name = "price", scale = 6, precision = 19, nullable = false)
+	private BigDecimal price;
+
+	@Column(name = "discount_id", nullable = false)
+	private Long discount_id;
+
+	@Column(name = "is_deleted")
+	private String is_deleted="n";
+
+	public Price() {
+	}
+
+	public Price(final Long plan_code, final String charge_code,
+			final String service_code, final String charging_variant,
+			final BigDecimal price, final Long discount_id)
+
+	{
+
+		this.plan_code = plan_code;
+		this.service_code = service_code;
+		this.charge_code = charge_code;
+
+		this.charging_variant = charging_variant;
+		this.price = price;
+		this.discount_id = discount_id;
+	}
+
+	public String getCharging_variant() {
+		return charging_variant;
+	}
+
+	public void setCharging_variant(String charging_variant) {
+		this.charging_variant = charging_variant;
+	}
+
+	public Long getPlanCode() {
+		return plan_code;
+	}
+
+	public String getServiceCode() {
+		return service_code;
+	}
+
+	public String getChargeCode() {
+		return charge_code;
+	}
+
+	public BigDecimal getPrice() {
+		return price;
+	}
+
+	public Long getDiscountId() {
+		return discount_id;
+	}
+
+	public void update(PricingCommand command) {
+		if (command.isServiceCodeChanged()) {
+			this.service_code = command.getServiceCode();
+		}
+		if (command.isChargeCodeChanged()) {
+			this.charge_code = command.getChargeCode();
+		}
+		if (command.isChargeVariantChanged()) {
+			this.charging_variant = command.getChargingVariant();
+			if (command.isDiscountChanged()) {
+				this.discount_id = command.getDiscount_id();
+			}
+			if (command.isPriceChanged()) {
+				this.price = command.getPrice();
+			}
+		}
+
+	}
+
+	public void delete() {
+		
+
+		
+			this.is_deleted = "y";
+		
+
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PriceRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PriceRepository.java
new file mode 100644
index 0000000..c7f753b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PriceRepository.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.pricing.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface PriceRepository extends JpaRepository<Price, Long>,
+JpaSpecificationExecutor<Price>{
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PricingCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PricingCommandValidator.java
new file mode 100644
index 0000000..699243e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/domain/PricingCommandValidator.java
@@ -0,0 +1,33 @@
+package org.mifosplatform.portfolio.pricing.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+
+public class PricingCommandValidator {
+	
+private final PricingCommand command;
+
+		public PricingCommandValidator(final PricingCommand command) {
+			this.command=command;
+		}
+
+
+		public void validateForCreate() {
+	         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("price");
+			baseDataValidator.reset().parameter("charge_code").value(command.getChargeCode()).notBlank().notNull();
+			baseDataValidator.reset().parameter("discount_id").value(command.getDiscount_id()).notBlank().notNull();
+			baseDataValidator.reset().parameter("chargevariant").value(command.getChargingVariant()).notBlank().notNull();
+			baseDataValidator.reset().parameter("price").value(command.getPrice()).notBlank().notNull();
+
+			if (!dataValidationErrors.isEmpty()) {
+				throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+			}
+		}
+	}
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/exceptions/ChargeCOdeExists.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/exceptions/ChargeCOdeExists.java
new file mode 100644
index 0000000..e9ee8dc
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/exceptions/ChargeCOdeExists.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.pricing.exceptions;
+
+import org.mifosplatform.infrastructure.core.exception.AbstractPlatformDomainRuleException;
+
+public class ChargeCOdeExists extends AbstractPlatformDomainRuleException {
+
+	public ChargeCOdeExists(final String chrgeCode) {
+		super("plan.is.already.exists.with.charge.code", "plan is already existed with charge code:"+chrgeCode, chrgeCode);
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformService.java
new file mode 100644
index 0000000..dd2b433
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformService.java
@@ -0,0 +1,25 @@
+package org.mifosplatform.portfolio.pricing.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.charge.data.ChargeData;
+import org.mifosplatform.portfolio.charge.data.ChargesData;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.data.PricingData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+public interface PriceReadPlatformService {
+
+	 List<ChargesData> retrieveChargeCode();
+     List<EnumOptionData> retrieveChargeVariantData();
+	List<DiscountMasterData> retrieveDiscountDetails();
+	List<PlanData> retrievePlanDetails();
+	List<SubscriptionData> retrievePaytermData();
+	List<ServiceData> retrievePriceDetails(String planCode);
+	List<ServiceData> retrievePrcingDetails(Long planId);
+	List<ServiceData> retrieveServiceCodeDetails(Long planCode);
+	PricingData retrieveSinglePriceDetails(String priceId);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformServiceImpl.java
new file mode 100644
index 0000000..6298160
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceReadPlatformServiceImpl.java
@@ -0,0 +1,304 @@
+package org.mifosplatform.portfolio.pricing.service;
+
+import java.math.BigDecimal;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Arrays;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.charge.data.ChargeData;
+import org.mifosplatform.portfolio.charge.data.ChargesData;
+import org.mifosplatform.portfolio.discountmaster.data.DiscountMasterData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.plan.service.ChargeVariant;
+import org.mifosplatform.portfolio.pricing.data.PricingData;
+import org.mifosplatform.portfolio.pricing.data.SavingChargeVaraint;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+
+@Service
+public class PriceReadPlatformServiceImpl implements PriceReadPlatformService{
+
+
+	 private final JdbcTemplate jdbcTemplate;
+	    private final PlatformSecurityContext context;
+
+	    @Autowired
+	    public PriceReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+	        this.context = context;
+	        this.jdbcTemplate = new JdbcTemplate(dataSource);
+	    }
+
+
+	@Override
+	public List<PlanData> retrievePlanDetails() {
+
+		  context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.plan_code as plan_code from plan_master s ";
+
+
+	        RowMapper<PlanData> rm = new PlanMapper();
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] { });
+	}
+
+
+	 private static final class PlanMapper implements RowMapper<PlanData> {
+
+	        @Override
+	        public PlanData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String plan_code = rs.getString("plan_code");
+
+
+	            return new PlanData(id,plan_code);
+	        }
+}
+
+
+		@Override
+		public List<SubscriptionData> retrievePaytermData() {
+
+			context.authenticatedUser();
+
+			SubscriptionDataMapper mapper = new SubscriptionDataMapper();
+
+			String sql = "select " + mapper.schema();
+
+			return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+		}
+
+		private static final class SubscriptionDataMapper implements
+				RowMapper<SubscriptionData> {
+
+			public String schema() {
+				return " sb.id as id,sb.payterm_type as payterm_type,sb.units as units "
+						+ " from m_payments sb ";
+
+			}
+
+			@Override
+			public SubscriptionData mapRow(ResultSet rs, int rowNum)
+					throws SQLException {
+
+				Long id = rs.getLong("id");
+				String payterm_type = rs.getString("payterm_type");
+				String units = rs.getString("units");
+				String contractPeriod = units.concat(payterm_type);
+				SubscriptionData data = new SubscriptionData(id, contractPeriod);
+
+				return data;
+
+			}
+
+		}
+
+	 @Override
+		public List<ServiceData> retrievePrcingDetails(Long planId) {
+
+			  context.authenticatedUser();
+
+		        String sql = "SELECT sm.id AS id,sm.service_description AS service_description,p.plan_code as planCode,"
+		        	     +" pm.service_code AS service_code   FROM plan_detail pm, service sm,plan_master p"
+		     			 +" WHERE pm.service_code = sm.service_code AND p.id = pm.plan_id and pm.plan_id=?";
+
+
+		        RowMapper<ServiceData> rm = new PeriodMapper();
+
+		        return this.jdbcTemplate.query(sql, rm, new Object[] { planId });
+		}
+
+
+		 private static final class PeriodMapper implements RowMapper<ServiceData> {
+
+		        @Override
+		        public ServiceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+		        Long id = rs.getLong("id");
+		            String planCode = rs.getString("planCode"); 
+		            String serviceCode = rs.getString("service_code");
+		            String serviceDescription = rs.getString("service_description");
+		            return new ServiceData(id,null,planCode,serviceCode,serviceDescription,null);
+		        }
+	}
+
+		 @Override
+			public List<ServiceData> retrievePriceDetails(String planCode) {
+
+				  context.authenticatedUser();
+
+			        String sql = "SELECT  p.plan_code as plan_code,pm.id as id,pm.service_code as service_code,se.service_description as service_description," +
+						"c.charge_description as charge_description,pm.charge_code as charge_code,pm.charging_variant as charging_variant," +
+						"pm.price as price from  plan_master p,plan_pricing  pm,service se,charge_codes c where p.id=pm.plan_code and pm.service_code = se.service_code and" +
+						" pm.charge_code=c.charge_code and pm.is_deleted='n' and pm.plan_code ='"+planCode+"'";
+
+
+			        RowMapper<ServiceData> rm = new PriceMapper();
+
+			        return this.jdbcTemplate.query(sql, rm, new Object[] { });
+			}
+
+
+			 private static final class PriceMapper implements RowMapper<ServiceData> {
+
+			        @Override
+			        public ServiceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+			        Long id = rs.getLong("id");
+			            String plan_code = rs.getString("plan_code");
+			            String planDescription=null;
+			            String service_code = rs.getString("service_description");
+			            String charge_code = rs.getString("charge_description");
+			           String charging_variant=rs.getString("charging_variant");
+			            BigDecimal price=rs.getBigDecimal("price");
+			            int chargingVariant = new Integer(charging_variant);
+			           EnumOptionData chargingvariant = SavingChargeVaraint.interestCompoundingPeriodType(chargingVariant);
+			           String chargeValue=chargingvariant.getValue();
+			            return new ServiceData(id,plan_code,service_code,planDescription,charge_code,chargeValue,price);
+			        }
+		}
+
+
+	@Override
+	public List<DiscountMasterData> retrieveDiscountDetails() {
+
+		  context.authenticatedUser();
+
+	        String sql = "select s.id as id,s.discount_code as discountcode,s.discount_description as discount_description from discount_master s";
+
+
+	        RowMapper<DiscountMasterData> rm = new DiscountMapper();
+
+	        return this.jdbcTemplate.query(sql, rm, new Object[] {});
+	}
+
+
+	 private static final class DiscountMapper implements RowMapper<DiscountMasterData> {
+
+	        @Override
+	        public DiscountMasterData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+	        Long id = rs.getLong("id");
+	            String discountcode = rs.getString("discountcode");
+	            String discountdesc = rs.getString("discount_description");
+
+
+	            return new DiscountMasterData(id,discountcode,discountdesc);
+	        }
+
+	 }
+
+	@Override
+	public List<ChargesData> retrieveChargeCode() {
+		 String sql = "select s.id as id,s.charge_code as charge_code,s.charge_description as charge_description from charge_codes s";
+
+
+		 RowMapper<ChargesData> rm = new ChargeMapper();
+
+        return this.jdbcTemplate.query(sql, rm, new Object[] {});
+}
+
+
+ private static final class ChargeMapper implements RowMapper<ChargesData> {
+
+        @Override
+        public ChargesData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+        Long id = rs.getLong("id");
+            String charge_code = rs.getString("charge_code");
+            String charge_desc= rs.getString("charge_description");
+
+            return new ChargesData(id,charge_code,charge_desc);
+        }
+}
+
+
+@Override
+public List<EnumOptionData> retrieveChargeVariantData() {
+
+
+
+	EnumOptionData base = SavingChargeVaraint.interestCompoundingPeriodType(ChargeVariant.BASE);
+
+	List<EnumOptionData> categotyType = Arrays.asList(base);
+	return categotyType;
+}
+
+@Override
+
+public List<ServiceData> retrieveServiceCodeDetails(Long planCode) {
+
+	  context.authenticatedUser();
+
+        String sql = "SELECT p.id AS planId, pm.id AS id,ch.charge_description AS chargeDescription, pm.plan_code AS plan_code,"
+        		+"pm.service_code AS service_code,pm.charge_code AS charge_code  FROM plan_master p, plan_pricing pm,charge_codes ch"
+                 +" WHERE p.id = pm.plan_code AND  ch.charge_code = pm.charge_code and  pm.plan_code="+planCode;
+
+
+        RowMapper<ServiceData> rm = new ServiceMapper();
+
+        return this.jdbcTemplate.query(sql, rm, new Object[] {  });
+}
+
+
+ private static final class ServiceMapper implements RowMapper<ServiceData> {
+
+        @Override
+        public ServiceData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+        Long id = rs.getLong("id");
+        Long planId = rs.getLong("planId");
+            String plan_code = rs.getString("plan_code");
+           String service_code = rs.getString("service_code");
+            String charge_code = rs.getString("charge_code");
+            String chargeDescription = rs.getString("chargeDescription");
+
+            return new ServiceData(id,planId,plan_code,charge_code,service_code,chargeDescription);
+        }
+}
+
+
+@Override
+public PricingData retrieveSinglePriceDetails(String priceId) {
+	 context.authenticatedUser();
+
+     String sql = "SELECT p.plan_code as planId,s.id AS serviceId,c.id AS chargeId,p.charging_variant AS chargeVariant, p.price AS price, p.discount_id AS discountId"
+                +" FROM plan_pricing p, service s,charge_codes c, discount_master d  where  p.charge_code = c.charge_code" +
+                " and p.service_code = s.service_code and p.id ="+priceId; 
+
+
+     RowMapper<PricingData> rm = new PricingMapper();
+
+     return this.jdbcTemplate.queryForObject(sql, rm, new Object[] {  });
+}
+
+
+private static final class PricingMapper implements RowMapper<PricingData> {
+
+     @Override
+     public PricingData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum) throws SQLException {
+
+    	  Long planId = rs.getLong("planId");
+     Long serviceId = rs.getLong("serviceId");
+         Long chargeId = rs.getLong("chargeId");
+        BigDecimal price = rs.getBigDecimal("price");
+         Long discountId = rs.getLong("discountId");
+         String chargeVariant = rs.getString("chargeVariant");
+            int chargeVariantId=new Integer(chargeVariant);
+         return new PricingData(planId,serviceId,chargeId,price,discountId,chargeVariantId);
+     }
+}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformService.java
new file mode 100644
index 0000000..38f4bd4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformService.java
@@ -0,0 +1,22 @@
+package org.mifosplatform.portfolio.pricing.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+
+public interface PriceWritePlatformService {
+
+	//EntityIdentifier createPricing(final PricingCommand command);
+
+	CommandProcessingResult createPricing(PricingCommand command,
+			List<ServiceData> serviceData,Long planId);
+
+	CommandProcessingResult updatePrice(PricingCommand command, Long priceId);
+
+	void deletePrice(Long priceId);
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformServiceImpl.java
new file mode 100644
index 0000000..4049bf5
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/pricing/service/PriceWritePlatformServiceImpl.java
@@ -0,0 +1,109 @@
+package org.mifosplatform.portfolio.pricing.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
+import org.mifosplatform.portfolio.pricing.domain.Price;
+import org.mifosplatform.portfolio.pricing.domain.PriceRepository;
+import org.mifosplatform.portfolio.pricing.domain.PricingCommandValidator;
+import org.mifosplatform.portfolio.pricing.exceptions.ChargeCOdeExists;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class PriceWritePlatformServiceImpl implements PriceWritePlatformService {
+
+	private PlatformSecurityContext context;
+
+	private PriceRepository priceRepository;
+
+	private PriceReadPlatformService priceReadPlatformService;
+
+	@Autowired
+	public PriceWritePlatformServiceImpl(final PlatformSecurityContext context,
+			final PriceRepository priceRepository) {
+		this.context = context;
+		this.priceRepository = priceRepository;
+
+	}
+
+	@Transactional
+	@Override
+	public CommandProcessingResult createPricing(PricingCommand command,
+			List<ServiceData> serviceData, Long planId) {
+		try {
+		//	this.context.authenticatedUser().validateHasReadPermission("price");
+					this.context.authenticatedUser();
+			PricingCommandValidator validator=new PricingCommandValidator(command);
+			validator.validateForCreate();
+
+			for (ServiceData data : serviceData) {
+
+				if (data.getChargeCode() != null) {
+					if ((data.getPlanId() == planId)
+							&& data.getServiceCode().equalsIgnoreCase(
+									command.getServiceCode())
+							&& data.getChargeCode().equalsIgnoreCase(
+									command.getChargeCode())) {
+
+						throw new ChargeCOdeExists(data.getChargeDescription());
+					}
+				}
+			}
+
+			Price data = new Price(planId, command.getChargeCode(),
+					command.getServiceCode(), command.getChargingVariant(),
+					command.getPrice(), command.getDiscount_id());
+			this.priceRepository.save(data);
+
+			return new CommandProcessingResult(data.getId());
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+
+		}
+
+	}
+
+	private void handleDataIntegrityIssues(PricingCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+
+	@Override
+	public CommandProcessingResult updatePrice(PricingCommand command,Long priceId) {
+	try
+	{
+		
+		this.context.authenticatedUser();
+		PricingCommandValidator validator=new PricingCommandValidator(command);
+		validator.validateForCreate();
+	Price price=this.priceRepository.findOne(priceId);
+	if(price!= null)
+	    price.update(command);
+	    this.priceRepository.save(price);
+	    return new CommandProcessingResult(price.getId());
+	} catch (DataIntegrityViolationException dve) {
+		handleDataIntegrityIssues(command, dve);
+		return new CommandProcessingResult(Long.valueOf(-1));
+
+	}
+	}
+	
+	 public void deletePrice(Long priceId) {
+		  try {
+		 Price price=this.priceRepository.findOne(priceId);
+		 if(price!= null){
+		  price.delete();
+		 }
+		     this.priceRepository.save(price);  
+		  } catch (DataIntegrityViolationException dve) {
+		  }
+	 }
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/Plan.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/Plan.java
new file mode 100644
index 0000000..8f1befb
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/Plan.java
@@ -0,0 +1,171 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+import javax.persistence.Table;
+
+import org.hibernate.annotations.LazyCollection;
+import org.hibernate.annotations.LazyCollectionOption;
+import org.joda.time.LocalDate;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "plan_master")
+public class Plan{
+
+	
+	@Id
+	@GeneratedValue
+	@Column(name="id")
+	private Long id;
+	
+	@Column(name = "plan_code", length = 65536)
+	private String code;
+
+	@Column(name = "plan_description")
+	private String description;
+
+	@Column(name = "plan_status")
+	private Long status;
+	@Column(name = "contract_period")
+	private String contract_period;
+
+	@Column(name = "start_date")
+	private Date start_date;
+
+	@Column(name = "end_date")
+	private Date end_date;
+
+	@Column(name = "bill_rule")
+	private Long bill_rule;
+
+	@Column(name = "is_deleted", nullable = false)
+	private char deleted='n';
+
+	@LazyCollection(LazyCollectionOption.FALSE)
+	@OneToMany(cascade = CascadeType.ALL, mappedBy = "plan", orphanRemoval = true)
+	private List<ServiceDetails> details = new ArrayList<ServiceDetails>();
+
+	public Plan() {
+		// TODO Auto-generated constructor stub
+	}
+
+	public Plan(final String code, final String description,
+			final LocalDate start_date, final LocalDate endDate,
+			final Long bill_rule, final Long status,
+			 final String contractPeriod,
+			final List<ServiceDetails> details) {
+		this.code = code;
+		this.description = description;
+		if (endDate != null)
+			this.end_date = endDate.toDate();
+		this.start_date = start_date.toDate();
+		this.status = status;
+		this.contract_period = contractPeriod;
+		this.bill_rule = bill_rule;
+		this.details = details;
+
+	}
+
+	public List<ServiceDetails> getDetails() {
+		return details;
+	}
+
+	public String getCode() {
+		return code;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public Long getStatus() {
+		return status;
+	}
+
+	public Date getStart_date() {
+		return start_date;
+	}
+
+	public Date getEnd_date() {
+		return end_date;
+	}
+
+	
+
+	public String getContractPeriod() {
+		return contract_period;
+	}
+
+	public void addServieDetails(ServiceDetails serviceDetail) {
+
+		serviceDetail.update(this);
+		this.details.add(serviceDetail);
+
+	}
+
+	public Long getBill_rule() {
+		return bill_rule;
+	}
+
+	public void update(PlansCommand command, PlanData serviceData,
+			List<ServiceData> services) {
+
+		this.code = command.isplanCodeChanged() ? command.getPlan_code()
+				: this.code;
+
+		this.description = command.isplanDescriptionChanged() ? command
+				.getPlan_description() :  this.description;
+
+		this.start_date = command.isStartDateChanged() ? command
+				.getStartDate().toDate() :this.start_date;
+		if (command.getEndDate() == null) {
+			this.end_date = null;
+
+		} else {
+			this.end_date = command.isendDateChanged() ? command.getEndDate()
+					.toDate() : this.end_date;
+		}
+		this.bill_rule = command.isBillingRuleChanged() ? command.getBillRule()
+				: this.bill_rule;
+		this.contract_period = command.isContractPeriodChanged() ? command
+				.getContractPeriod() : this.contract_period;
+		
+		this.status = command.isPlanStatusChanged() ? command.getStatus()
+				:this.status;
+
+	}
+
+	public void delete(PlanData data) {
+
+		/*this.code = data.getPlan_code();
+		this.description = data.getPlan_description();
+
+		if (data.getEndDate() != null)
+			this.end_date = data.getEndDate().toDate();
+		this.start_date = data.getStartDate().toDate();
+		this.status = data.getStatus();
+		this.contract_period = data.getPeriod();
+		this.bill_rule = data.getBillRule();*/
+		
+		if (deleted =='y') {
+
+		} else {
+			this.deleted = 'y';
+			this.description = this.getCode() + "_DELETED_";
+
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/PlanRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/PlanRepository.java
new file mode 100644
index 0000000..5f6eece
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/PlanRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface PlanRepository  extends
+JpaRepository<Plan, Long>,
+JpaSpecificationExecutor<Plan>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescription.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescription.java
new file mode 100644
index 0000000..ad0aade
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescription.java
@@ -0,0 +1,58 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+
+@Entity
+@Table(name = "service")
+public class ServiceDescription extends AbstractPersistable<Long>{
+
+
+		@Column(name ="service_code", length=50)
+	    private String service_code;
+
+
+		@Column(name = "service_description", nullable = false)
+		private String ser_description;
+
+		@Column(name = "type", nullable = false)
+		private String type;
+
+		public ServiceDescription() {
+			// TODO Auto-generated constructor stub
+		}
+
+		public String getService_code() {
+			return service_code;
+		}
+
+		public void setService_code(String service_code) {
+			this.service_code = service_code;
+		}
+
+		public String getSer_description() {
+			return ser_description;
+		}
+
+		public void setSer_description(String ser_description) {
+			this.ser_description = ser_description;
+		}
+
+		public String getType() {
+			return type;
+		}
+
+		public void setType(String type) {
+			this.type = type;
+		}
+
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescriptionRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescriptionRepository.java
new file mode 100644
index 0000000..1649d3a
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDescriptionRepository.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ServiceDescriptionRepository extends
+JpaRepository<ServiceDescription, Long>,
+JpaSpecificationExecutor<ServiceDescription>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetails.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetails.java
new file mode 100644
index 0000000..ec38995
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetails.java
@@ -0,0 +1,70 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "plan_detail")
+public class ServiceDetails {
+	
+	@Id
+	@GeneratedValue
+	@Column(name="id")
+	private Long id;
+
+	@ManyToOne
+    @JoinColumn(name="plan_id")
+    private Plan plan;
+
+	@Column(name ="service_code", length=50)
+    private String service_code;
+
+
+	@Column(name = "is_deleted", nullable = false)
+	private char is_deleted = 'n';
+
+
+	public ServiceDetails()
+	{}
+	public ServiceDetails(final String service_code)
+	{
+
+		this.service_code=service_code;
+		//this.is_deleted=null;
+		this.plan=null;
+
+	}
+
+
+	public String getService_code() {
+		return service_code;
+	}
+
+
+	public char isIs_deleted() {
+		return is_deleted;
+	}
+
+
+
+	public Plan getPlan() {
+		return plan;
+	}
+
+	public void update(Plan plan1)
+	{
+		this.plan=plan1;
+	}
+	public void delete() {
+		this.is_deleted='y';
+
+	}
+
+
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetailsRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetailsRepository.java
new file mode 100644
index 0000000..970e50e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceDetailsRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+import org.mifosplatform.portfolio.savingplan.domain.ServiceDetails;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ServiceDetailsRepository  extends
+JpaRepository<ServiceDetails, Long>,
+JpaSpecificationExecutor<ServiceDetails>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceRepository.java
new file mode 100644
index 0000000..b7dafb0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface ServiceRepository  extends
+JpaRepository<ServiceType, Long>,
+JpaSpecificationExecutor<ServiceType>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceType.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceType.java
new file mode 100644
index 0000000..97d4ad7
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingplan/domain/ServiceType.java
@@ -0,0 +1,58 @@
+package org.mifosplatform.portfolio.savingplan.domain;
+
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+
+@Entity
+@Table(name = "service")
+public class ServiceType {
+
+	@Id
+	@GeneratedValue
+	@Column(name ="id")
+	private Long id;
+
+	@Column(name = "service_code")
+	private String code;
+
+	@Column(name = "service_description")
+	private String description;
+
+	@Column(name = "type")
+	private Long type;
+
+	public ServiceType() {
+		// TODO Auto-generated constructor stub
+	}
+	public ServiceType(final String code, final String description,
+			final Long status) {
+		this.code = code;
+		this.description = description;
+		this.type = status;
+
+	}
+
+	public String getCode() {
+		return code;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+
+	public Long getId()
+	{
+
+		return id;
+	}
+
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/GoogleGsonPortfolioApiJsonSerializerService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/GoogleGsonPortfolioApiJsonSerializerService.java
index 2024345..c76802d 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/GoogleGsonPortfolioApiJsonSerializerService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/GoogleGsonPortfolioApiJsonSerializerService.java
@@ -3,15 +3,20 @@ package org.mifosplatform.portfolio.savingsaccount;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashSet;
+import java.util.List;
 import java.util.Set;
 
 import org.mifosplatform.infrastructure.core.serialization.GoogleGsonSerializerHelper;
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
 import org.mifosplatform.portfolio.loanaccount.gaurantor.data.GuarantorData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
 import org.mifosplatform.portfolio.savingsaccount.data.SavingAccountData;
 import org.mifosplatform.portfolio.savingsaccount.data.SavingScheduleData;
 import org.mifosplatform.portfolio.savingsaccountproduct.data.SavingProductData;
 import org.mifosplatform.portfolio.savingsdepositaccount.data.DepositAccountData;
 import org.mifosplatform.portfolio.savingsdepositproduct.data.DepositProductData;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -56,12 +61,24 @@ public class GoogleGsonPortfolioApiJsonSerializerService implements PortfolioApi
             "lockinPeriod", "lockinPeriodType", "productOptions", "currencyOptions", "savingsProductTypeOptions", "tenureTypeOptions",
             "savingFrequencyOptions", "savingsInterestTypeOptions", "lockinPeriodTypeOptions", "interestCalculationOptions","permissions","savingScheduleDatas",
             "dueAmount", "savingScheduleData", "transactions","interestPostEvery","interestPostFrequency"));
+    
+    private static final Set<String> PLAN_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id", "planCode", "plan_description", "startDate",
+            "endDate", "status", "service_code", "service_description", "charge_code", "charge_description","servicedata","contractPeriod",
+            "service_type", "charge_type", "allowedtypes","selectedservice","bill_rule","billiingcycle","servicedata","services","statusname","planstatus"));
 
     // guarantors
     private static final Set<String> GUARANTOR_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("externalGuarantor", "existingClientId",
             "firstname", "lastname", "addressLine1", "addressLine2", "city", "state", "zip", "country", "mobileNumber", "housePhoneNumber",
             "comment", "dob"));
-
+    
+    private static final Set<String> BILLINGCYCLE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id",
+            "billing_code","description","frequency","every","day_name","day_num","allowedtypes"));
+    
+    private static final Set<String> SERVICE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("id","serviceCode","serviceDescription","serviceType","serviceData"));
+
+    
+	private static final Set<String> SERVICE_MASTER_DATA_PARAMETERS_TEMPLETE=new HashSet<String>(Arrays.asList("serviceType","categoryType","serviceMasterOptions"));
+    
     private static final Set<String> SAVING_SCHEDULE_DATA_PARAMETERS = new HashSet<String>(Arrays.asList("periods", "cumulativeDepositDue"));
 
     private final GoogleGsonSerializerHelper helper;
@@ -148,4 +165,46 @@ public class GoogleGsonPortfolioApiJsonSerializerService implements PortfolioApi
                 prettyPrint, responseParameters);
         return helper.serializedJsonFrom(gsonDeserializer, savingScheduleData);
     }
+    
+    @Override
+    public String serializeBillingCycleToJson(final boolean prettyPrint, final Set<String> responseParameters,
+            final BillingCycleData products) {
+        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+         BILLINGCYCLE_DATA_PARAMETERS, prettyPrint, responseParameters);
+        return helper.serializedJsonFrom(gsonDeserializer, products);
+    }
+    
+
+    
+    @Override
+public String serializePlanDataToJson(boolean prettyPrint,	Set<String> responseParameters, List<PlanData> products)
+    {
+     final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PLAN_DATA_PARAMETERS,
+                 prettyPrint, responseParameters);
+         return helper.serializedJsonFrom(gsonDeserializer, products);
+}
+    
+    @Override
+    public String serializePlanDataToJson(boolean prettyPrint, Set<String> responseParameters, PlanData account) {
+        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(PLAN_DATA_PARAMETERS,
+                prettyPrint, responseParameters);
+        return helper.serializedJsonFrom(gsonDeserializer, account);
+    }
+    
+	@Override
+public String serializeServiceMasterDataToJson(boolean prettyPrint,Set<String> responseParameters, Collection<SericeMasterOptionsData> serviceMasterData)
+{
+final Gson gsonDeserializer = helper
+.createGsonBuilderWithParameterExclusionSerializationStrategy(
+SERVICE_MASTER_DATA_PARAMETERS_TEMPLETE, prettyPrint, responseParameters);
+return helper.serializedJsonFrom(gsonDeserializer, serviceMasterData.toArray(new SericeMasterOptionsData[serviceMasterData.size()]));
+}
+	
+	 @Override
+	    public String serializeServiceToJson(final boolean prettyPrint, final Set<String> responseParameters,
+	            final ServiceData products) {
+	        final Gson gsonDeserializer = helper.createGsonBuilderWithParameterExclusionSerializationStrategy(
+	         SERVICE_DATA_PARAMETERS, prettyPrint, responseParameters);
+	        return helper.serializedJsonFrom(gsonDeserializer, products);
+	    }
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionService.java
index def958e..b3c286e 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionService.java
@@ -1,8 +1,18 @@
 package org.mifosplatform.portfolio.savingsaccount;
 
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
 import org.mifosplatform.portfolio.client.data.ClientData;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
 import org.mifosplatform.portfolio.group.command.GroupCommand;
 import org.mifosplatform.portfolio.loanaccount.gaurantor.command.GuarantorCommand;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountApprovalCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountDepositCommand;
@@ -15,6 +25,11 @@ import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositAccountW
 import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositStateTransitionApprovalCommand;
 import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositStateTransitionCommand;
 import org.mifosplatform.portfolio.savingsdepositproduct.command.DepositProductCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
 
 public interface PortfolioApiDataConversionService {
 
@@ -47,4 +62,38 @@ public interface PortfolioApiDataConversionService {
     SavingAccountDepositCommand convertJsonToSavingAccountDepositCommand(Long accountId, String json);
 
     SavingAccountWithdrawalCommand convertJsonToSavingAccountWithdrawalCommand(Long accountId, String jsonRequestBody);
+    AdjustmentCommand convertJsonToAdjustmentCommand(Long resourceIdentifier, String json);
+
+	BillingCycleCommand convertJsonToBillingCycleCommand(
+			Long resourceIdentifier, String json);
+
+	ChargeCodeCommand convertJsonToChargeCodeCommand(Long resourceIdentifier,String json);
+
+	DiscountMasterCommand convertJsonToDiscountMasterCommand(
+			Long resourceIdentifier, String json);
+
+	OrdersCommand convertJsonToOrderCommand(Object resourceIdentifier,Long client_id, String json);
+
+	Paymentcommand convertJsonToPaymentCommand(Long resourceIdentifier,
+			String json);
+
+	PaymodeCommand convertJsonToPaymodeCommand(Long resourceIdentifier,
+			String json);
+
+	PaytermsCommand convertJsonToPaytermsCommand(Long resourceIdentifier,
+			String json);
+
+	PlansCommand convertJsonToPlansCommand(Long resourceIdentifier, String json);
+
+	PricingCommand convertJsonToPricingCommand(Long resourceIdentifier,String json);
+
+	ServiceMasterCommand convertJsonToServiceMasterCommand(Long resourceIdentifier, String json);
+
+	ServicesCommand convertJsonToServiceCommand(Long resourceIdentifier,String json);
+
+	SubscriptionCommand convertJsonToSubscriptionCommand(Long resourceIdentifier, String json);
+
+	TaxMappingRateCommand convertJsonToTaxMappingRateCommand(Long resourceIdentifier, String json);
+
+	TaxMasterCommand convertJsonToTaxMasterCommand(Long resourceIdentifier,String json);
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionServiceImpl.java
index b11d79f..2e1bf3f 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiDataConversionServiceImpl.java
@@ -21,11 +21,21 @@ import org.mifosplatform.infrastructure.core.data.ApiParameterError;
 import org.mifosplatform.infrastructure.core.exception.InvalidJsonException;
 import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
 import org.mifosplatform.infrastructure.core.exception.UnsupportedParameterException;
+import org.mifosplatform.portfolio.adjustment.commands.AdjustmentCommand;
+import org.mifosplatform.portfolio.billingcycle.command.BillingCycleCommand;
+import org.mifosplatform.portfolio.charge.commands.ChargeCodeCommand;
 import org.mifosplatform.portfolio.client.command.ClientCommand;
 import org.mifosplatform.portfolio.client.data.ClientData;
 import org.mifosplatform.portfolio.client.serialization.ClientCommandFromApiJsonDeserializer;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountMasterCommand;
 import org.mifosplatform.portfolio.group.command.GroupCommand;
 import org.mifosplatform.portfolio.loanaccount.gaurantor.command.GuarantorCommand;
+import org.mifosplatform.portfolio.order.command.OrdersCommand;
+import org.mifosplatform.portfolio.payment.command.Paymentcommand;
+import org.mifosplatform.portfolio.paymodes.commands.PaymodeCommand;
+import org.mifosplatform.portfolio.payterms.commands.PaytermsCommand;
+import org.mifosplatform.portfolio.plan.commands.PlansCommand;
+import org.mifosplatform.portfolio.pricing.commands.PricingCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountApprovalCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountCommand;
 import org.mifosplatform.portfolio.savingsaccount.command.SavingAccountDepositCommand;
@@ -38,6 +48,11 @@ import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositAccountW
 import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositStateTransitionApprovalCommand;
 import org.mifosplatform.portfolio.savingsdepositaccount.command.DepositStateTransitionCommand;
 import org.mifosplatform.portfolio.savingsdepositproduct.command.DepositProductCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.format.number.NumberFormatter;
 import org.springframework.stereotype.Service;
@@ -50,577 +65,1473 @@ import com.google.gson.JsonParser;
 import com.google.gson.reflect.TypeToken;
 
 @Service
-public class PortfolioApiDataConversionServiceImpl implements PortfolioApiDataConversionService {
+public class PortfolioApiDataConversionServiceImpl implements
+		PortfolioApiDataConversionService {
 
-    /**
-     * Google-gson class for converting to and from json.
-     */
-    private final Gson gsonConverter;
+	/**
+	 * Google-gson class for converting to and from json.
+	 */
+	private final Gson gsonConverter;
 
-    private final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer;
+	private final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer;
 
-    @Autowired
-    public PortfolioApiDataConversionServiceImpl(final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer) {
-        this.clientCommandFromApiJsonDeserializer = clientCommandFromApiJsonDeserializer;
-        this.gsonConverter = new Gson();
-    }
+	@Autowired
+	public PortfolioApiDataConversionServiceImpl(
+			final ClientCommandFromApiJsonDeserializer clientCommandFromApiJsonDeserializer) {
+		this.clientCommandFromApiJsonDeserializer = clientCommandFromApiJsonDeserializer;
+		this.gsonConverter = new Gson();
+	}
 
-    @Override
-    public ClientData convertInternalJsonFormatToClientDataChange(final Long resourceIdentifier, final String json) {
+	@Override
+	public ClientData convertInternalJsonFormatToClientDataChange(
+			final Long resourceIdentifier, final String json) {
 
-        final ClientCommand command = this.clientCommandFromApiJsonDeserializer.commandFromApiJson(json);
+		final ClientCommand command = this.clientCommandFromApiJsonDeserializer
+				.commandFromApiJson(json);
 
-        return ClientData.dataChangeInstance(resourceIdentifier, command.getOfficeId(), command.getExternalId(), command.getFirstname(),
-                command.getMiddlename(), command.getLastname(), command.getFullname(), command.getJoiningDate());
-    }
+		return ClientData.dataChangeInstance(resourceIdentifier,
+				command.getOfficeId(), command.getExternalId(),
+				command.getFirstname(), command.getMiddlename(),
+				command.getLastname(), command.getFullname(),
+				command.getJoiningDate());
+	}
 
-    @Override
-    public GroupCommand convertJsonToGroupCommand(final Long resourceIdentifier, final String json) {
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
+	@Override
+	public GroupCommand convertJsonToGroupCommand(
+			final Long resourceIdentifier, final String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		final Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		final Map<String, String> requestMap = gsonConverter.fromJson(json,
+				typeOfMap);
+
+		final Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"name", "officeId", "externalId", "clientMembers"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		final Set<String> modifiedParameters = new HashSet<String>();
+
+		final Long officeId = extractLongParameter("officeId", requestMap,
+				modifiedParameters);
+		final String externalId = extractStringParameter("externalId",
+				requestMap, modifiedParameters);
+		final String name = extractStringParameter("name", requestMap,
+				modifiedParameters);
+
+		// check array
+		final JsonParser parser = new JsonParser();
+
+		String[] clientMembers = null;
+		JsonElement element = parser.parse(json);
+		if (element.isJsonObject()) {
+			JsonObject object = element.getAsJsonObject();
+			if (object.has("clientMembers")) {
+				modifiedParameters.add("clientMembers");
+				JsonArray array = object.get("clientMembers").getAsJsonArray();
+				clientMembers = new String[array.size()];
+				for (int i = 0; i < array.size(); i++) {
+					clientMembers[i] = array.get(i).getAsString();
+				}
+			}
+		}
+		//
+
+		return new GroupCommand(modifiedParameters, resourceIdentifier,
+				externalId, name, officeId, clientMembers);
+	}
 
-        final Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        final Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+	private void checkForUnsupportedParameters(Map<String, ?> requestMap,
+			Set<String> supportedParams) {
+		List<String> unsupportedParameterList = new ArrayList<String>();
+		for (String providedParameter : requestMap.keySet()) {
+			if (!supportedParams.contains(providedParameter)) {
+				unsupportedParameterList.add(providedParameter);
+			}
+		}
+
+		if (!unsupportedParameterList.isEmpty()) {
+			throw new UnsupportedParameterException(unsupportedParameterList);
+		}
+	}
 
-        final Set<String> supportedParams = new HashSet<String>(Arrays.asList("name", "officeId", "externalId", "clientMembers"));
+	private String extractStringParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		String paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			paramValue = (String) requestMap.get(paramName);
+			modifiedParameters.add(paramName);
+		}
 
-        checkForUnsupportedParameters(requestMap, supportedParams);
+		if (paramValue != null) {
+			paramValue = paramValue.trim();
+		}
 
-        final Set<String> modifiedParameters = new HashSet<String>();
-
-        final Long officeId = extractLongParameter("officeId", requestMap, modifiedParameters);
-        final String externalId = extractStringParameter("externalId", requestMap, modifiedParameters);
-        final String name = extractStringParameter("name", requestMap, modifiedParameters);
-
-        // check array
-        final JsonParser parser = new JsonParser();
-
-        String[] clientMembers = null;
-        JsonElement element = parser.parse(json);
-        if (element.isJsonObject()) {
-            JsonObject object = element.getAsJsonObject();
-            if (object.has("clientMembers")) {
-                modifiedParameters.add("clientMembers");
-                JsonArray array = object.get("clientMembers").getAsJsonArray();
-                clientMembers = new String[array.size()];
-                for (int i = 0; i < array.size(); i++) {
-                    clientMembers[i] = array.get(i).getAsString();
-                }
-            }
-        }
-        //
+		return paramValue;
+	}
 
-        return new GroupCommand(modifiedParameters, resourceIdentifier, externalId, name, officeId, clientMembers);
-    }
+	private Integer extractIntegerParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		Integer paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			paramValue = convertToInteger(valueAsString, paramName,
+					extractLocaleValue(requestMap));
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
 
-    private void checkForUnsupportedParameters(Map<String, ?> requestMap, Set<String> supportedParams) {
-        List<String> unsupportedParameterList = new ArrayList<String>();
-        for (String providedParameter : requestMap.keySet()) {
-            if (!supportedParams.contains(providedParameter)) {
-                unsupportedParameterList.add(providedParameter);
-            }
-        }
+	private BigDecimal extractBigDecimalParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		BigDecimal paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			paramValue = convertFrom(valueAsString, paramName,
+					extractLocaleValue(requestMap));
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
 
-        if (!unsupportedParameterList.isEmpty()) { throw new UnsupportedParameterException(unsupportedParameterList); }
-    }
+	private boolean extractBooleanParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		boolean paramValue = false;
+		String paramValueAsString = null;
+		if (requestMap.containsKey(paramName)) {
+			paramValueAsString = (String) requestMap.get(paramName);
+
+			if (paramValueAsString != null) {
+				paramValueAsString = paramValueAsString.trim();
+			}
+
+			paramValue = Boolean.valueOf(paramValueAsString);
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
 
-    private String extractStringParameter(final String paramName, final Map<String, ?> requestMap, final Set<String> modifiedParameters) {
-        String paramValue = null;
-        if (requestMap.containsKey(paramName)) {
-            paramValue = (String) requestMap.get(paramName);
-            modifiedParameters.add(paramName);
-        }
+	private Long extractLongParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		Long paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			if (StringUtils.isNotBlank(valueAsString)) {
+				paramValue = Long.valueOf(Double.valueOf(valueAsString)
+						.longValue());
+			}
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
 
-        if (paramValue != null) {
-            paramValue = paramValue.trim();
-        }
+	private LocalDate extractLocalDateParameter(final String paramName,
+			final Map<String, ?> requestMap,
+			final Set<String> modifiedParameters) {
+		LocalDate paramValue = null;
+		if (requestMap.containsKey(paramName)) {
+			String valueAsString = (String) requestMap.get(paramName);
+			if (StringUtils.isNotBlank(valueAsString)) {
+				final String dateFormat = (String) requestMap.get("dateFormat");
+				final Locale locale = new Locale(
+						(String) requestMap.get("locale"));
+				paramValue = convertFrom(valueAsString, paramName, dateFormat,
+						locale);
+			}
+			modifiedParameters.add(paramName);
+		}
+		return paramValue;
+	}
 
-        return paramValue;
-    }
+	private Locale extractLocaleValue(Map<String, ?> requestMap) {
+		Locale clientApplicationLocale = null;
+		String locale = null;
+		if (requestMap.containsKey("locale")) {
+			locale = (String) requestMap.get("locale");
+			clientApplicationLocale = localeFromString(locale);
+		}
+		return clientApplicationLocale;
+	}
 
-    private Integer extractIntegerParameter(final String paramName, final Map<String, ?> requestMap, final Set<String> modifiedParameters) {
-        Integer paramValue = null;
-        if (requestMap.containsKey(paramName)) {
-            String valueAsString = (String) requestMap.get(paramName);
-            paramValue = convertToInteger(valueAsString, paramName, extractLocaleValue(requestMap));
-            modifiedParameters.add(paramName);
-        }
-        return paramValue;
-    }
+	private LocalDate convertFrom(final String dateAsString,
+			final String parameterName, final String dateFormat,
+			final Locale clientApplicationLocale) {
+
+		if (StringUtils.isBlank(dateFormat) || clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			if (StringUtils.isBlank(dateFormat)) {
+				String defaultMessage = new StringBuilder(
+						"The parameter '"
+								+ parameterName
+								+ "' requires a 'dateFormat' parameter to be passed with it.")
+						.toString();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.missing.dateFormat.parameter",
+						defaultMessage, parameterName);
+				dataValidationErrors.add(error);
+			}
+			if (clientApplicationLocale == null) {
+				String defaultMessage = new StringBuilder(
+						"The parameter '"
+								+ parameterName
+								+ "' requires a 'locale' parameter to be passed with it.")
+						.toString();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.missing.locale.parameter",
+						defaultMessage, parameterName);
+				dataValidationErrors.add(error);
+			}
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		LocalDate eventLocalDate = null;
+		if (StringUtils.isNotBlank(dateAsString)) {
+			try {
+				// Locale locale = LocaleContextHolder.getLocale();
+				eventLocalDate = DateTimeFormat
+						.forPattern(dateFormat)
+						.withLocale(clientApplicationLocale)
+						.parseLocalDate(
+								dateAsString
+										.toLowerCase(clientApplicationLocale));
+			} catch (IllegalArgumentException e) {
+				List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.invalid.date.format", "The parameter "
+								+ parameterName
+								+ " is invalid based on the dateFormat: '"
+								+ dateFormat + "' and locale: '"
+								+ clientApplicationLocale + "' provided:",
+						parameterName, dateAsString, dateFormat);
+				dataValidationErrors.add(error);
+
+				throw new PlatformApiDataValidationException(
+						"validation.msg.validation.errors.exist",
+						"Validation errors exist.", dataValidationErrors);
+			}
+		}
+
+		return eventLocalDate;
+	}
 
-    private BigDecimal extractBigDecimalParameter(final String paramName, final Map<String, ?> requestMap,
-            final Set<String> modifiedParameters) {
-        BigDecimal paramValue = null;
-        if (requestMap.containsKey(paramName)) {
-            String valueAsString = (String) requestMap.get(paramName);
-            paramValue = convertFrom(valueAsString, paramName, extractLocaleValue(requestMap));
-            modifiedParameters.add(paramName);
-        }
-        return paramValue;
-    }
+	private Integer convertToInteger(final String numericalValueFormatted,
+			final String parameterName, final Locale clientApplicationLocale) {
+
+		if (clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			String defaultMessage = new StringBuilder("The parameter '"
+					+ parameterName
+					+ "' requires a 'locale' parameter to be passed with it.")
+					.toString();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.missing.locale.parameter", defaultMessage,
+					parameterName);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		try {
+			Integer number = null;
+
+			if (StringUtils.isNotBlank(numericalValueFormatted)) {
+
+				String source = numericalValueFormatted.trim();
+
+				NumberFormat format = NumberFormat
+						.getInstance(clientApplicationLocale);
+				DecimalFormat df = (DecimalFormat) format;
+				DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
+				df.setParseBigDecimal(true);
+
+				// http://bugs.sun.com/view_bug.do?bug_id=4510618
+				char groupingSeparator = symbols.getGroupingSeparator();
+				if (groupingSeparator == '\u00a0') {
+					source = source.replaceAll(" ",
+							Character.toString('\u00a0'));
+				}
+
+				Number parsedNumber = df.parse(source);
+
+				double parsedNumberDouble = parsedNumber.doubleValue();
+				int parsedNumberInteger = parsedNumber.intValue();
+
+				if (source.contains(Character.toString(symbols
+						.getDecimalSeparator()))) {
+					throw new ParseException(source, 0);
+				}
+
+				if (!Double.valueOf(parsedNumberDouble).equals(
+						Double.valueOf(Integer.valueOf(parsedNumberInteger)))) {
+					throw new ParseException(source, 0);
+				}
+
+				number = parsedNumber.intValue();
+			}
+
+			return number;
+		} catch (ParseException e) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError
+					.parameterError(
+							"validation.msg.invalid.integer.format",
+							"The parameter "
+									+ parameterName
+									+ " has value: "
+									+ numericalValueFormatted
+									+ " which is invalid integer value for provided locale of ["
+									+ clientApplicationLocale.toString() + "].",
+							parameterName, numericalValueFormatted,
+							clientApplicationLocale);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+	}
 
-    private boolean extractBooleanParameter(final String paramName, final Map<String, ?> requestMap, final Set<String> modifiedParameters) {
-        boolean paramValue = false;
-        String paramValueAsString = null;
-        if (requestMap.containsKey(paramName)) {
-            paramValueAsString = (String) requestMap.get(paramName);
+	private BigDecimal convertFrom(final String numericalValueFormatted,
+			final String parameterName, final Locale clientApplicationLocale) {
+
+		if (clientApplicationLocale == null) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			String defaultMessage = new StringBuilder("The parameter '"
+					+ parameterName
+					+ "' requires a 'locale' parameter to be passed with it.")
+					.toString();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.missing.locale.parameter", defaultMessage,
+					parameterName);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		try {
+			BigDecimal number = null;
+
+			if (StringUtils.isNotBlank(numericalValueFormatted)) {
+
+				String source = numericalValueFormatted.trim();
+
+				NumberFormat format = NumberFormat
+						.getNumberInstance(clientApplicationLocale);
+				DecimalFormat df = (DecimalFormat) format;
+				DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
+				// http://bugs.sun.com/view_bug.do?bug_id=4510618
+				char groupingSeparator = symbols.getGroupingSeparator();
+				if (groupingSeparator == '\u00a0') {
+					source = source.replaceAll(" ",
+							Character.toString('\u00a0'));
+				}
+
+				NumberFormatter numberFormatter = new NumberFormatter();
+				Number parsedNumber = numberFormatter.parse(source,
+						clientApplicationLocale);
+				number = BigDecimal.valueOf(Double.valueOf(parsedNumber
+						.doubleValue()));
+			}
+
+			return number;
+		} catch (ParseException e) {
+
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError
+					.parameterError(
+							"validation.msg.invalid.decimal.format",
+							"The parameter "
+									+ parameterName
+									+ " has value: "
+									+ numericalValueFormatted
+									+ " which is invalid decimal value for provided locale of ["
+									+ clientApplicationLocale.toString() + "].",
+							parameterName, numericalValueFormatted,
+							clientApplicationLocale);
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+	}
 
-            if (paramValueAsString != null) {
-                paramValueAsString = paramValueAsString.trim();
-            }
+	/*
+	 * private LocalDate convertFrom(final String dateAsString, final String
+	 * parameterName, final String dateFormat) {
+	 * 
+	 * if (StringUtils.isBlank(dateFormat)) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'dateFormat' parameter to be passed with it.").toString();
+	 * ApiParameterError error = ApiParameterError.parameterError(
+	 * "validation.msg.missing.dateFormat.parameter", defaultMessage,
+	 * parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * LocalDate eventLocalDate = null; if
+	 * (StringUtils.isNotBlank(dateAsString)) { try { Locale locale =
+	 * LocaleContextHolder.getLocale(); eventLocalDate =
+	 * DateTimeFormat.forPattern(dateFormat) .withLocale(locale)
+	 * .parseLocalDate(dateAsString.toLowerCase(locale)); } catch
+	 * (IllegalArgumentException e) { List<ApiParameterError>
+	 * dataValidationErrors = new ArrayList<ApiParameterError>();
+	 * ApiParameterError error = ApiParameterError .parameterError(
+	 * "validation.msg.invalid.date.format", "The parameter " + parameterName +
+	 * " is invalid based on the dateFormat provided:" + dateFormat,
+	 * parameterName, dateAsString, dateFormat);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 * 
+	 * return eventLocalDate; }
+	 * 
+	 * private Integer convertToInteger(final String numericalValueFormatted,
+	 * final String parameterName, final Locale clientApplicationLocale) {
+	 * 
+	 * if (clientApplicationLocale == null) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'locale' parameter to be passed with it.").toString();
+	 * ApiParameterError error =
+	 * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
+	 * , defaultMessage, parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * try { Integer number = null;
+	 * 
+	 * if (StringUtils.isNotBlank(numericalValueFormatted)) {
+	 * 
+	 * String source = numericalValueFormatted.trim();
+	 * 
+	 * NumberFormat format = NumberFormat.getInstance(clientApplicationLocale);
+	 * DecimalFormat df = (DecimalFormat) format; DecimalFormatSymbols symbols =
+	 * df.getDecimalFormatSymbols(); df.setParseBigDecimal(true);
+	 * 
+	 * // http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator
+	 * = symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
+	 * source = source.replaceAll(" ", Character.toString('\u00a0')); }
+	 * 
+	 * Number parsedNumber = df.parse(source);
+	 * 
+	 * double parsedNumberDouble = parsedNumber.doubleValue(); int
+	 * parsedNumberInteger = parsedNumber.intValue();
+	 * 
+	 * if (source.contains(Character.toString(symbols.getDecimalSeparator()))) {
+	 * throw new ParseException(source, 0); }
+	 * 
+	 * if
+	 * (!Double.valueOf(parsedNumberDouble).equals(Double.valueOf(Integer.valueOf
+	 * (parsedNumberInteger)))) { throw new ParseException(source, 0); }
+	 * 
+	 * number = parsedNumber.intValue(); }
+	 * 
+	 * return number; } catch (ParseException e) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); ApiParameterError error =
+	 * ApiParameterError.parameterError(
+	 * "validation.msg.invalid.integer.format", "The parameter " + parameterName
+	 * + " has value: " + numericalValueFormatted +
+	 * " which is invalid integer value for provided locale of [" +
+	 * clientApplicationLocale.toString() + "].", parameterName,
+	 * numericalValueFormatted, clientApplicationLocale);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 * 
+	 * private BigDecimal convertFrom(final String numericalValueFormatted,
+	 * final String parameterName, final Locale clientApplicationLocale) {
+	 * 
+	 * if (clientApplicationLocale == null) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); String defaultMessage = new
+	 * StringBuilder("The parameter '" + parameterName +
+	 * "' requires a 'locale' parameter to be passed with it.").toString();
+	 * ApiParameterError error =
+	 * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
+	 * , defaultMessage, parameterName); dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); }
+	 * 
+	 * try { BigDecimal number = null;
+	 * 
+	 * if (StringUtils.isNotBlank(numericalValueFormatted)) {
+	 * 
+	 * String source = numericalValueFormatted.trim();
+	 * 
+	 * NumberFormat format =
+	 * NumberFormat.getNumberInstance(clientApplicationLocale); DecimalFormat df
+	 * = (DecimalFormat) format; DecimalFormatSymbols symbols =
+	 * df.getDecimalFormatSymbols(); //
+	 * http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator =
+	 * symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
+	 * source = source.replaceAll(" ", Character.toString('\u00a0')); }
+	 * 
+	 * NumberFormatter numberFormatter = new NumberFormatter(); Number
+	 * parsedNumber = numberFormatter.parse(source, clientApplicationLocale);
+	 * number = BigDecimal.valueOf(Double.valueOf(parsedNumber.doubleValue()));
+	 * }
+	 * 
+	 * return number; } catch (ParseException e) {
+	 * 
+	 * List<ApiParameterError> dataValidationErrors = new
+	 * ArrayList<ApiParameterError>(); ApiParameterError error =
+	 * ApiParameterError.parameterError(
+	 * "validation.msg.invalid.decimal.format", "The parameter " + parameterName
+	 * + " has value: " + numericalValueFormatted +
+	 * " which is invalid decimal value for provided locale of [" +
+	 * clientApplicationLocale.toString() + "].", parameterName,
+	 * numericalValueFormatted, clientApplicationLocale);
+	 * dataValidationErrors.add(error);
+	 * 
+	 * throw new PlatformApiDataValidationException(
+	 * "validation.msg.validation.errors.exist", "Validation errors exist.",
+	 * dataValidationErrors); } }
+	 */
+	private Locale localeFromString(final String localeAsString) {
+
+		if (StringUtils.isBlank(localeAsString)) {
+			List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.invalid.locale.format",
+					"The parameter locale is invalid. It cannot be blank.",
+					"locale");
+			dataValidationErrors.add(error);
+
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		String languageCode = "";
+		String courntryCode = "";
+		String variantCode = "";
+
+		String[] localeParts = localeAsString.split("_");
+
+		if (localeParts != null && localeParts.length == 1) {
+			languageCode = localeParts[0];
+		}
+
+		if (localeParts != null && localeParts.length == 2) {
+			languageCode = localeParts[0];
+			courntryCode = localeParts[1];
+		}
+
+		if (localeParts != null && localeParts.length == 3) {
+			languageCode = localeParts[0];
+			courntryCode = localeParts[1];
+			variantCode = localeParts[2];
+		}
+
+		return localeFrom(languageCode, courntryCode, variantCode);
+	}
 
-            paramValue = Boolean.valueOf(paramValueAsString);
-            modifiedParameters.add(paramName);
-        }
-        return paramValue;
-    }
+	private Locale localeFrom(final String languageCode,
+			final String courntryCode, final String variantCode) {
+
+		List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+
+		List<String> allowedLanguages = Arrays.asList(Locale.getISOLanguages());
+		if (!allowedLanguages.contains(languageCode.toLowerCase())) {
+			ApiParameterError error = ApiParameterError.parameterError(
+					"validation.msg.invalid.locale.format",
+					"The parameter locale has an invalid language value "
+							+ languageCode + " .", "locale", languageCode);
+			dataValidationErrors.add(error);
+		}
+
+		if (StringUtils.isNotBlank(courntryCode.toUpperCase())) {
+			List<String> allowedCountries = Arrays.asList(Locale
+					.getISOCountries());
+			if (!allowedCountries.contains(courntryCode)) {
+				ApiParameterError error = ApiParameterError.parameterError(
+						"validation.msg.invalid.locale.format",
+						"The parameter locale has an invalid country value "
+								+ courntryCode + " .", "locale", courntryCode);
+				dataValidationErrors.add(error);
+			}
+		}
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+
+		return new Locale(languageCode.toLowerCase(),
+				courntryCode.toUpperCase(), variantCode);
+	}
 
-    private Long extractLongParameter(final String paramName, final Map<String, ?> requestMap, final Set<String> modifiedParameters) {
-        Long paramValue = null;
-        if (requestMap.containsKey(paramName)) {
-            String valueAsString = (String) requestMap.get(paramName);
-            if (StringUtils.isNotBlank(valueAsString)) {
-                paramValue = Long.valueOf(Double.valueOf(valueAsString).longValue());
-            }
-            modifiedParameters.add(paramName);
-        }
-        return paramValue;
-    }
+	@Override
+	public SavingProductCommand convertJsonToSavingProductCommand(
+			final Long resourceIdentifier, final String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "name", "description", "currencyCode",
+				"digitsAfterDecimal", "interestRate", "minInterestRate",
+				"maxInterestRate", "savingsDepositAmount", "savingProductType",
+				"tenureType", "tenure", "frequency", "interestType",
+				"interestCalculationMethod", "minimumBalanceForWithdrawal",
+				"isPartialDepositAllowed", "isLockinPeriodAllowed",
+				"lockinPeriod", "lockinPeriodType", "depositEvery"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+		String name = extractStringParameter("name", requestMap,
+				modifiedParameters);
+		String description = extractStringParameter("description", requestMap,
+				modifiedParameters);
+		String currencyCode = extractStringParameter("currencyCode",
+				requestMap, modifiedParameters);
+		Integer digitsAfterDecimalValue = extractIntegerParameter(
+				"digitsAfterDecimal", requestMap, modifiedParameters);
+		BigDecimal interestRate = extractBigDecimalParameter("interestRate",
+				requestMap, modifiedParameters);
+		BigDecimal minInterestRate = extractBigDecimalParameter(
+				"minInterestRate", requestMap, modifiedParameters);
+		BigDecimal maxInterestRate = extractBigDecimalParameter(
+				"maxInterestRate", requestMap, modifiedParameters);
+		BigDecimal savingsDepositAmount = extractBigDecimalParameter(
+				"savingsDepositAmount", requestMap, modifiedParameters);
+		Integer depositEvery = extractIntegerParameter("depositEvery",
+				requestMap, modifiedParameters);
+		Integer savingProductType = extractIntegerParameter(
+				"savingProductType", requestMap, modifiedParameters);
+		Integer tenureType = extractIntegerParameter("tenureType", requestMap,
+				modifiedParameters);
+		Integer tenure = extractIntegerParameter("tenure", requestMap,
+				modifiedParameters);
+		Integer frequency = extractIntegerParameter("frequency", requestMap,
+				modifiedParameters);
+		Integer interestType = extractIntegerParameter("interestType",
+				requestMap, modifiedParameters);
+		Integer interestCalculationMethod = extractIntegerParameter(
+				"interestCalculationMethod", requestMap, modifiedParameters);
+		BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter(
+				"minimumBalanceForWithdrawal", requestMap, modifiedParameters);
+		boolean isPartialDepositAllowed = extractBooleanParameter(
+				"isPartialDepositAllowed", requestMap, modifiedParameters);
+		boolean isLockinPeriodAllowed = extractBooleanParameter(
+				"isLockinPeriodAllowed", requestMap, modifiedParameters);
+		Integer lockinPeriod = extractIntegerParameter("lockinPeriod",
+				requestMap, modifiedParameters);
+		Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType",
+				requestMap, modifiedParameters);
+
+		return new SavingProductCommand(modifiedParameters, resourceIdentifier,
+				name, description, currencyCode, digitsAfterDecimalValue,
+				interestRate, minInterestRate, maxInterestRate,
+				savingsDepositAmount, depositEvery, savingProductType,
+				tenureType, tenure, frequency, interestType,
+				interestCalculationMethod, minimumBalanceForWithdrawal,
+				isPartialDepositAllowed, isLockinPeriodAllowed, lockinPeriod,
+				lockinPeriodType);
+	}
 
-    private LocalDate extractLocalDateParameter(final String paramName, final Map<String, ?> requestMap,
-            final Set<String> modifiedParameters) {
-        LocalDate paramValue = null;
-        if (requestMap.containsKey(paramName)) {
-            String valueAsString = (String) requestMap.get(paramName);
-            if (StringUtils.isNotBlank(valueAsString)) {
-                final String dateFormat = (String) requestMap.get("dateFormat");
-                final Locale locale = new Locale((String) requestMap.get("locale"));
-                paramValue = convertFrom(valueAsString, paramName, dateFormat, locale);
-            }
-            modifiedParameters.add(paramName);
-        }
-        return paramValue;
-    }
+	@Override
+	public DepositAccountCommand convertJsonToDepositAccountCommand(
+			final Long resourceIdentifier, final String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		// preClosureInterestRate
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"clientId", "productId", "externalId", "deposit",
+				"maturityInterestRate", "preClosureInterestRate",
+				"tenureInMonths", "interestCompoundedEvery",
+				"interestCompoundedEveryPeriodType", "commencementDate",
+				"renewalAllowed", "preClosureAllowed",
+				"interestCompoundingAllowed", "locale", "dateFormat",
+				"isInterestWithdrawable", "isLockinPeriodAllowed",
+				"lockinPeriod", "lockinPeriodType"));
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		Long clientId = extractLongParameter("clientId", requestMap,
+				modifiedParameters);
+		Long productId = extractLongParameter("productId", requestMap,
+				modifiedParameters);
+		String externalId = extractStringParameter("externalId", requestMap,
+				modifiedParameters);
+		BigDecimal deposit = extractBigDecimalParameter("deposit", requestMap,
+				modifiedParameters);
+		BigDecimal interestRate = extractBigDecimalParameter(
+				"maturityInterestRate", requestMap, modifiedParameters);
+		BigDecimal preClosureInterestRate = extractBigDecimalParameter(
+				"preClosureInterestRate", requestMap, modifiedParameters);
+		Integer tenureInMonths = extractIntegerParameter("tenureInMonths",
+				requestMap, modifiedParameters);
+
+		boolean isLockinPeriodAllowed = extractBooleanParameter(
+				"isLockinPeriodAllowed", requestMap, modifiedParameters);
+		Integer lockinPeriod = extractIntegerParameter("lockinPeriod",
+				requestMap, modifiedParameters);
+		Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType",
+				requestMap, modifiedParameters);
+
+		Integer interestCompoundedEvery = extractIntegerParameter(
+				"interestCompoundedEvery", requestMap, modifiedParameters);
+		Integer interestCompoundedEveryPeriodType = extractIntegerParameter(
+				"interestCompoundedEveryPeriodType", requestMap,
+				modifiedParameters);
+		LocalDate commencementDate = extractLocalDateParameter(
+				"commencementDate", requestMap, modifiedParameters);
+
+		boolean renewalAllowed = extractBooleanParameter("renewalAllowed",
+				requestMap, modifiedParameters);
+		boolean preClosureAllowed = extractBooleanParameter(
+				"preClosureAllowed", requestMap, modifiedParameters);
+		boolean isInterestWithdrawable = extractBooleanParameter(
+				"isInterestWithdrawable", requestMap, modifiedParameters);
+		boolean interestCompoundingAllowed = extractBooleanParameter(
+				"interestCompoundingAllowed", requestMap, modifiedParameters);
+
+		return new DepositAccountCommand(modifiedParameters,
+				resourceIdentifier, clientId, productId, externalId, deposit,
+				interestRate, preClosureInterestRate, tenureInMonths,
+				interestCompoundedEvery, interestCompoundedEveryPeriodType,
+				commencementDate, renewalAllowed, preClosureAllowed,
+				isInterestWithdrawable, interestCompoundingAllowed,
+				isLockinPeriodAllowed, lockinPeriod, lockinPeriodType);
+	}
 
-    private Locale extractLocaleValue(Map<String, ?> requestMap) {
-        Locale clientApplicationLocale = null;
-        String locale = null;
-        if (requestMap.containsKey("locale")) {
-            locale = (String) requestMap.get("locale");
-            clientApplicationLocale = localeFromString(locale);
-        }
-        return clientApplicationLocale;
-    }
+	@Override
+	public DepositProductCommand convertJsonToDepositProductCommand(
+			final Long resourceIdentifier, final String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "name", "externalId", "description", "currencyCode",
+				"digitsAfterDecimal", "minimumBalance", "maximumBalance",
+				"tenureInMonths", "maturityDefaultInterestRate",
+				"maturityMinInterestRate", "maturityMaxInterestRate",
+				"interestCompoundedEvery", "interestCompoundedEveryPeriodType",
+				"renewalAllowed", "preClosureAllowed",
+				"preClosureInterestRate", "interestCompoundingAllowed",
+				"isLockinPeriodAllowed", "lockinPeriod", "lockinPeriodType"));
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+		String name = extractStringParameter("name", requestMap,
+				modifiedParameters);
+		String externalId = extractStringParameter("externalId", requestMap,
+				modifiedParameters);
+
+		String description = extractStringParameter("description", requestMap,
+				modifiedParameters);
+		String currencyCode = extractStringParameter("currencyCode",
+				requestMap, modifiedParameters);
+		Integer digitsAfterDecimalValue = extractIntegerParameter(
+				"digitsAfterDecimal", requestMap, modifiedParameters);
+		BigDecimal minimumBalance = extractBigDecimalParameter(
+				"minimumBalance", requestMap, modifiedParameters);
+		BigDecimal maximumBalance = extractBigDecimalParameter(
+				"maximumBalance", requestMap, modifiedParameters);
+
+		Integer tenureMonths = extractIntegerParameter("tenureInMonths",
+				requestMap, modifiedParameters);
+		BigDecimal maturityDefaultInterestRate = extractBigDecimalParameter(
+				"maturityDefaultInterestRate", requestMap, modifiedParameters);
+		BigDecimal maturityMinInterestRate = extractBigDecimalParameter(
+				"maturityMinInterestRate", requestMap, modifiedParameters);
+		BigDecimal maturityMaxInterestRate = extractBigDecimalParameter(
+				"maturityMaxInterestRate", requestMap, modifiedParameters);
+
+		Integer interestCompoundedEvery = extractIntegerParameter(
+				"interestCompoundedEvery", requestMap, modifiedParameters);
+		Integer interestCompoundedEveryPeriodType = extractIntegerParameter(
+				"interestCompoundedEveryPeriodType", requestMap,
+				modifiedParameters);
+
+		boolean interestCompoundingAllowed = extractBooleanParameter(
+				"interestCompoundingAllowed", requestMap, modifiedParameters);
+
+		boolean canRenew = extractBooleanParameter("renewalAllowed",
+				requestMap, modifiedParameters);
+		boolean canPreClose = extractBooleanParameter("preClosureAllowed",
+				requestMap, modifiedParameters);
+		BigDecimal preClosureInterestRate = extractBigDecimalParameter(
+				"preClosureInterestRate", requestMap, modifiedParameters);
+
+		boolean isLockinPeriodAllowed = extractBooleanParameter(
+				"isLockinPeriodAllowed", requestMap, modifiedParameters);
+		Integer lockinPeriod = extractIntegerParameter("lockinPeriod",
+				requestMap, modifiedParameters);
+		Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType",
+				requestMap, modifiedParameters);
+
+		return new DepositProductCommand(modifiedParameters,
+				resourceIdentifier, externalId, name, description,
+				currencyCode, digitsAfterDecimalValue, minimumBalance,
+				maximumBalance, tenureMonths, maturityDefaultInterestRate,
+				maturityMinInterestRate, maturityMaxInterestRate,
+				interestCompoundedEvery, interestCompoundedEveryPeriodType,
+				canRenew, canPreClose, preClosureInterestRate,
+				interestCompoundingAllowed, isLockinPeriodAllowed,
+				lockinPeriod, lockinPeriodType);
+	}
 
-    private LocalDate convertFrom(final String dateAsString, final String parameterName, final String dateFormat,
-            final Locale clientApplicationLocale) {
+	@Override
+	public DepositStateTransitionCommand convertJsonToDepositStateTransitionCommand(
+			Long resourceIdentifier, String json) {
 
-        if (StringUtils.isBlank(dateFormat) || clientApplicationLocale == null) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
 
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            if (StringUtils.isBlank(dateFormat)) {
-                String defaultMessage = new StringBuilder("The parameter '" + parameterName
-                        + "' requires a 'dateFormat' parameter to be passed with it.").toString();
-                ApiParameterError error = ApiParameterError.parameterError("validation.msg.missing.dateFormat.parameter", defaultMessage,
-                        parameterName);
-                dataValidationErrors.add(error);
-            }
-            if (clientApplicationLocale == null) {
-                String defaultMessage = new StringBuilder("The parameter '" + parameterName
-                        + "' requires a 'locale' parameter to be passed with it.").toString();
-                ApiParameterError error = ApiParameterError.parameterError("validation.msg.missing.locale.parameter", defaultMessage,
-                        parameterName);
-                dataValidationErrors.add(error);
-            }
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, Object> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
 
-        LocalDate eventLocalDate = null;
-        if (StringUtils.isNotBlank(dateAsString)) {
-            try {
-                // Locale locale = LocaleContextHolder.getLocale();
-                eventLocalDate = DateTimeFormat.forPattern(dateFormat).withLocale(clientApplicationLocale)
-                        .parseLocalDate(dateAsString.toLowerCase(clientApplicationLocale));
-            } catch (IllegalArgumentException e) {
-                List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-                ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.date.format", "The parameter "
-                        + parameterName + " is invalid based on the dateFormat: '" + dateFormat + "' and locale: '"
-                        + clientApplicationLocale + "' provided:", parameterName, dateAsString, dateFormat);
-                dataValidationErrors.add(error);
-
-                throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                        dataValidationErrors);
-            }
-        }
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"eventDate", "locale", "dateFormat", "note"));
 
-        return eventLocalDate;
-    }
+		checkForUnsupportedParameters(requestMap, supportedParams);
 
-    private Integer convertToInteger(final String numericalValueFormatted, final String parameterName, final Locale clientApplicationLocale) {
+		Set<String> modifiedParameters = new HashSet<String>();
 
-        if (clientApplicationLocale == null) {
+		LocalDate eventDate = extractLocalDateParameter("eventDate",
+				requestMap, modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
 
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            String defaultMessage = new StringBuilder("The parameter '" + parameterName
-                    + "' requires a 'locale' parameter to be passed with it.").toString();
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.missing.locale.parameter", defaultMessage,
-                    parameterName);
-            dataValidationErrors.add(error);
+		return new DepositStateTransitionCommand(resourceIdentifier, eventDate,
+				note);
+	}
 
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
+	@Override
+	public DepositStateTransitionApprovalCommand convertJsonToDepositStateTransitionApprovalCommand(
+			final Long resourceIdentifier, final String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "commencementDate", "locale", "dateFormat",
+				"tenureInMonths", "deposit",
+				"interestCompoundedEveryPeriodType", "productId",
+				"interestCompoundedEvery", "note", "maturityInterestRate"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		LocalDate commencementDate = extractLocalDateParameter(
+				"commencementDate", requestMap, modifiedParameters);
+		BigDecimal deposit = extractBigDecimalParameter("deposit", requestMap,
+				modifiedParameters);
+		BigDecimal maturityInterestRate = extractBigDecimalParameter(
+				"maturityInterestRate", requestMap, modifiedParameters);
+		Integer tenureInMonths = extractIntegerParameter("tenureInMonths",
+				requestMap, modifiedParameters);
+		Integer interestCompoundedEveryPeriodType = extractIntegerParameter(
+				"interestCompoundedEveryPeriodType", requestMap,
+				modifiedParameters);
+		Integer interestCompoundedEvery = extractIntegerParameter(
+				"interestCompoundedEvery", requestMap, modifiedParameters);
+		Long productId = extractLongParameter("productId", requestMap,
+				modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
+
+		return new DepositStateTransitionApprovalCommand(resourceIdentifier,
+				productId, commencementDate, tenureInMonths, deposit,
+				interestCompoundedEveryPeriodType, interestCompoundedEvery,
+				note, maturityInterestRate);
+	}
 
-        try {
-            Integer number = null;
+	@Override
+	public DepositAccountWithdrawalCommand convertJsonToDepositWithdrawalCommand(
+			final Long resourceIdentifier, final String json) {
 
-            if (StringUtils.isNotBlank(numericalValueFormatted)) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
 
-                String source = numericalValueFormatted.trim();
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
 
-                NumberFormat format = NumberFormat.getInstance(clientApplicationLocale);
-                DecimalFormat df = (DecimalFormat) format;
-                DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
-                df.setParseBigDecimal(true);
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList("note",
+				"locale", "maturesOnDate", "dateFormat"));
 
-                // http://bugs.sun.com/view_bug.do?bug_id=4510618
-                char groupingSeparator = symbols.getGroupingSeparator();
-                if (groupingSeparator == '\u00a0') {
-                    source = source.replaceAll(" ", Character.toString('\u00a0'));
-                }
+		checkForUnsupportedParameters(requestMap, supportedParams);
 
-                Number parsedNumber = df.parse(source);
+		Set<String> modifiedParameters = new HashSet<String>();
 
-                double parsedNumberDouble = parsedNumber.doubleValue();
-                int parsedNumberInteger = parsedNumber.intValue();
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
+		LocalDate maturesOnDate = extractLocalDateParameter("maturesOnDate",
+				requestMap, modifiedParameters);
 
-                if (source.contains(Character.toString(symbols.getDecimalSeparator()))) { throw new ParseException(source, 0); }
+		return new DepositAccountWithdrawalCommand(resourceIdentifier, note,
+				maturesOnDate);
+	}
 
-                if (!Double.valueOf(parsedNumberDouble).equals(Double.valueOf(Integer.valueOf(parsedNumberInteger)))) { throw new ParseException(
-                        source, 0); }
+	@Override
+	public DepositAccountWithdrawInterestCommand convertJsonToDepositAccountWithdrawInterestCommand(
+			final Long resourceIdentifier, final String json) {
 
-                number = parsedNumber.intValue();
-            }
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
 
-            return number;
-        } catch (ParseException e) {
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
 
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.integer.format", "The parameter "
-                    + parameterName + " has value: " + numericalValueFormatted + " which is invalid integer value for provided locale of ["
-                    + clientApplicationLocale.toString() + "].", parameterName, numericalValueFormatted, clientApplicationLocale);
-            dataValidationErrors.add(error);
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"amount", "note", "locale"));
 
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
-    }
+		checkForUnsupportedParameters(requestMap, supportedParams);
 
-    private BigDecimal convertFrom(final String numericalValueFormatted, final String parameterName, final Locale clientApplicationLocale) {
+		Set<String> modifiedParameters = new HashSet<String>();
 
-        if (clientApplicationLocale == null) {
+		BigDecimal amount = extractBigDecimalParameter("amount", requestMap,
+				modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
 
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            String defaultMessage = new StringBuilder("The parameter '" + parameterName
-                    + "' requires a 'locale' parameter to be passed with it.").toString();
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.missing.locale.parameter", defaultMessage,
-                    parameterName);
-            dataValidationErrors.add(error);
+		return new DepositAccountWithdrawInterestCommand(resourceIdentifier,
+				amount, note);
+	}
 
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
+	@Override
+	public SavingAccountCommand convertJsonToSavingAccountCommand(
+			Long resourceIdentifier, String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		// currencyCode, currencyDigits
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"clientId", "productId", "externalId", "currencyCode",
+				"digitsAfterDecimal", "savingsDepositAmountPerPeriod",
+				"recurringInterestRate", "savingInterestRate", "tenure",
+				"commencementDate", "locale", "dateFormat",
+				"isLockinPeriodAllowed", "lockinPeriod", "lockinPeriodType",
+				"tenureType", "depositfrequency", "interestType",
+				"interestCalculationMethod", "minimumBalanceForWithdrawal",
+				"isPartialDepositAllowed", "depositEvery", "interestPostEvery",
+				"interestPostFrequency"));
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		Long clientId = extractLongParameter("clientId", requestMap,
+				modifiedParameters);
+		Long productId = extractLongParameter("productId", requestMap,
+				modifiedParameters);
+		String externalId = extractStringParameter("externalId", requestMap,
+				modifiedParameters);
+		String currencyCode = extractStringParameter("currencyCode",
+				requestMap, modifiedParameters);
+		Integer digitsAfterDecimalValue = extractIntegerParameter(
+				"digitsAfterDecimal", requestMap, modifiedParameters);
+		BigDecimal savingsDepositAmount = extractBigDecimalParameter(
+				"savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
+		BigDecimal recurringInterestRate = extractBigDecimalParameter(
+				"recurringInterestRate", requestMap, modifiedParameters);
+		BigDecimal savingInterestRate = extractBigDecimalParameter(
+				"savingInterestRate", requestMap, modifiedParameters);
+		Integer tenure = extractIntegerParameter("tenure", requestMap,
+				modifiedParameters);
+
+		boolean isLockinPeriodAllowed = extractBooleanParameter(
+				"isLockinPeriodAllowed", requestMap, modifiedParameters);
+		Integer lockinPeriod = extractIntegerParameter("lockinPeriod",
+				requestMap, modifiedParameters);
+		Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType",
+				requestMap, modifiedParameters);
+
+		LocalDate commencementDate = extractLocalDateParameter(
+				"commencementDate", requestMap, modifiedParameters);
+		Integer tenureType = extractIntegerParameter("tenureType", requestMap,
+				modifiedParameters);
+		Integer depositfrequency = extractIntegerParameter("depositfrequency",
+				requestMap, modifiedParameters);
+		Integer interestType = extractIntegerParameter("interestType",
+				requestMap, modifiedParameters);
+		Integer interestCalculationMethod = extractIntegerParameter(
+				"interestCalculationMethod", requestMap, modifiedParameters);
+		BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter(
+				"minimumBalanceForWithdrawal", requestMap, modifiedParameters);
+		boolean isPartialDepositAllowed = extractBooleanParameter(
+				"isPartialDepositAllowed", requestMap, modifiedParameters);
+		Integer depositEvery = extractIntegerParameter("depositEvery",
+				requestMap, modifiedParameters);
+
+		Integer interestPostEvery = extractIntegerParameter(
+				"interestPostEvery", requestMap, modifiedParameters);
+		Integer interestPostFrequency = extractIntegerParameter(
+				"interestPostFrequency", requestMap, modifiedParameters);
+
+		return new SavingAccountCommand(modifiedParameters, resourceIdentifier,
+				clientId, productId, externalId, currencyCode,
+				digitsAfterDecimalValue, savingsDepositAmount,
+				recurringInterestRate, savingInterestRate, tenure,
+				commencementDate, tenureType, depositfrequency, interestType,
+				minimumBalanceForWithdrawal, interestCalculationMethod,
+				isLockinPeriodAllowed, isPartialDepositAllowed, lockinPeriod,
+				lockinPeriodType, depositEvery, interestPostEvery,
+				interestPostFrequency);
+	}
 
-        try {
-            BigDecimal number = null;
+	@Override
+	public GuarantorCommand convertJsonToGuarantorCommand(
+			Long resourceIdentifier, Long loanId, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"externalGuarantor", "existingClientId", "firstname",
+				"lastname", "addressLine1", "addressLine2", "city", "state",
+				"zip", "country", "mobileNumber", "housePhoneNumber",
+				"comment", "dob", "locale", "dateFormat"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		boolean externalGuarantor = extractBooleanParameter(
+				"externalGuarantor", requestMap, modifiedParameters);
+
+		Long existingClientId = extractLongParameter("existingClientId",
+				requestMap, modifiedParameters);
+		String firstname = extractStringParameter("firstname", requestMap,
+				modifiedParameters);
+		String lastname = extractStringParameter("lastname", requestMap,
+				modifiedParameters);
+		String addressLine1 = extractStringParameter("addressLine1",
+				requestMap, modifiedParameters);
+		String addressLine2 = extractStringParameter("addressLine2",
+				requestMap, modifiedParameters);
+		String city = extractStringParameter("city", requestMap,
+				modifiedParameters);
+		String state = extractStringParameter("state", requestMap,
+				modifiedParameters);
+		String zip = extractStringParameter("zip", requestMap,
+				modifiedParameters);
+		String country = extractStringParameter("country", requestMap,
+				modifiedParameters);
+		String mobileNumber = extractStringParameter("mobileNumber",
+				requestMap, modifiedParameters);
+		String housePhoneNumber = extractStringParameter("housePhoneNumber",
+				requestMap, modifiedParameters);
+		String comment = extractStringParameter("comment", requestMap,
+				modifiedParameters);
+		String dob = extractStringParameter("dob", requestMap,
+				modifiedParameters);
+
+		// workaround for passing locale info to data table api
+		final String dateFormat = requestMap.get("dateFormat");
+		final String locale = requestMap.get("locale");
+
+		GuarantorCommand command = new GuarantorCommand(modifiedParameters,
+				existingClientId, firstname, lastname, externalGuarantor,
+				addressLine1, addressLine2, city, state, zip, country,
+				mobileNumber, housePhoneNumber, comment, dob);
+		command.setDateFormat(dateFormat);
+		command.setLocale(locale);
+		return command;
+	}
 
-            if (StringUtils.isNotBlank(numericalValueFormatted)) {
+	@Override
+	public SavingStateTransitionsCommand convertJsonToSavingStateTransitionCommand(
+			Long accountId, String json) {
 
-                String source = numericalValueFormatted.trim();
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
 
-                NumberFormat format = NumberFormat.getNumberInstance(clientApplicationLocale);
-                DecimalFormat df = (DecimalFormat) format;
-                DecimalFormatSymbols symbols = df.getDecimalFormatSymbols();
-                // http://bugs.sun.com/view_bug.do?bug_id=4510618
-                char groupingSeparator = symbols.getGroupingSeparator();
-                if (groupingSeparator == '\u00a0') {
-                    source = source.replaceAll(" ", Character.toString('\u00a0'));
-                }
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, Object> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
 
-                NumberFormatter numberFormatter = new NumberFormatter();
-                Number parsedNumber = numberFormatter.parse(source, clientApplicationLocale);
-                number = BigDecimal.valueOf(Double.valueOf(parsedNumber.doubleValue()));
-            }
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"eventDate", "locale", "dateFormat", "note"));
 
-            return number;
-        } catch (ParseException e) {
+		checkForUnsupportedParameters(requestMap, supportedParams);
 
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.decimal.format", "The parameter "
-                    + parameterName + " has value: " + numericalValueFormatted + " which is invalid decimal value for provided locale of ["
-                    + clientApplicationLocale.toString() + "].", parameterName, numericalValueFormatted, clientApplicationLocale);
-            dataValidationErrors.add(error);
+		Set<String> modifiedParameters = new HashSet<String>();
 
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
-    }
+		LocalDate eventDate = extractLocalDateParameter("eventDate",
+				requestMap, modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
 
-    /*
-     * private LocalDate convertFrom(final String dateAsString, final String
-     * parameterName, final String dateFormat) {
-     * 
-     * if (StringUtils.isBlank(dateFormat)) {
-     * 
-     * List<ApiParameterError> dataValidationErrors = new
-     * ArrayList<ApiParameterError>(); String defaultMessage = new
-     * StringBuilder("The parameter '" + parameterName +
-     * "' requires a 'dateFormat' parameter to be passed with it.").toString();
-     * ApiParameterError error = ApiParameterError.parameterError(
-     * "validation.msg.missing.dateFormat.parameter", defaultMessage,
-     * parameterName); dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); }
-     * 
-     * LocalDate eventLocalDate = null; if
-     * (StringUtils.isNotBlank(dateAsString)) { try { Locale locale =
-     * LocaleContextHolder.getLocale(); eventLocalDate =
-     * DateTimeFormat.forPattern(dateFormat) .withLocale(locale)
-     * .parseLocalDate(dateAsString.toLowerCase(locale)); } catch
-     * (IllegalArgumentException e) { List<ApiParameterError>
-     * dataValidationErrors = new ArrayList<ApiParameterError>();
-     * ApiParameterError error = ApiParameterError .parameterError(
-     * "validation.msg.invalid.date.format", "The parameter " + parameterName +
-     * " is invalid based on the dateFormat provided:" + dateFormat,
-     * parameterName, dateAsString, dateFormat);
-     * dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); } }
-     * 
-     * return eventLocalDate; }
-     * 
-     * private Integer convertToInteger(final String numericalValueFormatted,
-     * final String parameterName, final Locale clientApplicationLocale) {
-     * 
-     * if (clientApplicationLocale == null) {
-     * 
-     * List<ApiParameterError> dataValidationErrors = new
-     * ArrayList<ApiParameterError>(); String defaultMessage = new
-     * StringBuilder("The parameter '" + parameterName +
-     * "' requires a 'locale' parameter to be passed with it.").toString();
-     * ApiParameterError error =
-     * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
-     * , defaultMessage, parameterName); dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); }
-     * 
-     * try { Integer number = null;
-     * 
-     * if (StringUtils.isNotBlank(numericalValueFormatted)) {
-     * 
-     * String source = numericalValueFormatted.trim();
-     * 
-     * NumberFormat format = NumberFormat.getInstance(clientApplicationLocale);
-     * DecimalFormat df = (DecimalFormat) format; DecimalFormatSymbols symbols =
-     * df.getDecimalFormatSymbols(); df.setParseBigDecimal(true);
-     * 
-     * // http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator
-     * = symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
-     * source = source.replaceAll(" ", Character.toString('\u00a0')); }
-     * 
-     * Number parsedNumber = df.parse(source);
-     * 
-     * double parsedNumberDouble = parsedNumber.doubleValue(); int
-     * parsedNumberInteger = parsedNumber.intValue();
-     * 
-     * if (source.contains(Character.toString(symbols.getDecimalSeparator()))) {
-     * throw new ParseException(source, 0); }
-     * 
-     * if
-     * (!Double.valueOf(parsedNumberDouble).equals(Double.valueOf(Integer.valueOf
-     * (parsedNumberInteger)))) { throw new ParseException(source, 0); }
-     * 
-     * number = parsedNumber.intValue(); }
-     * 
-     * return number; } catch (ParseException e) {
-     * 
-     * List<ApiParameterError> dataValidationErrors = new
-     * ArrayList<ApiParameterError>(); ApiParameterError error =
-     * ApiParameterError.parameterError(
-     * "validation.msg.invalid.integer.format", "The parameter " + parameterName
-     * + " has value: " + numericalValueFormatted +
-     * " which is invalid integer value for provided locale of [" +
-     * clientApplicationLocale.toString() + "].", parameterName,
-     * numericalValueFormatted, clientApplicationLocale);
-     * dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); } }
-     * 
-     * private BigDecimal convertFrom(final String numericalValueFormatted,
-     * final String parameterName, final Locale clientApplicationLocale) {
-     * 
-     * if (clientApplicationLocale == null) {
-     * 
-     * List<ApiParameterError> dataValidationErrors = new
-     * ArrayList<ApiParameterError>(); String defaultMessage = new
-     * StringBuilder("The parameter '" + parameterName +
-     * "' requires a 'locale' parameter to be passed with it.").toString();
-     * ApiParameterError error =
-     * ApiParameterError.parameterError("validation.msg.missing.locale.parameter"
-     * , defaultMessage, parameterName); dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); }
-     * 
-     * try { BigDecimal number = null;
-     * 
-     * if (StringUtils.isNotBlank(numericalValueFormatted)) {
-     * 
-     * String source = numericalValueFormatted.trim();
-     * 
-     * NumberFormat format =
-     * NumberFormat.getNumberInstance(clientApplicationLocale); DecimalFormat df
-     * = (DecimalFormat) format; DecimalFormatSymbols symbols =
-     * df.getDecimalFormatSymbols(); //
-     * http://bugs.sun.com/view_bug.do?bug_id=4510618 char groupingSeparator =
-     * symbols.getGroupingSeparator(); if (groupingSeparator == '\u00a0') {
-     * source = source.replaceAll(" ", Character.toString('\u00a0')); }
-     * 
-     * NumberFormatter numberFormatter = new NumberFormatter(); Number
-     * parsedNumber = numberFormatter.parse(source, clientApplicationLocale);
-     * number = BigDecimal.valueOf(Double.valueOf(parsedNumber.doubleValue()));
-     * }
-     * 
-     * return number; } catch (ParseException e) {
-     * 
-     * List<ApiParameterError> dataValidationErrors = new
-     * ArrayList<ApiParameterError>(); ApiParameterError error =
-     * ApiParameterError.parameterError(
-     * "validation.msg.invalid.decimal.format", "The parameter " + parameterName
-     * + " has value: " + numericalValueFormatted +
-     * " which is invalid decimal value for provided locale of [" +
-     * clientApplicationLocale.toString() + "].", parameterName,
-     * numericalValueFormatted, clientApplicationLocale);
-     * dataValidationErrors.add(error);
-     * 
-     * throw new PlatformApiDataValidationException(
-     * "validation.msg.validation.errors.exist", "Validation errors exist.",
-     * dataValidationErrors); } }
-     */
-    private Locale localeFromString(final String localeAsString) {
-
-        if (StringUtils.isBlank(localeAsString)) {
-            List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.locale.format",
-                    "The parameter locale is invalid. It cannot be blank.", "locale");
-            dataValidationErrors.add(error);
-
-            throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.",
-                    dataValidationErrors);
-        }
+		return new SavingStateTransitionsCommand(accountId, eventDate, note);
 
-        String languageCode = "";
-        String courntryCode = "";
-        String variantCode = "";
+	}
 
-        String[] localeParts = localeAsString.split("_");
+	@Override
+	public SavingAccountApprovalCommand convertJsonToSavingApprovalCommand(
+			Long accountId, String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, Object> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "dateFormat", "commencementDate",
+				"savingsDepositAmountPerPeriod", "minimumBalanceForWithdrawal",
+				"recurringInterestRate", "savingInterestRate", "interestType",
+				"tenure", "tenureType", "frequency", "payEvery", "note",
+				"interestPostEvery", "interestPostFrequency"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		LocalDate commencementDate = extractLocalDateParameter(
+				"commencementDate", requestMap, modifiedParameters);
+		BigDecimal savingsDepositAmountPerPeriod = extractBigDecimalParameter(
+				"savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
+		BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter(
+				"minimumBalanceForWithdrawal", requestMap, modifiedParameters);
+		BigDecimal recurringInterestRate = extractBigDecimalParameter(
+				"recurringInterestRate", requestMap, modifiedParameters);
+		BigDecimal savingInterestRate = extractBigDecimalParameter(
+				"savingInterestRate", requestMap, modifiedParameters);
+		Integer interestType = extractIntegerParameter("interestType",
+				requestMap, modifiedParameters);
+		Integer tenure = extractIntegerParameter("tenure", requestMap,
+				modifiedParameters);
+		Integer tenureType = extractIntegerParameter("tenureType", requestMap,
+				modifiedParameters);
+		Integer frequency = extractIntegerParameter("frequency", requestMap,
+				modifiedParameters);
+		Integer payEvery = extractIntegerParameter("payEvery", requestMap,
+				modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
+		Integer interestPostEvery = extractIntegerParameter(
+				"interestPostEvery", requestMap, modifiedParameters);
+		Integer interestPostFrequency = extractIntegerParameter(
+				"interestPostFrequency", requestMap, modifiedParameters);
+		return new SavingAccountApprovalCommand(accountId, commencementDate,
+				savingsDepositAmountPerPeriod, minimumBalanceForWithdrawal,
+				recurringInterestRate, savingInterestRate, interestType,
+				tenure, tenureType, frequency, payEvery, note,
+				interestPostEvery, interestPostFrequency);
+	}
 
-        if (localeParts != null && localeParts.length == 1) {
-            languageCode = localeParts[0];
-        }
+	@Override
+	public SavingAccountDepositCommand convertJsonToSavingAccountDepositCommand(
+			Long accountId, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, Object> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "dateFormat", "depositDate",
+				"savingsDepositAmountPerPeriod", "note"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		LocalDate depositDate = extractLocalDateParameter("depositDate",
+				requestMap, modifiedParameters);
+		BigDecimal savingsDepositAmountPerPeriod = extractBigDecimalParameter(
+				"savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
+		return new SavingAccountDepositCommand(accountId,
+				savingsDepositAmountPerPeriod, depositDate, note);
+	}
 
-        if (localeParts != null && localeParts.length == 2) {
-            languageCode = localeParts[0];
-            courntryCode = localeParts[1];
-        }
+	@Override
+	public SavingAccountWithdrawalCommand convertJsonToSavingAccountWithdrawalCommand(
+			Long accountId, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, Object> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"locale", "dateFormat", "transactionDate", "amount", "note"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		LocalDate transactionDate = extractLocalDateParameter(
+				"transactionDate", requestMap, modifiedParameters);
+		BigDecimal amount = extractBigDecimalParameter("amount", requestMap,
+				modifiedParameters);
+		String note = extractStringParameter("note", requestMap,
+				modifiedParameters);
+		return new SavingAccountWithdrawalCommand(accountId, transactionDate,
+				amount, note);
+	}
 
-        if (localeParts != null && localeParts.length == 3) {
-            languageCode = localeParts[0];
-            courntryCode = localeParts[1];
-            variantCode = localeParts[2];
-        }
+	@Override
+	public AdjustmentCommand convertJsonToAdjustmentCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"adjustment_date", "adjustment_code", "adjustment_type",
+				"amount_paid", "bill_id", "external_id", "Remarks", "locale",
+				"dateFormat"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		// Long client_id=extractLongParameter("client_id", requestMap,
+		// modifiedParameters);
+		LocalDate adjustment_date = extractLocalDateParameter(
+				"adjustment_date", requestMap, modifiedParameters);
+		String adjustment_code = extractStringParameter("adjustment_code",
+				requestMap, modifiedParameters);
+		String adjustment_type = extractStringParameter("adjustment_type",
+				requestMap, modifiedParameters);
+		BigDecimal amount_paid = extractBigDecimalParameter("amount_paid",
+				requestMap, modifiedParameters);
+		Long bill_id = extractLongParameter("bill_id", requestMap,
+				modifiedParameters);
+		Long external_id = extractLongParameter("external_id", requestMap,
+				modifiedParameters);
+		// boolean is_deleted=extractBooleanParameter("is_deleted", requestMap,
+		// modifiedParameters);
+		String Remarks = extractStringParameter("Remarks", requestMap,
+				modifiedParameters);
+		// Long createdby_id=extractLongParameter("createdby_id", requestMap,
+		// modifiedParameters);
+		// LocalDate created_date=extractLocalDateParameter("created_date",
+		// requestMap, modifiedParameters);
+		// LocalDate
+		// lastmodified_date=extractLocalDateParameter("lastmodified_date",
+		// requestMap, modifiedParameters);
+		// Long lastmodifiedby_id=extractLongParameter("lastmodifiedby_id",
+		// requestMap, modifiedParameters);
+
+		return new AdjustmentCommand(adjustment_date, adjustment_code,
+				adjustment_type, amount_paid, bill_id, external_id, Remarks);
+	}
 
-        return localeFrom(languageCode, courntryCode, variantCode);
-    }
+	@Override
+	public BillingCycleCommand convertJsonToBillingCycleCommand(
+			final Long resourceIdentifier, final String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Set<String> modifiedParameters = new HashSet<String>();
+		Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"billing_code", "description", "frequency", "every"));
+		checkForUnsupportedParameters(requestMap, supportedParams);
+		String billing_code = extractStringParameter("billing_code",
+				requestMap, modifiedParameters);
+		String description = extractStringParameter("description", requestMap,
+				modifiedParameters);
+		String frequency = extractStringParameter("frequency", requestMap,
+				modifiedParameters);
+		// String
+		// every=extractStringParameter("every",requestMap,modifiedParameters);
+
+		final JsonParser parser = new JsonParser();
+
+		String[] services = null;
+		JsonElement element = parser.parse(json);
+		if (element.isJsonObject()) {
+			JsonObject object = element.getAsJsonObject();
+			if (object.has("every")) {
+				modifiedParameters.add("every");
+				JsonArray array = object.get("every").getAsJsonArray();
+				services = new String[array.size()];
+				for (int i = 0; i < array.size(); i++) {
+					services[i] = array.get(i).getAsString();
+				}
+			}
+		}
+
+		return new BillingCycleCommand(modifiedParameters, billing_code,
+				description, frequency, services);
+	}
 
-    private Locale localeFrom(final String languageCode, final String courntryCode, final String variantCode) {
+	@Override
+	public ChargeCodeCommand convertJsonToChargeCodeCommand(
+			Long resourceIdentifier, String json) {
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>() {
+		}.getType();
+		Map<String, String> requestMap = gsonConverter
+				.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList(
+				"chargeCode", "chargeDescription", "chargeType", "locale"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		String chargeCode = extractStringParameter("chargeCode", requestMap,
+				modifiedParameters);
+		String chargeDescription = extractStringParameter("chargeDescription",
+				requestMap, modifiedParameters);
+		String chargeType = extractStringParameter("chargeType", requestMap,
+				modifiedParameters);
+		return new ChargeCodeCommand(chargeCode, chargeDescription, chargeType);
+	}
+	
+	@Override
+	public DiscountMasterCommand convertJsonToDiscountMasterCommand(Long resourceIdentifier, String json) {
+	if (StringUtils.isBlank(json)) {
+	throw new InvalidJsonException();
+	}
 
-        List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+	Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+	Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
 
-        List<String> allowedLanguages = Arrays.asList(Locale.getISOLanguages());
-        if (!allowedLanguages.contains(languageCode.toLowerCase())) {
-            ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.locale.format",
-                    "The parameter locale has an invalid language value " + languageCode + " .", "locale", languageCode);
-            dataValidationErrors.add(error);
-        }
+	Set<String> supportedParams = new HashSet<String>(Arrays.asList("discountCode","discountDescription","discounType","discountValue"));
 
-        if (StringUtils.isNotBlank(courntryCode.toUpperCase())) {
-            List<String> allowedCountries = Arrays.asList(Locale.getISOCountries());
-            if (!allowedCountries.contains(courntryCode)) {
-                ApiParameterError error = ApiParameterError.parameterError("validation.msg.invalid.locale.format",
-                        "The parameter locale has an invalid country value " + courntryCode + " .", "locale", courntryCode);
-                dataValidationErrors.add(error);
-            }
-        }
+	checkForUnsupportedParameters(requestMap, supportedParams);
 
-        if (!dataValidationErrors.isEmpty()) { throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist",
-                "Validation errors exist.", dataValidationErrors); }
+	Set<String> modifiedParameters = new HashSet<String>();
 
-        return new Locale(languageCode.toLowerCase(), courntryCode.toUpperCase(), variantCode);
-    }
+	Long discountCode = extractLongParameter("discountCode", requestMap, modifiedParameters);
+	String discountDescription = extractStringParameter("discountDescription", requestMap, modifiedParameters);
+	String discounType = extractStringParameter("discounType", requestMap, modifiedParameters);
+	Long discountValue=extractLongParameter("discountValue", requestMap, modifiedParameters);
 
+	return new DiscountMasterCommand(discountCode,discountDescription,discounType,discountValue,modifiedParameters);
+	}
+	
+	 
     @Override
-    public SavingProductCommand convertJsonToSavingProductCommand(final Long resourceIdentifier, final String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "name", "description", "currencyCode",
-                "digitsAfterDecimal", "interestRate", "minInterestRate", "maxInterestRate", "savingsDepositAmount", "savingProductType",
-                "tenureType", "tenure", "frequency", "interestType", "interestCalculationMethod", "minimumBalanceForWithdrawal",
-                "isPartialDepositAllowed", "isLockinPeriodAllowed", "lockinPeriod", "lockinPeriodType", "depositEvery"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-        String name = extractStringParameter("name", requestMap, modifiedParameters);
-        String description = extractStringParameter("description", requestMap, modifiedParameters);
-        String currencyCode = extractStringParameter("currencyCode", requestMap, modifiedParameters);
-        Integer digitsAfterDecimalValue = extractIntegerParameter("digitsAfterDecimal", requestMap, modifiedParameters);
-        BigDecimal interestRate = extractBigDecimalParameter("interestRate", requestMap, modifiedParameters);
-        BigDecimal minInterestRate = extractBigDecimalParameter("minInterestRate", requestMap, modifiedParameters);
-        BigDecimal maxInterestRate = extractBigDecimalParameter("maxInterestRate", requestMap, modifiedParameters);
-        BigDecimal savingsDepositAmount = extractBigDecimalParameter("savingsDepositAmount", requestMap, modifiedParameters);
-        Integer depositEvery = extractIntegerParameter("depositEvery", requestMap, modifiedParameters);
-        Integer savingProductType = extractIntegerParameter("savingProductType", requestMap, modifiedParameters);
-        Integer tenureType = extractIntegerParameter("tenureType", requestMap, modifiedParameters);
-        Integer tenure = extractIntegerParameter("tenure", requestMap, modifiedParameters);
-        Integer frequency = extractIntegerParameter("frequency", requestMap, modifiedParameters);
-        Integer interestType = extractIntegerParameter("interestType", requestMap, modifiedParameters);
-        Integer interestCalculationMethod = extractIntegerParameter("interestCalculationMethod", requestMap, modifiedParameters);
-        BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter("minimumBalanceForWithdrawal", requestMap, modifiedParameters);
-        boolean isPartialDepositAllowed = extractBooleanParameter("isPartialDepositAllowed", requestMap, modifiedParameters);
-        boolean isLockinPeriodAllowed = extractBooleanParameter("isLockinPeriodAllowed", requestMap, modifiedParameters);
-        Integer lockinPeriod = extractIntegerParameter("lockinPeriod", requestMap, modifiedParameters);
-        Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType", requestMap, modifiedParameters);
-
-        return new SavingProductCommand(modifiedParameters, resourceIdentifier, name, description, currencyCode, digitsAfterDecimalValue,
-                interestRate, minInterestRate, maxInterestRate, savingsDepositAmount, depositEvery, savingProductType, tenureType, tenure,
-                frequency, interestType, interestCalculationMethod, minimumBalanceForWithdrawal, isPartialDepositAllowed,
-                isLockinPeriodAllowed, lockinPeriod, lockinPeriodType);
+    public OrdersCommand convertJsonToOrderCommand(final Object resourceIdentifier,final Long client_id, final String json)
+    {
+   
+   
+    if (StringUtils.isBlank(json)) {
+throw new InvalidJsonException();
+}
+
+Set<String> modifiedParameters = new HashSet<String>();
+Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+Set<String> supportedParams = new HashSet<String>(
+Arrays.asList("planCode","locale","dateFormat","start_date","paytermCode","contractPeriod")
+);
+checkForUnsupportedParameters(requestMap, supportedParams);
+Long plan_id=extractLongParameter("planCode", requestMap, modifiedParameters);
+ LocalDate start_date = extractLocalDateParameter("start_date", requestMap, modifiedParameters);
+String paytermtype=extractStringParameter("paytermCode",requestMap,modifiedParameters);
+Long contractPeriod=extractLongParameter("contractPeriod",requestMap,modifiedParameters);
+    
+    return new OrdersCommand(modifiedParameters,plan_id,client_id,start_date,paytermtype,contractPeriod,client_id,false);
     }
-
+    
     @Override
-    public DepositAccountCommand convertJsonToDepositAccountCommand(final Long resourceIdentifier, final String json) {
+    public Paymentcommand convertJsonToPaymentCommand(final Long resourceIdentifier, final String json) {
 
         if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
 
@@ -628,360 +1539,247 @@ public class PortfolioApiDataConversionServiceImpl implements PortfolioApiDataCo
         Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
 
         // preClosureInterestRate
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("clientId", "productId", "externalId", "deposit",
-                "maturityInterestRate", "preClosureInterestRate", "tenureInMonths", "interestCompoundedEvery",
-                "interestCompoundedEveryPeriodType", "commencementDate", "renewalAllowed", "preClosureAllowed",
-                "interestCompoundingAllowed", "locale", "dateFormat", "isInterestWithdrawable", "isLockinPeriodAllowed", "lockinPeriod",
-                "lockinPeriodType"));
+        Set<String> supportedParams = new HashSet<String>(Arrays.asList("payment_id","clientId","payment_date","payment_code","amount_paid",
+         "statment_id","externalId","remarks", "locale", "dateFormat"));
         checkForUnsupportedParameters(requestMap, supportedParams);
         Set<String> modifiedParameters = new HashSet<String>();
 
         Long clientId = extractLongParameter("clientId", requestMap, modifiedParameters);
-        Long productId = extractLongParameter("productId", requestMap, modifiedParameters);
-        String externalId = extractStringParameter("externalId", requestMap, modifiedParameters);
-        BigDecimal deposit = extractBigDecimalParameter("deposit", requestMap, modifiedParameters);
-        BigDecimal interestRate = extractBigDecimalParameter("maturityInterestRate", requestMap, modifiedParameters);
-        BigDecimal preClosureInterestRate = extractBigDecimalParameter("preClosureInterestRate", requestMap, modifiedParameters);
-        Integer tenureInMonths = extractIntegerParameter("tenureInMonths", requestMap, modifiedParameters);
-
-        boolean isLockinPeriodAllowed = extractBooleanParameter("isLockinPeriodAllowed", requestMap, modifiedParameters);
-        Integer lockinPeriod = extractIntegerParameter("lockinPeriod", requestMap, modifiedParameters);
-        Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType", requestMap, modifiedParameters);
-
-        Integer interestCompoundedEvery = extractIntegerParameter("interestCompoundedEvery", requestMap, modifiedParameters);
-        Integer interestCompoundedEveryPeriodType = extractIntegerParameter("interestCompoundedEveryPeriodType", requestMap,
-                modifiedParameters);
-        LocalDate commencementDate = extractLocalDateParameter("commencementDate", requestMap, modifiedParameters);
-
-        boolean renewalAllowed = extractBooleanParameter("renewalAllowed", requestMap, modifiedParameters);
-        boolean preClosureAllowed = extractBooleanParameter("preClosureAllowed", requestMap, modifiedParameters);
-        boolean isInterestWithdrawable = extractBooleanParameter("isInterestWithdrawable", requestMap, modifiedParameters);
-        boolean interestCompoundingAllowed = extractBooleanParameter("interestCompoundingAllowed", requestMap, modifiedParameters);
-
-        return new DepositAccountCommand(modifiedParameters, resourceIdentifier, clientId, productId, externalId, deposit, interestRate,
-                preClosureInterestRate, tenureInMonths, interestCompoundedEvery, interestCompoundedEveryPeriodType, commencementDate,
-                renewalAllowed, preClosureAllowed, isInterestWithdrawable, interestCompoundingAllowed, isLockinPeriodAllowed, lockinPeriod,
-                lockinPeriodType);
-    }
+        Long payment_id = extractLongParameter("payment_id", requestMap, modifiedParameters);
+        Long externalId = extractLongParameter("externalId", requestMap, modifiedParameters);
+        Long statment_id = extractLongParameter("statment_id", requestMap, modifiedParameters);
+        String payment_code = extractStringParameter("payment_code", requestMap, modifiedParameters);
+        String remarks = extractStringParameter("remarks", requestMap, modifiedParameters);
+        BigDecimal amount_paid = extractBigDecimalParameter("amount_paid", requestMap, modifiedParameters);
+        LocalDate payment_date = extractLocalDateParameter("payment_date", requestMap, modifiedParameters);
 
-    @Override
-    public DepositProductCommand convertJsonToDepositProductCommand(final Long resourceIdentifier, final String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
 
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "name", "externalId", "description", "currencyCode",
-                "digitsAfterDecimal", "minimumBalance", "maximumBalance", "tenureInMonths", "maturityDefaultInterestRate",
-                "maturityMinInterestRate", "maturityMaxInterestRate", "interestCompoundedEvery", "interestCompoundedEveryPeriodType",
-                "renewalAllowed", "preClosureAllowed", "preClosureInterestRate", "interestCompoundingAllowed", "isLockinPeriodAllowed",
-                "lockinPeriod", "lockinPeriodType"));
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-        String name = extractStringParameter("name", requestMap, modifiedParameters);
-        String externalId = extractStringParameter("externalId", requestMap, modifiedParameters);
-
-        String description = extractStringParameter("description", requestMap, modifiedParameters);
-        String currencyCode = extractStringParameter("currencyCode", requestMap, modifiedParameters);
-        Integer digitsAfterDecimalValue = extractIntegerParameter("digitsAfterDecimal", requestMap, modifiedParameters);
-        BigDecimal minimumBalance = extractBigDecimalParameter("minimumBalance", requestMap, modifiedParameters);
-        BigDecimal maximumBalance = extractBigDecimalParameter("maximumBalance", requestMap, modifiedParameters);
-
-        Integer tenureMonths = extractIntegerParameter("tenureInMonths", requestMap, modifiedParameters);
-        BigDecimal maturityDefaultInterestRate = extractBigDecimalParameter("maturityDefaultInterestRate", requestMap, modifiedParameters);
-        BigDecimal maturityMinInterestRate = extractBigDecimalParameter("maturityMinInterestRate", requestMap, modifiedParameters);
-        BigDecimal maturityMaxInterestRate = extractBigDecimalParameter("maturityMaxInterestRate", requestMap, modifiedParameters);
-
-        Integer interestCompoundedEvery = extractIntegerParameter("interestCompoundedEvery", requestMap, modifiedParameters);
-        Integer interestCompoundedEveryPeriodType = extractIntegerParameter("interestCompoundedEveryPeriodType", requestMap,
-                modifiedParameters);
-
-        boolean interestCompoundingAllowed = extractBooleanParameter("interestCompoundingAllowed", requestMap, modifiedParameters);
-
-        boolean canRenew = extractBooleanParameter("renewalAllowed", requestMap, modifiedParameters);
-        boolean canPreClose = extractBooleanParameter("preClosureAllowed", requestMap, modifiedParameters);
-        BigDecimal preClosureInterestRate = extractBigDecimalParameter("preClosureInterestRate", requestMap, modifiedParameters);
-
-        boolean isLockinPeriodAllowed = extractBooleanParameter("isLockinPeriodAllowed", requestMap, modifiedParameters);
-        Integer lockinPeriod = extractIntegerParameter("lockinPeriod", requestMap, modifiedParameters);
-        Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType", requestMap, modifiedParameters);
-
-        return new DepositProductCommand(modifiedParameters, resourceIdentifier, externalId, name, description, currencyCode,
-                digitsAfterDecimalValue, minimumBalance, maximumBalance, tenureMonths, maturityDefaultInterestRate,
-                maturityMinInterestRate, maturityMaxInterestRate, interestCompoundedEvery, interestCompoundedEveryPeriodType, canRenew,
-                canPreClose, preClosureInterestRate, interestCompoundingAllowed, isLockinPeriodAllowed, lockinPeriod, lockinPeriodType);
+        return new Paymentcommand(clientId, payment_id, externalId, statment_id, payment_code,
+         remarks, amount_paid, payment_date);
     }
-
+    
     @Override
-    public DepositStateTransitionCommand convertJsonToDepositStateTransitionCommand(Long resourceIdentifier, String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("eventDate", "locale", "dateFormat", "note"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        LocalDate eventDate = extractLocalDateParameter("eventDate", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-
-        return new DepositStateTransitionCommand(resourceIdentifier, eventDate, note);
+    public PaymodeCommand convertJsonToPaymodeCommand(final Long resourceIdentifier, final String json)
+    {
+    if (StringUtils.isBlank(json)) {
+    throw new InvalidJsonException();
     }
-
-    @Override
-    public DepositStateTransitionApprovalCommand convertJsonToDepositStateTransitionApprovalCommand(final Long resourceIdentifier,
-            final String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "commencementDate", "locale", "dateFormat",
-                "tenureInMonths", "deposit", "interestCompoundedEveryPeriodType", "productId", "interestCompoundedEvery", "note",
-                "maturityInterestRate"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        LocalDate commencementDate = extractLocalDateParameter("commencementDate", requestMap, modifiedParameters);
-        BigDecimal deposit = extractBigDecimalParameter("deposit", requestMap, modifiedParameters);
-        BigDecimal maturityInterestRate = extractBigDecimalParameter("maturityInterestRate", requestMap, modifiedParameters);
-        Integer tenureInMonths = extractIntegerParameter("tenureInMonths", requestMap, modifiedParameters);
-        Integer interestCompoundedEveryPeriodType = extractIntegerParameter("interestCompoundedEveryPeriodType", requestMap,
-                modifiedParameters);
-        Integer interestCompoundedEvery = extractIntegerParameter("interestCompoundedEvery", requestMap, modifiedParameters);
-        Long productId = extractLongParameter("productId", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-
-        return new DepositStateTransitionApprovalCommand(resourceIdentifier, productId, commencementDate, tenureInMonths, deposit,
-                interestCompoundedEveryPeriodType, interestCompoundedEvery, note, maturityInterestRate);
+   
+    Set<String> modifiedParameters = new HashSet<String>();
+    Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+    Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+    Set<String> supportedParams = new HashSet<String>(
+    Arrays.asList("id","paymode","description","category")
+    );
+    checkForUnsupportedParameters(requestMap, supportedParams);
+    Long id=extractLongParameter("id", requestMap, modifiedParameters);
+    String paymode = extractStringParameter("paymode", requestMap,modifiedParameters);
+       String description=extractStringParameter("description",requestMap,modifiedParameters);
+       String category = extractStringParameter("category", requestMap,modifiedParameters);
+    return new PaymodeCommand(id,paymode,description,category);
     }
-
+    
+    
     @Override
-    public DepositAccountWithdrawalCommand convertJsonToDepositWithdrawalCommand(final Long resourceIdentifier, final String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("note", "locale", "maturesOnDate", "dateFormat"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-        LocalDate maturesOnDate = extractLocalDateParameter("maturesOnDate", requestMap, modifiedParameters);
-
-        return new DepositAccountWithdrawalCommand(resourceIdentifier, note, maturesOnDate);
+    public PaytermsCommand convertJsonToPaytermsCommand(final Long resourceIdentifier, final String json)
+    {
+    if (StringUtils.isBlank(json)) {
+    throw new InvalidJsonException();
     }
-
-    @Override
-    public DepositAccountWithdrawInterestCommand convertJsonToDepositAccountWithdrawInterestCommand(final Long resourceIdentifier,
-            final String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("amount", "note", "locale"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        BigDecimal amount = extractBigDecimalParameter("amount", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-
-        return new DepositAccountWithdrawInterestCommand(resourceIdentifier, amount, note);
+   
+    Set<String> modifiedParameters = new HashSet<String>();
+    Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+    Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+    Set<String> supportedParams = new HashSet<String>(
+    Arrays.asList("id","payterm_period","payterm_type","units")
+    );
+    checkForUnsupportedParameters(requestMap, supportedParams);
+    Long id=extractLongParameter("id", requestMap, modifiedParameters);
+    String payterm_type = extractStringParameter("payterm_type", requestMap,modifiedParameters);
+    Long payterm_period=extractLongParameter("payterm_period",requestMap,modifiedParameters);
+    Long units=extractLongParameter("units",requestMap,modifiedParameters);
+    return new PaytermsCommand(id,payterm_period,payterm_type,units);
     }
-
+    
     @Override
-    public SavingAccountCommand convertJsonToSavingAccountCommand(Long resourceIdentifier, String json) {
-
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        // currencyCode, currencyDigits
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("clientId", "productId", "externalId", "currencyCode",
-                "digitsAfterDecimal", "savingsDepositAmountPerPeriod", "recurringInterestRate", "savingInterestRate", "tenure",
-                "commencementDate", "locale", "dateFormat", "isLockinPeriodAllowed", "lockinPeriod", "lockinPeriodType",
-                "tenureType", "depositfrequency", "interestType", "interestCalculationMethod", "minimumBalanceForWithdrawal",
-                "isPartialDepositAllowed", "depositEvery","interestPostEvery","interestPostFrequency"));
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        Long clientId = extractLongParameter("clientId", requestMap, modifiedParameters);
-        Long productId = extractLongParameter("productId", requestMap, modifiedParameters);
-        String externalId = extractStringParameter("externalId", requestMap, modifiedParameters);
-        String currencyCode = extractStringParameter("currencyCode", requestMap, modifiedParameters);
-        Integer digitsAfterDecimalValue = extractIntegerParameter("digitsAfterDecimal", requestMap, modifiedParameters);
-        BigDecimal savingsDepositAmount = extractBigDecimalParameter("savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
-        BigDecimal recurringInterestRate = extractBigDecimalParameter("recurringInterestRate", requestMap, modifiedParameters);
-        BigDecimal savingInterestRate = extractBigDecimalParameter("savingInterestRate", requestMap, modifiedParameters);
-        Integer tenure = extractIntegerParameter("tenure", requestMap, modifiedParameters);
-
-        boolean isLockinPeriodAllowed = extractBooleanParameter("isLockinPeriodAllowed", requestMap, modifiedParameters);
-        Integer lockinPeriod = extractIntegerParameter("lockinPeriod", requestMap, modifiedParameters);
-        Integer lockinPeriodType = extractIntegerParameter("lockinPeriodType", requestMap, modifiedParameters);
-
-        LocalDate commencementDate = extractLocalDateParameter("commencementDate", requestMap, modifiedParameters);
-        Integer tenureType = extractIntegerParameter("tenureType", requestMap, modifiedParameters);
-        Integer depositfrequency = extractIntegerParameter("depositfrequency", requestMap, modifiedParameters);
-        Integer interestType = extractIntegerParameter("interestType", requestMap, modifiedParameters);
-        Integer interestCalculationMethod = extractIntegerParameter("interestCalculationMethod", requestMap, modifiedParameters);
-        BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter("minimumBalanceForWithdrawal", requestMap, modifiedParameters);
-        boolean isPartialDepositAllowed = extractBooleanParameter("isPartialDepositAllowed", requestMap, modifiedParameters);
-        Integer depositEvery = extractIntegerParameter("depositEvery", requestMap, modifiedParameters);
-        
-        Integer interestPostEvery = extractIntegerParameter("interestPostEvery", requestMap, modifiedParameters);
-        Integer interestPostFrequency = extractIntegerParameter("interestPostFrequency", requestMap, modifiedParameters);
-
-        return new SavingAccountCommand(modifiedParameters, resourceIdentifier, clientId, productId, externalId, currencyCode,
-                digitsAfterDecimalValue, savingsDepositAmount, recurringInterestRate, savingInterestRate, tenure, commencementDate,
-                tenureType, depositfrequency, interestType, minimumBalanceForWithdrawal, interestCalculationMethod,
-                isLockinPeriodAllowed, isPartialDepositAllowed, lockinPeriod, lockinPeriodType, depositEvery, interestPostEvery, interestPostFrequency);
+    public PlansCommand convertJsonToPlansCommand(final Long resourceIdentifier, final String json)
+    {
+    if (StringUtils.isBlank(json)) {
+    throw new InvalidJsonException();
     }
-
+   
+    final Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
+        final Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+    Set<String> modifiedParameters = new HashSet<String>();
+    Set<String> supportedParams = new HashSet<String>(
+    Arrays.asList("plan_code","plan_description","locale","dateFormat","startDate","endDate","status","charge_code","roles","bill_rule","services")
+    );
+    checkForUnsupportedParameters(requestMap, supportedParams);
+    //Long plan_id=extractLongParameter("id", requestMap, modifiedParameters);
+    String plan_code = extractStringParameter("plan_code", requestMap,modifiedParameters);
+    String plan_description=extractStringParameter("plan_description", requestMap, modifiedParameters);
+    LocalDate start_date = extractLocalDateParameter("startDate", requestMap, modifiedParameters);
+LocalDate end_date = extractLocalDateParameter("endDate", requestMap, modifiedParameters);
+    Long status=extractLongParameter("status",requestMap,modifiedParameters);
+  boolean anyDayAllowed=extractBooleanParameter("anyDayAllowed",requestMap,modifiedParameters);
+  String contractPeriod=extractStringParameter("contractPeriod",requestMap,modifiedParameters);
+   Long bill_rule=extractLongParameter("bill_rule", requestMap, modifiedParameters);
+
+String charge_code=extractStringParameter("charge_code", requestMap, modifiedParameters);
+
+final JsonParser parser = new JsonParser();
+
+    String[] services = null;
+    JsonElement element = parser.parse(json);
+    if (element.isJsonObject()) {
+        JsonObject object = element.getAsJsonObject();
+        if (object.has("services")) {
+            modifiedParameters.add("services");
+            JsonArray array = object.get("services").getAsJsonArray();
+            services = new String[array.size()];
+            for (int i = 0; i < array.size(); i++) {
+             services[i] = array.get(i).getAsString();
+            }
+        }
+    }
+    
+    return new PlansCommand(modifiedParameters,plan_code,plan_description,start_date,end_date,status,services,bill_rule,charge_code,contractPeriod);
+    }
+    
     @Override
-    public GuarantorCommand convertJsonToGuarantorCommand(Long resourceIdentifier, Long loanId, String json) {
-        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
-        Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
-
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("externalGuarantor", "existingClientId", "firstname", "lastname",
-                "addressLine1", "addressLine2", "city", "state", "zip", "country", "mobileNumber", "housePhoneNumber", "comment", "dob",
-                "locale", "dateFormat"));
-
-        checkForUnsupportedParameters(requestMap, supportedParams);
-
-        Set<String> modifiedParameters = new HashSet<String>();
-
-        boolean externalGuarantor = extractBooleanParameter("externalGuarantor", requestMap, modifiedParameters);
-
-        Long existingClientId = extractLongParameter("existingClientId", requestMap, modifiedParameters);
-        String firstname = extractStringParameter("firstname", requestMap, modifiedParameters);
-        String lastname = extractStringParameter("lastname", requestMap, modifiedParameters);
-        String addressLine1 = extractStringParameter("addressLine1", requestMap, modifiedParameters);
-        String addressLine2 = extractStringParameter("addressLine2", requestMap, modifiedParameters);
-        String city = extractStringParameter("city", requestMap, modifiedParameters);
-        String state = extractStringParameter("state", requestMap, modifiedParameters);
-        String zip = extractStringParameter("zip", requestMap, modifiedParameters);
-        String country = extractStringParameter("country", requestMap, modifiedParameters);
-        String mobileNumber = extractStringParameter("mobileNumber", requestMap, modifiedParameters);
-        String housePhoneNumber = extractStringParameter("housePhoneNumber", requestMap, modifiedParameters);
-        String comment = extractStringParameter("comment", requestMap, modifiedParameters);
-        String dob = extractStringParameter("dob", requestMap, modifiedParameters);
-
-        // workaround for passing locale info to data table api
-        final String dateFormat = requestMap.get("dateFormat");
-        final String locale = requestMap.get("locale");
-
-        GuarantorCommand command = new GuarantorCommand(modifiedParameters, existingClientId, firstname, lastname, externalGuarantor,
-                addressLine1, addressLine2, city, state, zip, country, mobileNumber, housePhoneNumber, comment, dob);
-        command.setDateFormat(dateFormat);
-        command.setLocale(locale);
-        return command;
+    public PricingCommand convertJsonToPricingCommand(final Long resourceIdentifier, final String json)
+    {
+    if (StringUtils.isBlank(json)) {
+    throw new InvalidJsonException();
     }
 
+    Set<String> modifiedParameters = new HashSet<String>();
+    Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+    Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+    Set<String> supportedParams = new HashSet<String>(
+    Arrays.asList("id","plan_code","locale","service_code","charge_code","chargevariant","price","discount_id")
+    );
+    checkForUnsupportedParameters(requestMap, supportedParams);
+    Long sub_id=extractLongParameter("id", requestMap, modifiedParameters);
+    String plan_code = extractStringParameter("plan_code", requestMap,modifiedParameters);
+    String service_code=extractStringParameter("service_code",requestMap,modifiedParameters);
+    String charge_code=extractStringParameter("charge_code",requestMap,modifiedParameters);
+    String charging_variant=extractStringParameter("chargevariant",requestMap,modifiedParameters);
+    BigDecimal price=extractBigDecimalParameter("price",requestMap,modifiedParameters);
+    Long discount_id=extractLongParameter("discount_id", requestMap, modifiedParameters);
+    return new PricingCommand(modifiedParameters,plan_code,service_code,charge_code,charging_variant,price,discount_id);
+    }
+    
 	@Override
-	public SavingStateTransitionsCommand convertJsonToSavingStateTransitionCommand( Long accountId, String json) {
+public ServiceMasterCommand convertJsonToServiceMasterCommand(Long resourceIdentifier, String json){
+if (StringUtils.isBlank(json)) {
+throw new InvalidJsonException();
+}
+
+Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+Set<String> supportedParams = new HashSet<String>(Arrays.asList("serviceCode","serviceDescription","serviceType","categoryType"));
+
+checkForUnsupportedParameters(requestMap, supportedParams);
+
+Set<String> modifiedParameters = new HashSet<String>();
+
+String serviceCode = extractStringParameter("serviceCode", requestMap, modifiedParameters);
+String serviceDescription = extractStringParameter("serviceDescription", requestMap, modifiedParameters);
+Long serviceType = extractLongParameter("serviceType", requestMap, modifiedParameters);
+
+return new ServiceMasterCommand(serviceCode,serviceDescription,serviceType,modifiedParameters);
+}
+	
+	  @Override
+	    public ServicesCommand convertJsonToServiceCommand(Long resourceIdentifier, String json) {
+
+	        if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
+
+	        Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+	        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+	        Set<String> supportedParams = new HashSet<String>(Arrays.asList("serviceCode", "serviceDescription", "serviceType"));
+
+	        checkForUnsupportedParameters(requestMap, supportedParams);
+
+	        Set<String> modifiedParameters = new HashSet<String>();
+	       
+	        String serviceCode = extractStringParameter("serviceCode", requestMap, modifiedParameters);
+	        String serviceDescription = extractStringParameter("serviceDescription", requestMap, modifiedParameters);
+	        Long serviceType = extractLongParameter("serviceType", requestMap, modifiedParameters);
+
+	        return new ServicesCommand(serviceCode, serviceDescription, serviceType);
+	    }
+	  
+	  @Override
+	  public SubscriptionCommand convertJsonToSubscriptionCommand(final Long resourceIdentifier, final String json)
+	  {
+	  if (StringUtils.isBlank(json)) {
+	  throw new InvalidJsonException();
+	  }
+
+	  Set<String> modifiedParameters = new HashSet<String>();
+	  Type typeOfMap = new TypeToken<Map<String, String>>() {}.getType();
+	  Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+	  Set<String> supportedParams = new HashSet<String>(
+	  Arrays.asList("id","subscription_period","units","day_name","subscriptionTypeId")
+	  );
+	  checkForUnsupportedParameters(requestMap, supportedParams);
+	  Long sub_id=extractLongParameter("id", requestMap, modifiedParameters);
+	  //String subscription_type = extractStringParameter("subscription_type", requestMap,modifiedParameters);
+	   String subscription_period=extractStringParameter("subscription_period",requestMap,modifiedParameters);
+	  Long units=extractLongParameter("units",requestMap,modifiedParameters);
+	  Long subscriptionTypeId=extractLongParameter("subscriptionTypeId",requestMap,modifiedParameters);
+	  String day_name=extractStringParameter("day_name",requestMap,modifiedParameters);
+	  return new SubscriptionCommand(modifiedParameters,sub_id,resourceIdentifier,subscription_period,units,day_name,subscriptionTypeId);
+	  }
+		@Override
+		public TaxMappingRateCommand convertJsonToTaxMappingRateCommand(Long resourceIdentifier, String json){
+		if (StringUtils.isBlank(json)) {
+		throw new InvalidJsonException();
+		}
+
+		Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
+
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList("chargeCode","taxCode","startdate","type","value","locale", "dateFormat"));
+
+		checkForUnsupportedParameters(requestMap, supportedParams);
+
+		Set<String> modifiedParameters = new HashSet<String>();
+
+		String chargeCode = extractStringParameter("chargeCode", requestMap, modifiedParameters);
+		String taxCode = extractStringParameter("taxCode", requestMap, modifiedParameters);
+		LocalDate startdate = extractLocalDateParameter("startdate", requestMap, modifiedParameters);
+		String type = extractStringParameter("type", requestMap, modifiedParameters);
+		BigDecimal value = extractBigDecimalParameter("value", requestMap, modifiedParameters);
+
+		return new TaxMappingRateCommand(chargeCode,taxCode,startdate,type,value);
+
+		}
 		
-       if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-
-        Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
+		@Override
+		public TaxMasterCommand convertJsonToTaxMasterCommand(Long resourceIdentifier, String json){
+		if (StringUtils.isBlank(json)) {
+		throw new InvalidJsonException();
+		}
 
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("eventDate", "locale", "dateFormat", "note"));
+		Type typeOfMap = new TypeToken<Map<String, String>>(){}.getType();
+		Map<String, String> requestMap = gsonConverter.fromJson(json, typeOfMap);
 
-        checkForUnsupportedParameters(requestMap, supportedParams);
+		Set<String> supportedParams = new HashSet<String>(Arrays.asList("taxCode","taxType","taxDescription","locale"));
 
-        Set<String> modifiedParameters = new HashSet<String>();
+		checkForUnsupportedParameters(requestMap, supportedParams);
 
-        LocalDate eventDate = extractLocalDateParameter("eventDate", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
+		Set<String> modifiedParameters = new HashSet<String>();
 
-        return new SavingStateTransitionsCommand(accountId, eventDate, note);
-		
-	}
-
-	@Override
-	public SavingAccountApprovalCommand convertJsonToSavingApprovalCommand( Long accountId, String json) {
-		
-		if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-		
-		Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
-        
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "dateFormat", "commencementDate", "savingsDepositAmountPerPeriod",
-        		"minimumBalanceForWithdrawal", "recurringInterestRate", "savingInterestRate", "interestType", "tenure", "tenureType", "frequency", "payEvery", "note",
-        		"interestPostEvery", "interestPostFrequency"));
-        
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-        
-        LocalDate commencementDate = extractLocalDateParameter("commencementDate", requestMap, modifiedParameters);
-        BigDecimal savingsDepositAmountPerPeriod = extractBigDecimalParameter("savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
-        BigDecimal minimumBalanceForWithdrawal = extractBigDecimalParameter("minimumBalanceForWithdrawal", requestMap, modifiedParameters);
-        BigDecimal recurringInterestRate = extractBigDecimalParameter("recurringInterestRate", requestMap, modifiedParameters);
-        BigDecimal savingInterestRate = extractBigDecimalParameter("savingInterestRate", requestMap, modifiedParameters);
-        Integer interestType = extractIntegerParameter("interestType", requestMap, modifiedParameters);
-        Integer tenure = extractIntegerParameter("tenure", requestMap, modifiedParameters);
-        Integer tenureType = extractIntegerParameter("tenureType", requestMap, modifiedParameters);
-        Integer frequency = extractIntegerParameter("frequency", requestMap, modifiedParameters);
-        Integer payEvery = extractIntegerParameter("payEvery", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-        Integer interestPostEvery = extractIntegerParameter("interestPostEvery", requestMap, modifiedParameters);
-        Integer interestPostFrequency = extractIntegerParameter("interestPostFrequency", requestMap, modifiedParameters);
-		return new SavingAccountApprovalCommand(accountId, commencementDate, savingsDepositAmountPerPeriod, minimumBalanceForWithdrawal, recurringInterestRate,
-				savingInterestRate, interestType, tenure, tenureType, frequency, payEvery, note, interestPostEvery, interestPostFrequency);
-	}
+		String taxCode = extractStringParameter("taxCode", requestMap, modifiedParameters);
+		String taxType = extractStringParameter("taxType", requestMap, modifiedParameters);
+		String taxDescription = extractStringParameter("taxDescription", requestMap, modifiedParameters);
+		return new TaxMasterCommand(taxCode,taxType,taxDescription);
+		}
 
-	@Override
-	public SavingAccountDepositCommand convertJsonToSavingAccountDepositCommand(Long accountId, String json) {
-		if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-		
-		Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
-        
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "dateFormat", "depositDate", "savingsDepositAmountPerPeriod", "note"));
-        
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-        
-        LocalDate depositDate = extractLocalDateParameter("depositDate", requestMap, modifiedParameters);
-        BigDecimal savingsDepositAmountPerPeriod = extractBigDecimalParameter("savingsDepositAmountPerPeriod", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-		return new SavingAccountDepositCommand(accountId, savingsDepositAmountPerPeriod, depositDate, note);
-	}
 
-	@Override
-	public SavingAccountWithdrawalCommand convertJsonToSavingAccountWithdrawalCommand(Long accountId, String json) {
-		if (StringUtils.isBlank(json)) { throw new InvalidJsonException(); }
-		
-		Type typeOfMap = new TypeToken<Map<String, Object>>() {}.getType();
-        Map<String, Object> requestMap = gsonConverter.fromJson(json, typeOfMap);
-        
-        Set<String> supportedParams = new HashSet<String>(Arrays.asList("locale", "dateFormat", "transactionDate", "amount", "note"));
-        
-        checkForUnsupportedParameters(requestMap, supportedParams);
-        Set<String> modifiedParameters = new HashSet<String>();
-        
-        LocalDate transactionDate = extractLocalDateParameter("transactionDate", requestMap, modifiedParameters);
-        BigDecimal amount = extractBigDecimalParameter("amount", requestMap, modifiedParameters);
-        String note = extractStringParameter("note", requestMap, modifiedParameters);
-		return new SavingAccountWithdrawalCommand(accountId, transactionDate, amount, note);
-	}
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiJsonSerializerService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiJsonSerializerService.java
index d82b47c..18e4f4f 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiJsonSerializerService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/savingsaccount/PortfolioApiJsonSerializerService.java
@@ -1,14 +1,19 @@
 package org.mifosplatform.portfolio.savingsaccount;
 
 import java.util.Collection;
+import java.util.List;
 import java.util.Set;
 
+import org.mifosplatform.portfolio.billingcycle.data.BillingCycleData;
 import org.mifosplatform.portfolio.loanaccount.gaurantor.data.GuarantorData;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
 import org.mifosplatform.portfolio.savingsaccount.data.SavingAccountData;
 import org.mifosplatform.portfolio.savingsaccount.data.SavingScheduleData;
 import org.mifosplatform.portfolio.savingsaccountproduct.data.SavingProductData;
 import org.mifosplatform.portfolio.savingsdepositaccount.data.DepositAccountData;
 import org.mifosplatform.portfolio.savingsdepositproduct.data.DepositProductData;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
 
 public interface PortfolioApiJsonSerializerService {
 
@@ -32,4 +37,18 @@ public interface PortfolioApiJsonSerializerService {
 
     String serializeSavingScheduleDataToJson(boolean prettyPrint, Set<String> responseParameters, SavingScheduleData savingScheduleData);
 
+	String serializeBillingCycleToJson(boolean prettyPrint,	Set<String> responseParameters, BillingCycleData products);
+
+
+
+	String serializePlanDataToJson(boolean prettyPrint,Set<String> responseParameters,List<PlanData> products);
+
+	String serializePlanDataToJson(boolean prettyPrint,Set<String> responseParameters, PlanData account);
+
+	String serializeServiceMasterDataToJson(boolean prettyPrint,
+			Set<String> responseParameters,
+			Collection<SericeMasterOptionsData> serviceMasterData);
+
+	String serializeServiceToJson(boolean prettyPrint,	Set<String> responseParameters, ServiceData products);
+
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/api/ServiceMasterApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/api/ServiceMasterApiResource.java
new file mode 100644
index 0000000..adf8190
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/api/ServiceMasterApiResource.java
@@ -0,0 +1,161 @@
+package org.mifosplatform.portfolio.servicemaster.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+import org.mifosplatform.portfolio.servicemaster.service.ServiceMasterReadPlatformService;
+import org.mifosplatform.portfolio.servicemaster.service.ServiceMasterWritePlatformService;
+import org.mifosplatform.portfolio.services.data.ServiceMasterData;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/servicemasters")
+@Component
+@Scope("singleton")
+public class ServiceMasterApiResource {
+
+	@Autowired
+	private ServiceMasterWritePlatformService serviceMasterWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@Autowired
+	private ServiceMasterReadPlatformService serviceMasterReadPlatformService;
+	
+	@Autowired
+	private PlatformSecurityContext context;
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createDiscountMaster(final String jsonRequestBody) {
+
+		final ServiceMasterCommand command = this.apiDataConversionService.convertJsonToServiceMasterCommand(null, jsonRequestBody);
+		CommandProcessingResult id=serviceMasterWritePlatformService.createServiceMaster(command);
+		 return Response.ok().entity(id).build();
+	}
+
+    @GET
+    @Path("template")
+    @Consumes({MediaType.APPLICATION_JSON})
+    @Produces({MediaType.APPLICATION_JSON})
+    public String retrieveTempleteInfo(@Context final UriInfo uriInfo) {
+	Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList(""));
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+	final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+       // final Collection<ServiceMasterData> datas = this.serviceMasterReadPlatformService.retrieveAllServiceMasterData();
+        //SericeMasterOptionsData sericeMasterOptionsData=new SericeMasterOptionsData(datas);
+        Collection<SericeMasterOptionsData> optionsData=new ArrayList<SericeMasterOptionsData>();
+        //optionsData.add(sericeMasterOptionsData);
+		return this.apiJsonSerializerService.serializeServiceMasterDataToJson(prettyPrint, responseParameters, optionsData);
+    }
+    
+    @GET
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String retrieveAllService(@Context final UriInfo uriInfo) {
+
+		
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","serviceCode","serviceDescription" ));
+
+		Set<String> responseParameters = ApiParameterHelper
+				.extractFieldsForResponseIfProvided(uriInfo
+						.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo
+				.getQueryParameters());
+
+		List<SericeMasterOptionsData> services = this.serviceMasterReadPlatformService
+				.retrieveServices();
+		return this.apiJsonSerializerService.serializeServiceMasterDataToJson(
+				prettyPrint, responseParameters, services);
+	}
+    
+	@GET
+	@Path("{serviceId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveDepositProductDetails(@PathParam("serviceId") final Long serviceId, @Context final UriInfo uriInfo) {
+
+	
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","serviceCode","serviceDescription","serviceType" ));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		SericeMasterOptionsData productData = this.serviceMasterReadPlatformService.retrieveIndividualService(serviceId);
+
+		boolean template = ApiParameterHelper.template(uriInfo.getQueryParameters());
+		if (template) {
+			
+		
+		}
+
+		return this.apiJsonSerializerService.serializeServiceDataToJson(prettyPrint, responseParameters, productData);
+	}
+	
+	@PUT
+	@Path("{serviceId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response updateSubscription(@PathParam("serviceId") final Long serviceId, final String jsonRequestBody){
+
+		final ServiceMasterCommand command = this.apiDataConversionService.convertJsonToServiceMasterCommand(null, jsonRequestBody);
+		CommandProcessingResult entityIdentifier=this.serviceMasterWritePlatformService.updateService(command,serviceId);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+	
+	@DELETE
+	@Path("{serviceId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response deleteSubscription(@PathParam("serviceId") final Long serviceId) {
+
+		this.serviceMasterWritePlatformService.deleteSubscription(serviceId);
+
+		return Response.ok(serviceId).build();
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServiceMasterCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServiceMasterCommand.java
new file mode 100644
index 0000000..f40fe60
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServiceMasterCommand.java
@@ -0,0 +1,55 @@
+package org.mifosplatform.portfolio.servicemaster.commands;
+
+import java.util.Set;
+
+import javax.persistence.Column;
+
+public class ServiceMasterCommand {
+
+	
+	private Long id;
+	private String serviceCode;
+	private String serviceDescription;
+	private Long serviceType;
+	private final Set<String> modifiedParameters;
+	public ServiceMasterCommand(String serviceCode,String serviceDescription,Long serviceType,Set<String> modifiedParameters)
+	{
+
+		this.serviceCode=serviceCode;
+		this.serviceDescription=serviceDescription;
+		this.serviceType=serviceType;
+		this.modifiedParameters=modifiedParameters;
+	}
+	public String getServiceCode() {
+		return serviceCode;
+	}
+	public String getServiceDescription() {
+		return serviceDescription;
+	}
+	public Long getServiceType() {
+		return serviceType;
+	}
+	public Set<String> getModifiedParameters() {
+		return modifiedParameters;
+	}
+	public Long getId() {
+		return id;
+	}
+	public void setId(Long id) {
+		this.id = id;
+	}
+	public boolean isServiceCodeChanged() {
+		return this.modifiedParameters.contains("serviceCode");
+	}
+
+	public boolean isServiceDescriptionChanged() {
+		return this.modifiedParameters.contains("serviceDescription");
+	}
+
+	public boolean isServiceTypeChanged() {
+		return this.modifiedParameters.contains("serviceType");
+	}
+	
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServicesCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServicesCommand.java
new file mode 100644
index 0000000..95338c4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/commands/ServicesCommand.java
@@ -0,0 +1,39 @@
+package org.mifosplatform.portfolio.servicemaster.commands;
+
+public class ServicesCommand {
+
+	private final String serviceCode;
+	private final String serrviceDescription;
+	private final Long serviceType;
+
+
+
+	public ServicesCommand(final String serviceCode,final String serviceDescription,
+		final	Long serviceType) {
+
+		this.serrviceDescription=serviceDescription;
+		this.serviceCode=serviceCode;
+		this.serviceType=serviceType;
+	}
+
+
+
+	public String getServiceCode() {
+		return serviceCode;
+	}
+
+
+
+	public String getSerrviceDescription() {
+		return serrviceDescription;
+	}
+
+
+
+	public Long getServiceType() {
+		return serviceType;
+	}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/data/SericeMasterOptionsData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/data/SericeMasterOptionsData.java
new file mode 100644
index 0000000..ab2a524
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/data/SericeMasterOptionsData.java
@@ -0,0 +1,50 @@
+package org.mifosplatform.portfolio.servicemaster.data;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.services.data.ServiceMasterData;
+
+public class SericeMasterOptionsData {
+private Collection<ServiceMasterData> serviceMasterOptions;
+private Long id;
+private String serviceCode;
+private String serviceDescription;
+private String serviceType;
+
+public SericeMasterOptionsData(Collection<ServiceMasterData> serviceMasterOptions)
+{
+	this.serviceMasterOptions=serviceMasterOptions;
+}
+
+public SericeMasterOptionsData(Long id, String serviceCode,
+		String serviceDescription,String serviceType) {
+	this.id=id;
+	this.serviceDescription=serviceDescription;
+	this.serviceCode=serviceCode;
+	this.serviceType=serviceType;
+
+}
+
+public Collection<ServiceMasterData> getServiceMasterOptions() {
+	return serviceMasterOptions;
+}
+
+public Long getId() {
+	return id;
+}
+
+public String getServiceCode() {
+	return serviceCode;
+}
+
+public String getserviceDescription() {
+	return serviceDescription;
+}
+
+public String getServiceType() {
+	return serviceType;
+}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMaster.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMaster.java
new file mode 100644
index 0000000..b4a03f1
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMaster.java
@@ -0,0 +1,89 @@
+package org.mifosplatform.portfolio.servicemaster.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "service")
+public class ServiceMaster extends AbstractPersistable<Long> {
+
+	@Column(name = "service_code", nullable = false, length = 20)
+	private String serviceCode;
+
+	@Column(name = "service_description", nullable = false, length = 100)
+	private String serviceDescription;
+
+	@Column(name = "type", nullable = false, length = 100)
+	private Long serviceType;
+	
+	@Column(name = "is_deleted")
+	private String isDeleted="n";
+
+	
+public ServiceMaster()
+{}
+	
+	
+	public ServiceMaster(String serviceCode, String serviceDescription,
+			Long serviceType) {
+		this.serviceCode = serviceCode;
+		this.serviceDescription = serviceDescription;
+		this.serviceType = serviceType;
+	}
+
+	public static ServiceMaster create(String serviceCode,
+			String serviceDescription, Long serviceType) {
+		return new ServiceMaster(serviceCode, serviceDescription, serviceType);
+					}
+
+	public String getServiceCode() {
+		return serviceCode;
+	}
+
+	public String getServiceDescription() {
+		return serviceDescription;
+	}
+
+	public Long getServiceType() {
+		return serviceType;
+	}
+
+	
+	public String getIsDeleted() {
+		return isDeleted;
+	}
+
+
+	public void update(ServiceMasterCommand command) {
+		if(command.isServiceCodeChanged())
+		{
+			this.serviceCode=command.getServiceCode();
+		}
+		if(command.isServiceDescriptionChanged())
+		{
+			this.serviceDescription=command.getServiceDescription();
+		}
+		if(command.isServiceTypeChanged())
+		{
+			this.serviceType=command.getServiceType();
+		}
+		
+		
+	}
+
+	public void delete() {
+		if(isDeleted.equalsIgnoreCase("y"))
+		{}
+		else
+		{
+			isDeleted="y";
+		}
+	}
+
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterCommandValidator.java
new file mode 100644
index 0000000..b41a195
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterCommandValidator.java
@@ -0,0 +1,36 @@
+package org.mifosplatform.portfolio.servicemaster.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+
+public class ServiceMasterCommandValidator {
+	
+		private final ServiceMasterCommand command;
+
+		public ServiceMasterCommandValidator(final ServiceMasterCommand
+				command) {
+			this.command=command;
+		}
+
+
+		public void validateForCreate() {
+	         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+			DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("subscription");
+			baseDataValidator.reset().parameter("serviceCode").value(command.getServiceCode()).notBlank().notNull();
+			//baseDataValidator.reset().parameter("subscription_type").value(command.getSubscription_type()).notBlank().notNull();
+			baseDataValidator.reset().parameter("serviceDescription").value(command.getServiceDescription()).notBlank().notNull();
+			baseDataValidator.reset().parameter("serviceType").value(command.getServiceType()).notBlank().notNull();
+
+			if (!dataValidationErrors.isEmpty()) {
+				throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+			}
+		}
+	}
+
+
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterRepository.java
new file mode 100644
index 0000000..6d3cff0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/domain/ServiceMasterRepository.java
@@ -0,0 +1,6 @@
+package org.mifosplatform.portfolio.servicemaster.domain;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+public interface ServiceMasterRepository extends JpaRepository<ServiceMaster, Long>, JpaSpecificationExecutor<ServiceMaster>{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/exceptions/ServiceCodeExist.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/exceptions/ServiceCodeExist.java
new file mode 100644
index 0000000..5be01fd
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/exceptions/ServiceCodeExist.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.servicemaster.exceptions;
+import org.mifosplatform.infrastructure.core.exception.AbstractPlatformDomainRuleException;
+
+public class ServiceCodeExist extends AbstractPlatformDomainRuleException {
+
+		public ServiceCodeExist(final String serviceCode) {
+			super("service.is.already.exists.with.service.code", "service is already existed with charge code:"+serviceCode, serviceCode);
+		}
+
+	}
+
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformService.java
new file mode 100644
index 0000000..a3ead32
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformService.java
@@ -0,0 +1,17 @@
+package org.mifosplatform.portfolio.servicemaster.service;
+
+import java.util.Collection;
+import java.util.List;
+
+import org.mifosplatform.portfolio.plan.data.PlanData;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+import org.mifosplatform.portfolio.services.data.ServiceMasterData;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+public interface ServiceMasterReadPlatformService {
+	 Collection<ServiceMasterData> retrieveAllServiceMasterData() ;
+
+	List<SericeMasterOptionsData> retrieveServices();
+
+	SericeMasterOptionsData retrieveIndividualService(Long serviceId);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformServiceImpl.java
new file mode 100644
index 0000000..e517357
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterReadPlatformServiceImpl.java
@@ -0,0 +1,118 @@
+package org.mifosplatform.portfolio.servicemaster.service;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Collection;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+import org.mifosplatform.portfolio.services.data.ServiceMasterData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class ServiceMasterReadPlatformServiceImpl implements  ServiceMasterReadPlatformService{
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  ServiceMasterReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+	@Override
+	public Collection<ServiceMasterData> retrieveAllServiceMasterData() {
+		this.context.authenticatedUser();
+
+		ServiceMasterMapper mapper = new ServiceMasterMapper();
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+	protected static final class ServiceMasterMapper implements RowMapper<ServiceMasterData> {
+
+		@Override
+		public ServiceMasterData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			String discounType = rs.getString("serviceType");
+			String discountValue=rs.getString("categoryType");
+
+
+			return new ServiceMasterData(discounType,discountValue);
+
+		}
+
+
+		public String schema() {
+			return "d.servicetype as servicetype , d.categorytype as categorytype from m_servicemaster_type d";
+		}
+	}
+
+	@Override
+	public List<SericeMasterOptionsData> retrieveServices() {
+		this.context.authenticatedUser();
+
+		ServiceMapper mapper = new ServiceMapper();
+		String sql = "select " + mapper.schema()+" where d.is_deleted='n' ";
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+	protected static final class ServiceMapper implements RowMapper<SericeMasterOptionsData> {
+
+		@Override
+		public SericeMasterOptionsData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id=rs.getLong("id");
+			String serviceCode = rs.getString("serviceCode");
+			String serviceDescription=rs.getString("serviceDescription");
+
+
+			return new SericeMasterOptionsData(id,serviceCode,serviceDescription,null);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id,d.service_code as serviceCode , d.service_description as serviceDescription,d.type as serviceType from service d";
+		}
+
+}
+
+	@Override
+	public SericeMasterOptionsData retrieveIndividualService(Long serviceId) {
+		ServicesMapper mapper = new ServicesMapper();
+		String sql = "select " + mapper.schema()+" where d.id="+serviceId;
+
+		return this.jdbcTemplate.queryForObject(sql, mapper, new Object[] {});
+
+	}
+
+	protected static final class ServicesMapper implements RowMapper<SericeMasterOptionsData> {
+
+		@Override
+		public SericeMasterOptionsData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id=rs.getLong("id");
+			String serviceCode = rs.getString("serviceCode");
+			String serviceDescription=rs.getString("serviceDescription");
+			String serviceType=rs.getString("serviceType");
+
+
+			return new SericeMasterOptionsData(id,serviceCode,serviceDescription,serviceType);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id,d.service_code as serviceCode , d.service_description as serviceDescription,d.type as serviceType from service d";
+		}
+}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformService.java
new file mode 100644
index 0000000..b1de3ea
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformService.java
@@ -0,0 +1,13 @@
+package org.mifosplatform.portfolio.servicemaster.service;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.data.SericeMasterOptionsData;
+
+public interface ServiceMasterWritePlatformService {
+	public CommandProcessingResult createServiceMaster(final ServiceMasterCommand command);
+
+	public CommandProcessingResult updateService(ServiceMasterCommand command, Long serviceId);
+
+	public void deleteSubscription(Long serviceId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformServicejpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformServicejpaRepositoryImpl.java
new file mode 100644
index 0000000..d207ba4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/servicemaster/service/ServiceMasterWritePlatformServicejpaRepositoryImpl.java
@@ -0,0 +1,87 @@
+package org.mifosplatform.portfolio.servicemaster.service;
+
+import java.util.List;
+
+import org.hibernate.service.spi.ServiceException;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.pricing.exceptions.ChargeCOdeExists;
+import org.mifosplatform.portfolio.servicemaster.commands.ServiceMasterCommand;
+import org.mifosplatform.portfolio.servicemaster.domain.ServiceMaster;
+import org.mifosplatform.portfolio.servicemaster.domain.ServiceMasterCommandValidator;
+import org.mifosplatform.portfolio.servicemaster.domain.ServiceMasterRepository;
+import org.mifosplatform.portfolio.servicemaster.exceptions.ServiceCodeExist;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class ServiceMasterWritePlatformServicejpaRepositoryImpl  implements ServiceMasterWritePlatformService{
+
+	private final PlatformSecurityContext context;
+	private final ServiceMasterRepository serviceMasterRepository;
+
+@Autowired
+ public ServiceMasterWritePlatformServicejpaRepositoryImpl(final PlatformSecurityContext context,final ServiceMasterRepository serviceMasterRepository)
+{
+	this.context=context;
+	this.serviceMasterRepository=serviceMasterRepository;
+}
+    @Transactional
+	@Override
+	public CommandProcessingResult createServiceMaster(ServiceMasterCommand command) {
+		// TODO Auto-generated method stub
+		try {
+			context.authenticatedUser();
+			
+			this.context.authenticatedUser();
+			ServiceMasterCommandValidator validator=new ServiceMasterCommandValidator(command);
+			validator.validateForCreate();
+
+			List<ServiceMaster> availService=this.serviceMasterRepository.findAll();
+			for(ServiceMaster master:availService)
+			{
+				if(master.getServiceCode().equalsIgnoreCase(command.getServiceCode()) && master.getIsDeleted().equalsIgnoreCase("n"));
+				{
+					throw new ServiceCodeExist(command.getServiceCode());
+				}
+			}
+
+			ServiceMaster serviceMaster = ServiceMaster.create(command.getServiceCode(),command.getServiceDescription(),command.getServiceType());
+
+			this.serviceMasterRepository.save(serviceMaster);
+
+			return new CommandProcessingResult(serviceMaster.getId());
+
+		} catch (DataIntegrityViolationException dve) {
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+	}
+	@Override
+	public CommandProcessingResult updateService(ServiceMasterCommand command,Long id) {
+		try
+		{
+		ServiceMaster master=this.serviceMasterRepository.findOne(id);
+		
+		master.update(command);
+		this.serviceMasterRepository.save(master);
+		
+		
+		return new CommandProcessingResult(master.getId());
+	} catch (DataIntegrityViolationException dve) {
+		return new CommandProcessingResult(Long.valueOf(-1));
+	}
+	}
+	@Override
+	public void deleteSubscription(Long serviceId) {
+		ServiceMaster master=this.serviceMasterRepository.findOne(serviceId);
+		master.delete();
+		this.serviceMasterRepository.save(master);
+		
+	}
+	
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServiceWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServiceWritePlatformServiceImpl.java
new file mode 100644
index 0000000..61fc3fe
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServiceWritePlatformServiceImpl.java
@@ -0,0 +1,54 @@
+package org.mifosplatform.portfolio.services.api;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceRepository;
+import org.mifosplatform.portfolio.savingplan.domain.ServiceType;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.services.service.ServiceWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+@Service
+public class ServiceWritePlatformServiceImpl implements ServiceWritePlatformService {
+
+
+	private PlatformSecurityContext context;
+	private ServiceRepository serviceRepository;
+
+	@Autowired
+	public ServiceWritePlatformServiceImpl(final PlatformSecurityContext context,
+			final ServiceRepository serviceRepository) {
+		this.context = context;
+		this.serviceRepository=serviceRepository;
+
+	}
+
+
+ @Transactional
+	@Override
+	public CommandProcessingResult createService(ServicesCommand command) {
+		try
+		{
+			this.context.authenticatedUser();
+			ServiceType data=new ServiceType(command.getServiceCode(),command.getSerrviceDescription(),command.getServiceType());
+			this.serviceRepository.save(data);
+
+			return new CommandProcessingResult(data.getId());
+
+		} catch (DataIntegrityViolationException dve) {
+			handleDataIntegrityIssues(command, dve);
+			return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+	}
+
+
+private void handleDataIntegrityIssues(ServicesCommand command,
+		DataIntegrityViolationException dve) {
+	// TODO Auto-generated method stub
+
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServicesApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServicesApiResource.java
new file mode 100644
index 0000000..c697923
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/api/ServicesApiResource.java
@@ -0,0 +1,94 @@
+package org.mifosplatform.portfolio.services.api;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.payment.service.PaymentWritePlatformService;
+import org.mifosplatform.portfolio.plan.data.ServiceData;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+import org.mifosplatform.portfolio.services.service.ServiceReadPlatformService;
+import org.mifosplatform.portfolio.services.service.ServiceWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+
+@Path("/services")
+@Component
+@Scope("singleton")
+public class ServicesApiResource {
+
+
+	@Autowired
+	private PaymentWritePlatformService paymentWritePlatformService;
+
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+
+    @Autowired
+    private ServiceWritePlatformService serviceWritePlatformService;
+
+    @Autowired
+    private ServiceReadPlatformService serviceReadPlatformService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	private final String entityType = "PAYMENTS";
+	@Autowired
+	private PlatformSecurityContext context;
+	private static final Set<String> typicalResponseParameters = new HashSet<String>(
+			Arrays.asList("id","serviceCode","serviceDescription","serviceType"));
+
+	@POST
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createDepositAccount(final String jsonRequestBody){
+
+		ServicesCommand command = this.apiDataConversionService.convertJsonToServiceCommand(null, jsonRequestBody);
+
+CommandProcessingResult entityIdentifier = this.serviceWritePlatformService.createService(command);
+
+		return Response.ok().entity(entityIdentifier).build();
+	}
+	@GET
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveAllSubscription(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","serviceCode","serviceDescription","serviceType"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		  List<EnumOptionData> datas=this.serviceReadPlatformService.retrieveServiceType();
+		  ServiceData data=new ServiceData(datas);
+		return this.apiJsonSerializerService.serializeServiceToJson(prettyPrint, responseParameters, data);
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/SavingServiceEnumaration.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/SavingServiceEnumaration.java
new file mode 100644
index 0000000..d240f54
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/SavingServiceEnumaration.java
@@ -0,0 +1,27 @@
+package org.mifosplatform.portfolio.services.data;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.services.service.ServiceTypeEnum;
+
+public class SavingServiceEnumaration {
+
+	public static EnumOptionData interestCompoundingPeriodType(final int id) {
+		return interestCompoundingPeriodType(ServiceTypeEnum.fromInt(id));
+	}
+
+	public static EnumOptionData interestCompoundingPeriodType(final ServiceTypeEnum type) {
+		final String codePrefix = "deposit.interest.compounding.period.";
+		EnumOptionData optionData = null;
+		switch (type) {
+		case GENERAL:
+			optionData = new EnumOptionData(ServiceTypeEnum.GENERAL.getValue().longValue(), codePrefix + ServiceTypeEnum.GENERAL.getCode(), "GENERAL");
+			break;
+
+		default:
+			optionData = new EnumOptionData(ServiceTypeEnum.INVALID.getValue().longValue(), ServiceTypeEnum.INVALID.getCode(), "Invalid");
+			break;
+		}
+		return optionData;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServiceMasterData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServiceMasterData.java
new file mode 100644
index 0000000..e2c2a4e
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServiceMasterData.java
@@ -0,0 +1,30 @@
+package org.mifosplatform.portfolio.services.data;
+
+public class ServiceMasterData {
+
+private String serviceType;
+private String categoryType;
+
+public ServiceMasterData(String serviceType,String categoryType)
+{
+	this.serviceType=serviceType;
+	this.categoryType=categoryType;
+}
+
+public String getServiceType() {
+	return serviceType;
+}
+
+public void setServiceType(String serviceType) {
+	this.serviceType = serviceType;
+}
+
+public String getCategoryType() {
+	return categoryType;
+}
+
+public void setCategoryType(String categoryType) {
+	this.categoryType = categoryType;
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServicesData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServicesData.java
new file mode 100644
index 0000000..12fcb1c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/data/ServicesData.java
@@ -0,0 +1,31 @@
+package org.mifosplatform.portfolio.services.data;
+
+public class ServicesData {
+
+	private final Long id;
+	private final String planCode;
+	private final String service_code;
+	private final String service_description;
+	public ServicesData(final Long id,final String planCode,final String service_code,final String service_desc)
+		{
+		this.id=id;
+		this.planCode=planCode;
+		this.service_code=service_code;
+		this.service_description=service_desc;
+
+	}
+	public Long getId() {
+		return id;
+	}
+	public String getPlanCode() {
+		return planCode;
+	}
+	public String getService_code() {
+		return service_code;
+	}
+	public String getService_description() {
+		return service_description;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformService.java
new file mode 100644
index 0000000..b9ddea8
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformService.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.services.service;
+
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public interface ServiceReadPlatformService {
+
+	 List<EnumOptionData> retrieveServiceType();
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformServiceImpl.java
new file mode 100644
index 0000000..9555be4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceReadPlatformServiceImpl.java
@@ -0,0 +1,29 @@
+package org.mifosplatform.portfolio.services.service;
+
+import java.util.Arrays;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.portfolio.services.data.SavingServiceEnumaration;
+import org.mifosplatform.portfolio.services.service.ServiceReadPlatformService;
+import org.mifosplatform.portfolio.services.service.ServiceTypeEnum;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class ServiceReadPlatformServiceImpl  implements ServiceReadPlatformService {
+
+
+	   @SuppressWarnings("null")
+	   @Transactional
+		@Override
+		public List<EnumOptionData> retrieveServiceType() {
+			EnumOptionData general = SavingServiceEnumaration.interestCompoundingPeriodType(ServiceTypeEnum.GENERAL);
+			List<EnumOptionData> serviceType = Arrays.asList(general);
+			return serviceType;
+		}
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceTypeEnum.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceTypeEnum.java
new file mode 100644
index 0000000..3dea4c3
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceTypeEnum.java
@@ -0,0 +1,42 @@
+package org.mifosplatform.portfolio.services.service;
+
+
+public enum ServiceTypeEnum {
+
+	GENERAL(0, "ServiceTypeEnum.general"), //
+	  INVALID(1, "ServiceTypeEnum.invalid");
+
+
+    private final Integer value;
+	private final String code;
+
+    private ServiceTypeEnum(final Integer value, final String code) {
+        this.value = value;
+		this.code = code;
+    }
+
+    public Integer getValue() {
+        return this.value;
+    }
+
+	public String getCode() {
+		return code;
+	}
+
+	public static ServiceTypeEnum fromInt(final Integer frequency) {
+
+		ServiceTypeEnum repaymentFrequencyType = ServiceTypeEnum.INVALID;
+		switch (frequency) {
+		case 0:
+			repaymentFrequencyType = ServiceTypeEnum.GENERAL;
+			break;
+
+
+		default:
+			repaymentFrequencyType = ServiceTypeEnum.INVALID;
+			break;
+		}
+		return repaymentFrequencyType;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceWritePlatformService.java
new file mode 100644
index 0000000..36cdd12
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/services/service/ServiceWritePlatformService.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolio.services.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.servicemaster.commands.ServicesCommand;
+
+public interface ServiceWritePlatformService {
+
+
+	CommandProcessingResult createService(final ServicesCommand command);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/api/SubscriptionApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/api/SubscriptionApiResource.java
new file mode 100644
index 0000000..41400cf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/api/SubscriptionApiResource.java
@@ -0,0 +1,172 @@
+package org.mifosplatform.portfolio.subscription.api;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.DELETE;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.PUT;
+import javax.ws.rs.Path;
+import javax.ws.rs.PathParam;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+import org.mifosplatform.infrastructure.configuration.service.PeriodReadPlatformService;
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.savingsaccount.PortfolioApiDataConversionService;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionReadPlatformService;
+import org.mifosplatform.portfolio.subscription.service.SubcriptionWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/subscriptions")
+@Component
+@Scope("singleton")
+public class SubscriptionApiResource {
+
+	@Autowired
+	private  PeriodReadPlatformService periodReadPlatformService;
+
+	@Autowired
+	private PortfolioApiDataConversionService apiDataConversionService;
+
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+
+	@Autowired
+	private PlatformSecurityContext context;
+
+	@Autowired
+	private SubcriptionWritePlatformService  subcriptionWritePlatformService;
+
+	@Autowired
+	private SubscriptionReadPlatformService subcriptionReadPlatformService;
+
+	private final String entityType = "SUBSCRIPTION";
+
+	@POST
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response createSubscription(final String jsonRequestBody) {
+
+		SubscriptionCommand command = this.apiDataConversionService.convertJsonToSubscriptionCommand(null, jsonRequestBody);
+
+		CommandProcessingResult userId = this.subcriptionWritePlatformService.createSubscription(command);
+		return Response.ok().entity(userId).build();
+	}
+
+	@GET
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveAllSubscription(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","subscription_period","subscription_type","units","subscriptionTypeId","day_name"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		Collection<SubscriptionData> products=this.subcriptionReadPlatformService.retrieveAllSubscription();
+		return this.apiJsonSerializerService.serializeSubscriptionToJson(prettyPrint, responseParameters, products);
+	}
+
+	@GET
+	@Path("{SubscriptionId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveDepositProductDetails(@PathParam("SubscriptionId") final Long SubscriptionId, @Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","subscription_period","subscription_type","units","day_name","subscriptionTypeId" ));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		SubscriptionData productData = this.subcriptionReadPlatformService.retrieveSubscriptionData(SubscriptionId);
+
+		boolean template = ApiParameterHelper.template(uriInfo.getQueryParameters());
+		if (template) {
+			responseParameters.addAll(Arrays.asList("allowedtypes"));
+			List<PeriodData> allowedtypes = this.periodReadPlatformService.retrieveAllPlatformPeriod();
+			productData = new SubscriptionData(allowedtypes, productData);
+		}
+
+		return this.apiJsonSerializerService.serializeSubscriptionToJson(prettyPrint, responseParameters, productData);
+	}
+
+	@GET
+	@Path("template")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveNewDepositProductDetails(@Context final UriInfo uriInfo) {
+
+	context.authenticatedUser().validateHasReadPermission(entityType);
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","subscription_period","subscription_type","day_name"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		responseParameters.addAll(Arrays.asList("allowedtypes"));
+		List<PeriodData> allowedtypes = this.periodReadPlatformService.retrieveAllPlatformPeriod();
+         SubscriptionData product = new SubscriptionData(allowedtypes);
+
+		return this.apiJsonSerializerService.serializeSubscriptionToJson(prettyPrint, responseParameters, product);
+	}
+
+
+	@PUT
+	@Path("{SubscriptionId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response updateSubscription(@PathParam("SubscriptionId") final Long SubscriptionId, final String jsonRequestBody){
+
+		final SubscriptionCommand command=this.apiDataConversionService.convertJsonToSubscriptionCommand(SubscriptionId, jsonRequestBody);
+		CommandProcessingResult entityIdentifier=this.subcriptionWritePlatformService.updateSubscriptionProduct(command);
+		return Response.ok().entity(entityIdentifier).build();
+	}
+
+	@DELETE
+	@Path("{SubscriptionId}")
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public Response deleteSubscription(@PathParam("SubscriptionId") final Long SubscriptionId) {
+
+		this.subcriptionWritePlatformService.deleteSubscription(SubscriptionId);
+
+		return Response.ok(SubscriptionId).build();
+	}
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/commands/SubscriptionCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/commands/SubscriptionCommand.java
new file mode 100644
index 0000000..0b9dd83
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/commands/SubscriptionCommand.java
@@ -0,0 +1,78 @@
+package org.mifosplatform.portfolio.subscription.commands;
+
+import java.util.Set;
+
+public class SubscriptionCommand {
+
+	private final String subscription_period;
+
+	//private final String subscription_type;
+	private final Long subscriptionTypeId;
+	private final Long units;
+	private String day_name;
+
+	private final Long id;
+	private final Set<String> modifiedParameters;
+
+	public SubscriptionCommand(final Set<String> modifiedParameters,
+			final Long subScriptionId, final Long id,
+			final String subscription_period2,
+			final Long units, String day_name, final Long subscriptionTypeId) {
+		this.subscription_period = subscription_period2;
+	//	this.subscription_type = subscription_type;
+		this.units = units;
+		this.id = id;
+		this.day_name = day_name;//subscription_type.equalsIgnoreCase("WEEKLY") ? day_name
+			//	: null;
+		this.subscriptionTypeId = subscriptionTypeId;
+		this.modifiedParameters = modifiedParameters;
+	}
+
+	
+
+	public Long getSubscriptionTypeId() {
+		return subscriptionTypeId;
+	}
+
+	public String getSubscription_period() {
+		return subscription_period;
+	}
+//	public String getSubscription_type() {
+//		return subscription_type;
+//	}
+
+	public Long getUnits() {
+		return units;
+	}
+
+	public String getDay_name() {
+
+		return day_name;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public boolean issubscriptionPeriodChanged() {
+		return this.modifiedParameters.contains("subscription_period");
+	}
+
+	public boolean issubscriptionTypeChanged() {
+		return this.modifiedParameters.contains("subscription_type");
+	}
+
+	public boolean isUnitsChanged() {
+		return this.modifiedParameters.contains("units");
+	}
+
+	public boolean isDayNameChanged() {
+		return this.modifiedParameters.contains("day_name");
+	}
+
+	public boolean isSubscriptionTypeIdChanged() {
+		return this.modifiedParameters.contains("subscriptionTypeId");
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/data/SubscriptionData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/data/SubscriptionData.java
new file mode 100644
index 0000000..654c305
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/data/SubscriptionData.java
@@ -0,0 +1,105 @@
+package org.mifosplatform.portfolio.subscription.data;
+
+import java.util.List;
+import java.util.Set;
+
+import org.mifosplatform.infrastructure.configuration.data.PeriodData;
+
+public class SubscriptionData {
+
+	private final Long id;
+
+	private final String subscription_period;
+	private final Long subscriptiontypeId;
+ private final String Contractdata;
+	private final String subscription_type;
+	private List<PeriodData> allowedperiods;
+
+	private final Long units;
+	private String day_name;
+
+	public SubscriptionData(final Long id, final String subscription_period,
+			final String subscription_type, final Long units,final Long subscriptiontypeid,final String day_name) {
+
+		this.id = id;
+		this.subscription_period = subscription_period;
+		this.subscription_type = subscription_type;
+		this.units = units;
+		this.subscriptiontypeId=subscriptiontypeid;
+		this.day_name=day_name;
+		this.Contractdata=null;
+	}
+
+	public SubscriptionData(final Long id,final String data)
+	{
+		this.Contractdata=data;
+		this.id=id;
+		this.subscription_period=null;
+		this.subscription_type=null;
+		this.units=null;
+		this.subscriptiontypeId=null;
+		this.day_name=null;
+
+	}
+	public String getDay_name() {
+		return day_name;
+	}
+
+	public void setDay_name(String day_name) {
+		this.day_name = day_name;
+	}
+
+	public SubscriptionData(List<PeriodData> datas, SubscriptionData products) {
+		this.id = products.getId();
+		this.allowedperiods = datas;
+		this.subscription_period = products.getSubscription_period();
+		this.units = products.getUnits();
+		this.subscription_type = products.getSubscription_type();
+        this.subscriptiontypeId=products.getSubscriptiontypeId();
+        this.Contractdata=null;
+	}
+
+	public SubscriptionData(List<PeriodData> allowedtypes) {
+		this.allowedperiods = allowedtypes;
+		this.id=null;
+		this.subscription_period=null;
+		this.subscription_type=null;
+		this.units=null;
+		this.subscriptiontypeId=null;
+		this.Contractdata=null;
+	}
+
+	public List<PeriodData> getAllowedperiods() {
+		return allowedperiods;
+	}
+
+	public void setAllowedperiods(List<PeriodData> allowedperiods) {
+		this.allowedperiods = allowedperiods;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public String getSubscription_period() {
+		return subscription_period;
+	}
+
+	public String getSubscription_type() {
+		return subscription_type;
+	}
+
+	public Long getUnits() {
+		return units;
+	}
+
+	public Long getSubscriptiontypeId() {
+		return subscriptiontypeId;
+	}
+
+	public String getContractdata() {
+		return Contractdata;
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/Subscription.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/Subscription.java
new file mode 100644
index 0000000..f740faf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/Subscription.java
@@ -0,0 +1,91 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "contract_period")
+public class Subscription extends AbstractPersistable<Long> {
+
+	@Column(name = "contract_period", nullable = false)
+	private String subscription_period;
+
+	@Column(name = "is_deleted", nullable = false)
+	private boolean deleted=false;
+
+	@Column(name = "contract_type", length = 100)
+	private String subscription_type;
+
+	@Column(name = "contract_duration")
+	private Long units;
+
+		public Subscription() {
+	}
+
+	public Subscription(final String subscriptionPeriod, final Long units,
+			final String subscriptionType, final Long subscriptionTypeId) {
+
+       this.subscription_period=subscriptionPeriod;
+		this.subscription_type = subscriptionType;
+		this.units = units;
+
+
+
+	}
+
+
+
+	public String getSubscription_period() {
+		return subscription_period;
+	}
+
+
+
+	public String getSubscription_type() {
+		return subscription_type;
+	}
+
+	
+
+	public Long getUnits() {
+		return units;
+	}
+
+
+
+	public void update(SubscriptionCommand command, String type) {
+
+		if (command.issubscriptionPeriodChanged()) {
+			this.subscription_period = command.getSubscription_period();
+		}
+
+		if (command.isUnitsChanged()) {
+			this.units = command.getUnits();
+		}
+
+
+		if (command.isSubscriptionTypeIdChanged()) {
+
+
+			this.subscription_type = type;
+		}
+		if (command.isDayNameChanged()) {
+
+		}
+
+	}
+
+	public void delete() {
+		if (deleted) {
+
+		} else {
+			this.deleted = true;
+
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionCommandValidator.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionCommandValidator.java
new file mode 100644
index 0000000..4074dfa
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionCommandValidator.java
@@ -0,0 +1,33 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+
+
+public class SubscriptionCommandValidator {
+
+	private final SubscriptionCommand command;
+
+	public SubscriptionCommandValidator(final SubscriptionCommand command) {
+		this.command=command;
+	}
+
+
+	public void validateForCreate() {
+         List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors).resource("subscription");
+		baseDataValidator.reset().parameter("subscription_period").value(command.getSubscription_period()).notBlank().notNull();
+		//baseDataValidator.reset().parameter("subscription_type").value(command.getSubscription_type()).notBlank().notNull();
+		baseDataValidator.reset().parameter("units").value(command.getUnits()).notBlank().notNull();
+		baseDataValidator.reset().parameter("day_name").value(command.getDay_name());
+
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException("validation.msg.validation.errors.exist", "Validation errors exist.", dataValidationErrors);
+		}
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformService.java
new file mode 100644
index 0000000..1b3063b
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformService.java
@@ -0,0 +1,15 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+
+public interface SubscriptionReadPlatformService {
+
+	Collection<SubscriptionData> retrieveAllSubscription();
+
+	Collection<SubscriptionData> retrieveSubscriptionDetails();
+
+	SubscriptionData retrieveSubscriptionData(Long subscriptionId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformServiceImpl.java
new file mode 100644
index 0000000..327c16a
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionReadPlatformServiceImpl.java
@@ -0,0 +1,89 @@
+package org.mifosplatform.portfolio.subscription.domain;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Collection;
+
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+
+
+@Service
+public class SubscriptionReadPlatformServiceImpl implements SubscriptionReadPlatformService {
+
+
+
+	private final PlatformSecurityContext context;
+	private final JdbcTemplate jdbcTemplate;
+
+	@Autowired
+	public SubscriptionReadPlatformServiceImpl(final PlatformSecurityContext context,final TenantAwareRoutingDataSource dataSource) {
+		this.context=context;
+		jdbcTemplate=new JdbcTemplate(dataSource);
+	}
+
+
+	@Override
+	public Collection<SubscriptionData> retrieveSubscriptionDetails() {
+
+
+		this.context.authenticatedUser();
+
+
+	    SuscriptionMapper depositProductMapper= new SuscriptionMapper();
+		String sql="select "+depositProductMapper.depositProductSchema();
+		return this.jdbcTemplate.query(sql,depositProductMapper, new Object[]{});
+
+	}
+
+	@Override
+	public Collection<SubscriptionData> retrieveAllSubscription() {
+		this.context.authenticatedUser();
+		SuscriptionMapper mapper= new SuscriptionMapper();
+		String sql="select "+mapper.depositProductSchema()+"where dp.is_deleted=0";
+		return this.jdbcTemplate.query(sql,mapper, new Object[]{});
+	}
+
+	@Override
+	public SubscriptionData retrieveSubscriptionData(Long subscriptionId) {
+		SuscriptionMapper depositProductMapper=new SuscriptionMapper();
+		String sql = "select "+ depositProductMapper.depositProductSchema() +" where dp.id = ? and dp.is_deleted=0";
+
+		return this.jdbcTemplate.queryForObject(sql, depositProductMapper, new Object[]{subscriptionId});
+	}
+
+
+private static final class SuscriptionMapper implements RowMapper<SubscriptionData>{
+
+		public String depositProductSchema(){
+			return " dp.id as id,dp.contract_period as  subscription_period,dp.contract_type as subscription_type,dp.contract_duration as units from contract_period dp ";
+
+		}
+
+		@Override
+		public SubscriptionData mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String subscription_period = rs.getString("subscription_period");
+			String subscription_type = rs.getString("subscription_type");
+			Long units = rs.getLong("units");
+			
+
+
+
+			return new SubscriptionData(id,subscription_period,subscription_type,units,null,null);
+		}
+
+
+
+	}
+
+
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionRepository.java
new file mode 100644
index 0000000..fcd1cbf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionRepository.java
@@ -0,0 +1,12 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface SubscriptionRepository  extends
+JpaRepository<Subscription, Long>,
+JpaSpecificationExecutor<Subscription>{
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionType.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionType.java
new file mode 100644
index 0000000..b0b29fb
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionType.java
@@ -0,0 +1,38 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "m_subscription_period")
+public class SubscriptionType extends AbstractPersistable<Long> {
+
+	@Column(name = "subscription_type", length = 100)
+	private String subscription_type;
+
+	@Column(name = "day_name")
+	private String day_name;
+
+	public SubscriptionType() {
+	}
+
+	public SubscriptionType(final String subscription_type,
+			final String day_name) {
+
+		this.subscription_type = subscription_type;
+		this.day_name = day_name;
+
+	}
+
+	public String getDay_name() {
+		return day_name;
+	}
+
+	public String getSubscription_type() {
+		return subscription_type;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionTypeRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionTypeRepository.java
new file mode 100644
index 0000000..5e0d6d0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/domain/SubscriptionTypeRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.subscription.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+	public interface SubscriptionTypeRepository  extends
+	JpaRepository<SubscriptionType, Long>,
+	JpaSpecificationExecutor<SubscriptionType>{
+
+
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformService.java
new file mode 100644
index 0000000..1163e7d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformService.java
@@ -0,0 +1,16 @@
+package org.mifosplatform.portfolio.subscription.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+
+public interface SubcriptionWritePlatformService {
+
+
+	CommandProcessingResult createSubscription(final SubscriptionCommand command);
+
+	CommandProcessingResult updateSubscriptionProduct(SubscriptionCommand command);
+
+
+	CommandProcessingResult deleteSubscription(Long productId);
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformServiceImp.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformServiceImp.java
new file mode 100644
index 0000000..3023f07
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/subscription/service/SubcriptionWritePlatformServiceImp.java
@@ -0,0 +1,101 @@
+package org.mifosplatform.portfolio.subscription.service;
+
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.savingsdepositproduct.exception.DepositProductNotFoundException;
+import org.mifosplatform.portfolio.subscription.commands.SubscriptionCommand;
+import org.mifosplatform.portfolio.subscription.domain.Subscription;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionCommandValidator;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionRepository;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionType;
+import org.mifosplatform.portfolio.subscription.domain.SubscriptionTypeRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Service
+public class SubcriptionWritePlatformServiceImp implements SubcriptionWritePlatformService{
+
+
+
+	private PlatformSecurityContext context;
+
+	private SubscriptionRepository subscriptionRepository;
+	private SubscriptionTypeRepository subscriptionTypeRepository;
+
+
+
+
+	@Autowired
+	public SubcriptionWritePlatformServiceImp(final PlatformSecurityContext context, final SubscriptionRepository subscription,final SubscriptionTypeRepository subscriptionTypeRepository){
+		this.context=context;
+		this.subscriptionRepository=subscription;
+		this.subscriptionTypeRepository=subscriptionTypeRepository;
+	}
+	@Transactional
+	@Override
+	public CommandProcessingResult createSubscription(SubscriptionCommand command) {
+		try
+		{
+
+			this.context.authenticatedUser();
+			SubscriptionCommandValidator validator=new SubscriptionCommandValidator(command);
+			validator.validateForCreate();
+			//SubscriptionType type=subscriptionTypeRepository.findOne(command.getSubscriptionTypeId());
+
+
+
+			Subscription data=new Subscription(command.getSubscription_period(),command.getUnits(),command.getDay_name(),command.getSubscriptionTypeId());
+
+
+
+			this.subscriptionRepository.save(data);
+			return new CommandProcessingResult(data.getId());
+		} catch (DataIntegrityViolationException dve) {
+			 handleDataIntegrityIssues(command, dve);
+			 return new CommandProcessingResult(Long.valueOf(-1));
+		}
+
+
+	}
+	private void handleDataIntegrityIssues(SubscriptionCommand command,
+			DataIntegrityViolationException dve) {
+		// TODO Auto-generated method stub
+
+	}
+	@Transactional
+	@Override
+	public CommandProcessingResult updateSubscriptionProduct(SubscriptionCommand command) {
+		try {
+			this.context.authenticatedUser();
+
+			Subscription subscription=this.subscriptionRepository.findOne(command.getId());
+
+			if(subscription==null){
+				throw new DepositProductNotFoundException(command.getId());
+			}
+
+			subscription.update(command,command.getDay_name());
+			this.subscriptionRepository.save(subscription);
+			return new CommandProcessingResult(Long.valueOf(subscription.getId()));
+		} catch (DataIntegrityViolationException dve) {
+			 handleDataIntegrityIssues(command, dve);
+			 return new CommandProcessingResult(Long.valueOf(-1));
+		}
+	}
+	@Transactional
+	@Override
+	public CommandProcessingResult deleteSubscription(Long productId) {
+
+			this.context.authenticatedUser();
+			Subscription subscription=this.subscriptionRepository.findOne(productId);
+			if(subscription==null){
+				throw new DepositProductNotFoundException(productId);
+			}
+			subscription.delete();
+			this.subscriptionRepository.save(subscription);
+			return new CommandProcessingResult(Long.valueOf(subscription.getId()));
+		}
+	}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMappingRateApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMappingRateApiResource.java
new file mode 100644
index 0000000..199b63c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMappingRateApiResource.java
@@ -0,0 +1,90 @@
+package org.mifosplatform.portfolio.taxmaster.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.charge.data.ChargeCodeData;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountValues;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMappingRateOptionsData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterData;
+import org.mifosplatform.portfolio.taxmaster.service.TaxMappingRateReadPlatformService;
+import org.mifosplatform.portfolio.taxmaster.service.TaxMappingRateWritePlatformService;
+import org.mifosplatform.portfolio.taxmaster.service.TaxMasterWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/taxmappingrates")
+@Component
+@Scope("singleton")
+public class TaxMappingRateApiResource {
+	@Autowired
+	private TaxMasterWritePlatformService taxMasterWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@Autowired
+	private TaxMappingRateWritePlatformService taxMappingRateWritePlatformService;
+	@Autowired
+	private  TaxMappingRateReadPlatformService taxMappingRateReadPlatformService;
+
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createTaxMappingRate(final String jsonRequestBody) {
+		final TaxMappingRateCommand command = this.apiDataConversionService.convertJsonToTaxMappingRateCommand(null, jsonRequestBody);
+		Long id=taxMappingRateWritePlatformService.createtaxMasterMapping(command);
+		return Response.ok().entity(id).build();
+	}
+
+
+@GET
+@Path("template")
+@Consumes({MediaType.APPLICATION_JSON})
+@Produces({MediaType.APPLICATION_JSON})
+public String retrieveTempleteInfo(@Context final UriInfo uriInfo) {
+
+
+	Set<String> typicalResponseParameters = new HashSet<String>(
+			Arrays.asList("id","taxCode","taxMasterOptions"));
+
+	Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+	if (responseParameters.isEmpty()) {
+		responseParameters.addAll(typicalResponseParameters);
+	}
+
+	final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+   //final Collection<TaxMasterData> datas = this.taxMasterReadPlatformService.retrieveAllTaxMasterData();
+
+	final Collection<DiscountValues> datass=new ArrayList<DiscountValues>();
+	DiscountValues  d1=new DiscountValues("Percentage ");
+	DiscountValues  d2=new DiscountValues("Flat ");
+	datass.add(d1);
+	datass.add(d2);
+    final Collection<TaxMasterData> taxMasterData=taxMappingRateReadPlatformService.retrieveTaxMappingRateforTemplate();
+    final Collection<ChargeCodeData> chargeCodeData=taxMappingRateReadPlatformService.retrieveChargeCodeForTemplate();
+    TaxMappingRateOptionsData data=new TaxMappingRateOptionsData(chargeCodeData,taxMasterData,datass);
+    Collection<TaxMappingRateOptionsData> optionsData=new ArrayList<TaxMappingRateOptionsData>();
+    optionsData.add(data);
+	return this.apiJsonSerializerService.serializeTaxMappingRateTemplateDataToJson(prettyPrint, responseParameters, optionsData);
+}
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMasterApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMasterApiResource.java
new file mode 100644
index 0000000..6562142
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/api/TaxMasterApiResource.java
@@ -0,0 +1,109 @@
+package org.mifosplatform.portfolio.taxmaster.api;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.GET;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.Context;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.Response;
+import javax.ws.rs.core.UriInfo;
+
+import org.mifosplatform.infrastructure.core.api.ApiParameterHelper;
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiDataBillingConversionService;
+import org.mifosplatform.portfolio.billingproduct.PortfolioApiJsonBillingSerializerService;
+import org.mifosplatform.portfolio.subscription.data.SubscriptionData;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterDataOptions;
+import org.mifosplatform.portfolio.taxmaster.service.TaxMasterReadPlatformService;
+import org.mifosplatform.portfolio.taxmaster.service.TaxMasterWritePlatformService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/taxmasters")
+@Component
+@Scope("singleton")
+public class TaxMasterApiResource {
+
+	@Autowired
+	private TaxMasterWritePlatformService taxMasterWritePlatformService;
+	@Autowired
+	private PortfolioApiDataBillingConversionService apiDataConversionService;
+	@Autowired
+	private PortfolioApiJsonBillingSerializerService apiJsonSerializerService;
+	@Autowired
+	private TaxMasterReadPlatformService taxMasterReadPlatformService;
+	
+	@Autowired
+	private PlatformSecurityContext context;
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public Response createNewTax(final String jsonRequestBody) {
+		final TaxMasterCommand command = this.apiDataConversionService.convertJsonToTaxMasterCommand(null, jsonRequestBody);
+		Long id=taxMasterWritePlatformService.createtaxMaster(command);
+		return Response.ok().entity(id).build();
+	}
+    @GET
+    @Path("template")
+    @Consumes({MediaType.APPLICATION_JSON})
+    @Produces({MediaType.APPLICATION_JSON})
+    public String retrieveTempleteInfo(@Context final UriInfo uriInfo) {
+
+
+	Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","taxType","taxMasterOptions"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+
+	final boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+       // final Collection<TaxMasterData> datas = this.taxMasterReadPlatformService.retrieveAllTaxMasterData();
+
+         List<EnumOptionData> enumOptionData;
+		enumOptionData=new ArrayList<EnumOptionData>();
+		enumOptionData.add(new EnumOptionData(new Long(1),"Tax","notrequired"));
+		enumOptionData.add(new EnumOptionData(new Long(2),"Tax on Tax","notrequired"));
+        TaxMasterDataOptions taxMasterOptionsData=new TaxMasterDataOptions(enumOptionData);
+
+        Collection<TaxMasterDataOptions> optionsData=new ArrayList<TaxMasterDataOptions>();
+        optionsData.add(taxMasterOptionsData);
+
+
+		return this.apiJsonSerializerService.serializeTaxMasterDataToJson(prettyPrint, responseParameters, optionsData);
+    }
+
+    @GET
+	@Consumes({MediaType.APPLICATION_JSON})
+	@Produces({MediaType.APPLICATION_JSON})
+	public String retrieveAllTaxMaster(@Context final UriInfo uriInfo) {
+
+
+		Set<String> typicalResponseParameters = new HashSet<String>(
+				Arrays.asList("id","subscription_period","subscription_type","units","subscriptionTypeId","day_name"));
+
+		Set<String> responseParameters = ApiParameterHelper.extractFieldsForResponseIfProvided(uriInfo.getQueryParameters());
+		if (responseParameters.isEmpty()) {
+			responseParameters.addAll(typicalResponseParameters);
+		}
+		boolean prettyPrint = ApiParameterHelper.prettyPrint(uriInfo.getQueryParameters());
+
+		Collection<TaxMasterDataOptions> taxes=this.taxMasterReadPlatformService.retrieveAllTaxes();
+		return this.apiJsonSerializerService.serializeTaxMasterDataToJson(prettyPrint, responseParameters, taxes);
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMappingRateCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMappingRateCommand.java
new file mode 100644
index 0000000..e66e358
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMappingRateCommand.java
@@ -0,0 +1,52 @@
+package org.mifosplatform.portfolio.taxmaster.commands;
+
+import java.math.BigDecimal;
+
+import org.joda.time.LocalDate;
+
+public class TaxMappingRateCommand {
+	private String chargeCode;
+	private String taxCode;
+	private LocalDate startdate;
+	private String type;
+	private BigDecimal value;
+	public TaxMappingRateCommand(String chargeCode,String taxCode,LocalDate startdate,String type,BigDecimal value)
+	{
+		this.chargeCode=chargeCode;
+		this.taxCode=taxCode;
+		this.startdate=startdate;
+		this.type=type;
+		this.value=value;
+	}
+	public String getChargeCode() {
+		return chargeCode;
+	}
+	public void setChargeCode(String chargeCode) {
+		this.chargeCode = chargeCode;
+	}
+	public String getTaxCode() {
+		return taxCode;
+	}
+	public void setTaxCode(String taxCode) {
+		this.taxCode = taxCode;
+	}
+	public LocalDate getStartdate() {
+		return startdate;
+	}
+	public void setStartdate(LocalDate startdate) {
+		this.startdate = startdate;
+	}
+	public String getType() {
+		return type;
+	}
+	public void setType(String type) {
+		this.type = type;
+	}
+	public BigDecimal getValue() {
+		return value;
+	}
+	public void setValue(BigDecimal value) {
+		this.value = value;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMasterCommand.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMasterCommand.java
new file mode 100644
index 0000000..6334ae0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/commands/TaxMasterCommand.java
@@ -0,0 +1,42 @@
+package org.mifosplatform.portfolio.taxmaster.commands;
+
+public class TaxMasterCommand {
+
+
+	private String taxCode;
+	private String taxType;
+	private String taxDescription;
+
+
+public TaxMasterCommand(String taxCode,String taxType,String taxDescription)
+{
+	this.taxCode=taxCode;
+	this.taxType=taxType;
+	this.taxDescription=taxDescription;
+}
+
+public String getTaxCode() {
+	return taxCode;
+}
+
+public void setTaxCode(String taxCode) {
+	this.taxCode = taxCode;
+}
+
+public String getTaxType() {
+	return taxType;
+}
+
+public void setTaxType(String taxType) {
+	this.taxType = taxType;
+}
+
+public String getTaxDescription() {
+	return taxDescription;
+}
+
+public void setTaxDescription(String taxDescription) {
+	this.taxDescription = taxDescription;
+}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateData.java
new file mode 100644
index 0000000..1e0099c
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateData.java
@@ -0,0 +1,66 @@
+package org.mifosplatform.portfolio.taxmaster.data;
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+public class TaxMappingRateData {
+
+	private Long id;
+	private String chargeCode;
+	private String taxCode;
+	private Date startDate;
+	private BigDecimal rate;
+
+	public TaxMappingRateData(final Long id,final String chargeCode,final String taxCode,
+			final Date startDate,final BigDecimal rate) {
+
+		this.id =  id;
+		this.chargeCode = chargeCode;
+		this.taxCode = taxCode;
+		this.startDate = startDate;
+		this.rate = rate;
+
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getChargeCode() {
+		return chargeCode;
+	}
+
+	public void setChargeCode(String chargeCode) {
+		this.chargeCode = chargeCode;
+	}
+
+	public String getTaxCode() {
+		return taxCode;
+	}
+
+	public void setTaxCode(String taxCode) {
+		this.taxCode = taxCode;
+	}
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+	public void setStartDate(Date startDate) {
+		this.startDate = startDate;
+	}
+
+
+	public BigDecimal getRate() {
+		return rate;
+	}
+
+	public void setRate(BigDecimal rate) {
+		this.rate = rate;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateOptionsData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateOptionsData.java
new file mode 100644
index 0000000..999e975
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMappingRateOptionsData.java
@@ -0,0 +1,20 @@
+package org.mifosplatform.portfolio.taxmaster.data;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.charge.data.ChargeCodeData;
+import org.mifosplatform.portfolio.discountmaster.commands.DiscountValues;
+
+public class TaxMappingRateOptionsData {
+	private Collection<DiscountValues> datass;
+	private Collection<TaxMasterData> taxMasterData;
+	private Collection<ChargeCodeData> chargeCodeData;
+
+	public TaxMappingRateOptionsData(Collection<ChargeCodeData> chargeCodeData,Collection<TaxMasterData> taxMasterData,Collection<DiscountValues> datass)
+	{
+		this.taxMasterData=taxMasterData;
+		this.chargeCodeData=chargeCodeData;
+		this.datass=datass;
+
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterData.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterData.java
new file mode 100644
index 0000000..0948ba4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterData.java
@@ -0,0 +1,23 @@
+package org.mifosplatform.portfolio.taxmaster.data;
+
+public class TaxMasterData {
+private Long id;
+private String taxCode;
+public TaxMasterData(Long id,String taxCode)
+{
+	this.id=id;
+	this.taxCode=taxCode;
+}
+public Long getId() {
+	return id;
+}
+public void setId(Long id) {
+	this.id = id;
+}
+public String getTaxCode() {
+	return taxCode;
+}
+public void setTaxCode(String taxCode) {
+	this.taxCode = taxCode;
+}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterDataOptions.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterDataOptions.java
new file mode 100644
index 0000000..d7059e0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterDataOptions.java
@@ -0,0 +1,14 @@
+package org.mifosplatform.portfolio.taxmaster.data;
+
+import java.util.Collection;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class TaxMasterDataOptions {
+	private Collection<EnumOptionData> enumOptionData;
+
+	public TaxMasterDataOptions(Collection<EnumOptionData> enumOptionData)
+	{
+		this.enumOptionData=enumOptionData;
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterOptions.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterOptions.java
new file mode 100644
index 0000000..4365642
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/data/TaxMasterOptions.java
@@ -0,0 +1,18 @@
+package org.mifosplatform.portfolio.taxmaster.data;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.mifosplatform.infrastructure.core.data.EnumOptionData;
+
+public class TaxMasterOptions {
+	private List<EnumOptionData> enumOptionData;
+
+	public TaxMasterOptions() {
+		enumOptionData = new ArrayList<EnumOptionData>();
+		enumOptionData
+				.add(new EnumOptionData(new Long(1), "Tax", "notrequired"));
+		enumOptionData.add(new EnumOptionData(new Long(2), "Tax on Tax",
+				"notrequired"));
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRate.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRate.java
new file mode 100644
index 0000000..3963454
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRate.java
@@ -0,0 +1,44 @@
+package org.mifosplatform.portfolio.taxmaster.domain;
+
+
+import java.math.BigDecimal;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+import org.joda.time.LocalDate;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+@Entity
+@Table(name = "tax_mapping_rate")
+public class TaxMappingRate extends AbstractPersistable<Long> {
+
+	@Column(name = "charge_code", nullable = false, length = 20)
+	private String chargeCode;
+	@Column(name = "tax_code", nullable = false, length = 20)
+	private String taxCode;
+	@Column(name="start_date",nullable=false)
+	private Date startdate;
+
+	@Column(name = "type", nullable = false, length = 20)
+	private String type;
+
+	@Column(name = "rate", nullable = false, length = 20)
+	private BigDecimal value;
+
+	public TaxMappingRate(String chargeCode,String taxCode,LocalDate startdate,String type,BigDecimal value)
+	{
+		this.chargeCode=chargeCode;
+		this.taxCode=taxCode;
+		this.startdate=startdate.toDate();
+		this.type=type;
+		this.value=value;
+	}
+	public static TaxMappingRate create(String chargeCode,String taxCode,LocalDate startdate,String type,BigDecimal value)
+	{
+		return new TaxMappingRate(chargeCode,taxCode,startdate,type,value);
+	}
+	public TaxMappingRate() {
+		// TODO Auto-generated constructor stub
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRateRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRateRepository.java
new file mode 100644
index 0000000..a93cc23
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMappingRateRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.portfolio.taxmaster.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface TaxMappingRateRepository extends JpaRepository<TaxMappingRate, Long>,
+JpaSpecificationExecutor<TaxMappingRate> {
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMaster.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMaster.java
new file mode 100644
index 0000000..8f31b55
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMaster.java
@@ -0,0 +1,36 @@
+package org.mifosplatform.portfolio.taxmaster.domain;
+import javax.persistence.Column;
+
+import javax.persistence.Entity;
+
+import javax.persistence.Table;
+
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+@Entity
+@Table(name = "tax_master")
+public class TaxMaster extends AbstractPersistable<Long> {
+	@Column(name = "tax_code", nullable = false, length = 20)
+	private String taxCode;
+
+	@Column(name = "tax_type", nullable = false, length = 20)
+	private String taxType;
+
+	@Column(name = "tax_description", nullable = false, length = 20)
+	private String taxDescription;
+
+
+	public TaxMaster(String taxCode,String taxType,String taxDescription)
+	{
+		this.taxCode=taxCode;
+		this.taxType=taxType;
+		this.taxDescription=taxDescription;
+	}
+	public static TaxMaster create(String taxCode,String taxType,String taxDescription)
+	{
+		return new TaxMaster(taxCode,taxType,taxDescription);
+	}
+	public TaxMaster() {
+		// TODO Auto-generated constructor stub
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMasterRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMasterRepository.java
new file mode 100644
index 0000000..e3d2a1d
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/domain/TaxMasterRepository.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.taxmaster.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface TaxMasterRepository extends JpaRepository<TaxMaster, Long>,
+JpaSpecificationExecutor<TaxMaster> {
+// no added behaviour
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformService.java
new file mode 100644
index 0000000..aee8893
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformService.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.charge.data.ChargeCodeData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterData;
+
+public interface TaxMappingRateReadPlatformService {
+	Collection<TaxMasterData> retrieveTaxMappingRateforTemplate() ;
+    Collection<ChargeCodeData> retrieveChargeCodeForTemplate();
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformServiceImpl.java
new file mode 100644
index 0000000..9e71349
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateReadPlatformServiceImpl.java
@@ -0,0 +1,76 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Collection;
+
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.charge.data.ChargeCodeData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterData;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class TaxMappingRateReadPlatformServiceImpl implements TaxMappingRateReadPlatformService {
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  TaxMappingRateReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+	@Override
+	public Collection<TaxMasterData> retrieveTaxMappingRateforTemplate() {
+		this.context.authenticatedUser();
+
+		TaxMasterMapper mapper = new TaxMasterMapper();
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+
+	protected static final class TaxMasterMapper implements RowMapper<TaxMasterData> {
+
+		@Override
+		public TaxMasterData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id = rs.getLong("id");
+			String taxCode=rs.getString("tax_code");
+			return new TaxMasterData(id,taxCode);
+		}
+		public String schema() {
+			return "d.id as id , d.tax_code as tax_code from tax_master d";
+		}
+	}
+	@Override
+	public Collection<ChargeCodeData> retrieveChargeCodeForTemplate() {
+		this.context.authenticatedUser();
+
+		ChargeCodeMapper mapper = new ChargeCodeMapper();
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+	}
+	protected static final class ChargeCodeMapper implements RowMapper<ChargeCodeData> {
+
+		@Override
+		public ChargeCodeData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id = rs.getLong("id");
+			String chargeCode=rs.getString("charge_code");
+			return new ChargeCodeData(id,chargeCode);
+
+		}
+
+		public String schema() {
+			return "d.id as id , d.charge_code as charge_code from charge_codes d";
+		}
+	}
+
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformService.java
new file mode 100644
index 0000000..0e005de
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformService.java
@@ -0,0 +1,7 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+
+public interface TaxMappingRateWritePlatformService {
+	public Long createtaxMasterMapping(final TaxMappingRateCommand command);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformServiceJpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformServiceJpaRepositoryImpl.java
new file mode 100644
index 0000000..20d0530
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMappingRateWritePlatformServiceJpaRepositoryImpl.java
@@ -0,0 +1,43 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.chargecode.domain.ChargeCodeRepository;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMappingRateCommand;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMappingRate;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMappingRateRepository;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMaster;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMasterRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+@Service
+public class TaxMappingRateWritePlatformServiceJpaRepositoryImpl implements TaxMappingRateWritePlatformService{
+	private final PlatformSecurityContext context;
+	private final TaxMappingRateRepository taxMappingRateRepository;
+	private final TaxMasterRepository taxMasterRepository;
+	private final ChargeCodeRepository chargeCodeRepository;
+@Autowired
+ public TaxMappingRateWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,final TaxMappingRateRepository taxMappingRateRepository,final TaxMasterRepository taxMasterRepository,final ChargeCodeRepository chargeCodeRepository)
+{
+	this.context=context;
+	this.taxMappingRateRepository=taxMappingRateRepository;
+	this.taxMasterRepository=taxMasterRepository;
+	this.chargeCodeRepository=chargeCodeRepository;
+}
+@Transactional
+@Override
+public Long createtaxMasterMapping(final TaxMappingRateCommand command)
+	{
+	try {
+		context.authenticatedUser();
+		TaxMaster taxMaster;
+
+		TaxMappingRate taxMappingRate = TaxMappingRate.create(command.getChargeCode(),command.getTaxCode(),command.getStartdate(),command.getType(),command.getValue());
+		this.taxMappingRateRepository.save(taxMappingRate);
+		return taxMappingRate.getId();
+	} catch (DataIntegrityViolationException dve) {
+		 return Long.valueOf(-1);
+	}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformService.java
new file mode 100644
index 0000000..79260fe
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformService.java
@@ -0,0 +1,14 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import java.util.Collection;
+
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterDataOptions;
+
+
+public interface TaxMasterReadPlatformService {
+	public Collection<TaxMasterData> retrieveAllTaxMasterData();
+
+	public Collection<TaxMasterDataOptions> retrieveAllTaxes();
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformServiceImpl.java
new file mode 100644
index 0000000..26fd010
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterReadPlatformServiceImpl.java
@@ -0,0 +1,89 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.Collection;
+
+import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterData;
+import org.mifosplatform.portfolio.taxmaster.data.TaxMasterDataOptions;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.jdbc.core.JdbcTemplate;
+import org.springframework.jdbc.core.RowMapper;
+import org.springframework.stereotype.Service;
+@Service
+public class TaxMasterReadPlatformServiceImpl implements TaxMasterReadPlatformService {
+
+	private final JdbcTemplate jdbcTemplate;
+	private final PlatformSecurityContext context;
+
+	@Autowired
+	public  TaxMasterReadPlatformServiceImpl(final PlatformSecurityContext context, final TenantAwareRoutingDataSource dataSource) {
+		this.context = context;
+		this.jdbcTemplate = new JdbcTemplate(dataSource);
+	}
+
+	@Override
+	public Collection<TaxMasterData> retrieveAllTaxMasterData() {
+		this.context.authenticatedUser();
+
+		TaxMasterMapper mapper = new TaxMasterMapper();
+		String sql = "select " + mapper.schema();
+
+		return this.jdbcTemplate.query(sql, mapper, new Object[] {});
+
+	}
+
+
+	protected static final class TaxMasterMapper implements RowMapper<TaxMasterData> {
+
+		@Override
+		public TaxMasterData mapRow(final ResultSet rs, @SuppressWarnings("unused") final int rowNum)
+				throws SQLException {
+			Long id = rs.getLong("id");
+			String taxType=rs.getString("taxType");
+
+
+			return new TaxMasterData(id,taxType);
+
+		}
+
+
+		public String schema() {
+			return "d.id as id , d.taxType as taxType from m_taxmaster d";
+		}
+	}
+
+
+	@Override
+	public Collection<TaxMasterDataOptions> retrieveAllTaxes() {
+		this.context.authenticatedUser();
+	TaxMapper mapper= new TaxMapper();
+		String sql="select "+mapper.schema()+"where dp.is_deleted=0";
+		return this.jdbcTemplate.query(sql,mapper, new Object[]{});
+	}
+	
+	private static final class TaxMapper implements RowMapper<TaxMasterDataOptions>{
+
+		public String schema(){
+			return " t.id as id,t.tax_code as taxCode,t.tax_description as taxDescription,t.tax_type as taxType from tax_master t where t.is_deleted='n'";
+
+		}
+
+		@Override
+		public TaxMasterDataOptions mapRow(ResultSet rs, @SuppressWarnings("unused") int rowNum)
+				throws SQLException {
+
+			Long id = rs.getLong("id");
+			String taxCode = rs.getString("taxCode");
+			String taxDescription = rs.getString("taxDescription");
+			Long units = rs.getLong("units");
+			
+
+
+
+			return new TaxMasterDataOptions(null);
+		}
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformService.java
new file mode 100644
index 0000000..c1f4dbf
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformService.java
@@ -0,0 +1,8 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
+
+
+public interface TaxMasterWritePlatformService {
+	public Long createtaxMaster(final TaxMasterCommand command);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformServiceJpaRepositoryImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformServiceJpaRepositoryImpl.java
new file mode 100644
index 0000000..20c5d12
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolio/taxmaster/service/TaxMasterWritePlatformServiceJpaRepositoryImpl.java
@@ -0,0 +1,37 @@
+package org.mifosplatform.portfolio.taxmaster.service;
+
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.mifosplatform.portfolio.taxmaster.commands.TaxMasterCommand;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMaster;
+import org.mifosplatform.portfolio.taxmaster.domain.TaxMasterRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+@Service
+public class TaxMasterWritePlatformServiceJpaRepositoryImpl implements TaxMasterWritePlatformService{
+
+	private final PlatformSecurityContext context;
+	private final TaxMasterRepository taxMasterRepository;
+
+@Autowired
+ public TaxMasterWritePlatformServiceJpaRepositoryImpl(final PlatformSecurityContext context,final TaxMasterRepository taxMasterRepository)
+{
+	this.context=context;
+	this.taxMasterRepository=taxMasterRepository;
+}
+@Transactional
+@Override
+	public Long createtaxMaster(final TaxMasterCommand command)
+	{
+	try {
+		context.authenticatedUser();
+		TaxMaster taxMaster = TaxMaster.create(command.getTaxCode(),command.getTaxType(),command.getTaxDescription());
+			this.taxMasterRepository.save(taxMaster);
+		return taxMaster.getId();
+	} catch (DataIntegrityViolationException dve) {
+		 return Long.valueOf(-1);
+	}
+
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/portfolioadjustment/service/ClientBalanceReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/portfolioadjustment/service/ClientBalanceReadPlatformService.java
new file mode 100644
index 0000000..9ff10f0
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/portfolioadjustment/service/ClientBalanceReadPlatformService.java
@@ -0,0 +1,10 @@
+package org.mifosplatform.portfolioadjustment.service;
+
+import java.util.List;
+
+import org.mifosplatform.portfolio.clientbalance.data.ClientBalanceData;
+
+public interface ClientBalanceReadPlatformService {
+	ClientBalanceData retrieveClientBalanceId(Long id);
+	List<ClientBalanceData> retrieveAllClientBalances(Long id);
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/useradministration/domain/AppUser.java b/mifosng-provider/src/main/java/org/mifosplatform/useradministration/domain/AppUser.java
index 71105fc..b049dae 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/useradministration/domain/AppUser.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/useradministration/domain/AppUser.java
@@ -35,415 +35,456 @@ import org.springframework.security.core.userdetails.User;
 @Table(name = "m_appuser", uniqueConstraints = @UniqueConstraint(columnNames = { "username" }, name = "username_org"))
 public class AppUser extends AbstractPersistable<Long> implements PlatformUser {
 
-    private final static Logger logger = LoggerFactory.getLogger(AppUser.class);
-
-    @Column(name = "email", nullable = false, length = 100)
-    private String email;
-
-    @Column(name = "username", nullable = false, length = 100)
-    private String username;
-
-    @Column(name = "firstname", nullable = false, length = 100)
-    private String firstname;
-
-    @Column(name = "lastname", nullable = false, length = 100)
-    private String lastname;
-
-    @Column(name = "password", nullable = false)
-    private String password;
-
-    @Column(name = "nonexpired", nullable = false)
-    private boolean accountNonExpired;
-
-    @Column(name = "nonlocked", nullable = false)
-    private final boolean accountNonLocked;
-
-    @Column(name = "nonexpired_credentials", nullable = false)
-    private final boolean credentialsNonExpired;
-
-    @Column(name = "enabled", nullable = false)
-    private boolean enabled;
-
-    @SuppressWarnings("unused")
-    @Column(name = "firsttime_login_remaining", nullable = false)
-    private boolean firstTimeLoginRemaining;
-
-    @Column(name = "is_deleted", nullable = false)
-    private boolean deleted;
-
-    @ManyToOne
-    @JoinColumn(name = "office_id")
-    private Office office;
-
-    @ManyToMany(fetch = FetchType.EAGER)
-    @JoinTable(name = "m_appuser_role", joinColumns = @JoinColumn(name = "appuser_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
-    private Set<Role> roles;
-
-    public static AppUser fromJson(final Office userOffice, final Set<Role> allRoles, final JsonCommand command) {
-
-        final String username = command.stringValueOfParameterNamed("username");
-        String password = command.stringValueOfParameterNamed("password");
-        if (StringUtils.isBlank(password)) {
-            password = "autogenerate";
-        }
-
-        boolean userEnabled = true;
-        boolean userAccountNonExpired = true;
-        boolean userCredentialsNonExpired = true;
-        boolean userAccountNonLocked = true;
-
-        Collection<SimpleGrantedAuthority> authorities = new ArrayList<SimpleGrantedAuthority>();
-        authorities.add(new SimpleGrantedAuthority("DUMMY_ROLE_NOT_USED_OR_PERSISTED_TO_AVOID_EXCEPTION"));
-
-        User user = new User(username, password, userEnabled, userAccountNonExpired, userCredentialsNonExpired, userAccountNonLocked,
-                authorities);
-
-        final String email = command.stringValueOfParameterNamed("email");
-        final String firstname = command.stringValueOfParameterNamed("firstname");
-        final String lastname = command.stringValueOfParameterNamed("lastname");
-
-        return new AppUser(userOffice, user, allRoles, email, firstname, lastname);
-    }
-
-    protected AppUser() {
-        this.accountNonLocked = false;
-        this.credentialsNonExpired = false;
-        this.roles = new HashSet<Role>();
-    }
-
-    public AppUser(final Office office, final User user, final Set<Role> roles, final String email, final String firstname,
-            final String lastname) {
-        this.office = office;
-        this.email = email.trim();
-        this.username = user.getUsername().trim();
-        this.firstname = firstname.trim();
-        this.lastname = lastname.trim();
-        this.password = user.getPassword().trim();
-        this.accountNonExpired = user.isAccountNonExpired();
-        this.accountNonLocked = user.isAccountNonLocked();
-        this.credentialsNonExpired = user.isCredentialsNonExpired();
-        this.enabled = user.isEnabled();
-        this.roles = roles;
-        this.firstTimeLoginRemaining = true;
-    }
-
-    public void updatePassword(final String encodePassword) {
-        this.password = encodePassword;
-        this.firstTimeLoginRemaining = false;
-    }
-
-    public void changeOffice(final Office differentOffice) {
-        this.office = differentOffice;
-    }
-
-    public void updateRoles(final Set<Role> allRoles) {
-        if (!allRoles.isEmpty()) {
-            this.roles.clear();
-            this.roles = allRoles;
-        }
-    }
-
-    public Map<String, Object> update(final JsonCommand command, final PlatformPasswordEncoder platformPasswordEncoder) {
-
-        final Map<String, Object> actualChanges = new LinkedHashMap<String, Object>(7);
-
-        // unencoded password provided
-        final String passwordParamName = "password";
-        final String passwordEncodedParamName = "passwordEncoded";
-        if (command.hasParameter(passwordParamName)) {
-            if (command.isChangeInPasswordParameterNamed(passwordParamName, this.password, platformPasswordEncoder, this.getId())) {
-                final String passwordEncodedValue = command.passwordValueOfParameterNamed(passwordParamName, platformPasswordEncoder,
-                        this.getId());
-                actualChanges.put(passwordEncodedParamName, passwordEncodedValue);
-                updatePassword(passwordEncodedValue);
-            }
-        }
-
-        if (command.hasParameter(passwordEncodedParamName)) {
-            if (command.isChangeInStringParameterNamed(passwordEncodedParamName, this.password)) {
-                final String newValue = command.stringValueOfParameterNamed(passwordEncodedParamName);
-                actualChanges.put(passwordEncodedParamName, newValue);
-                updatePassword(newValue);
-            }
-        }
-
-        final String officeIdParamName = "officeId";
-        if (command.isChangeInLongParameterNamed(officeIdParamName, this.office.getId())) {
-            final Long newValue = command.longValueOfParameterNamed(officeIdParamName);
-            actualChanges.put(officeIdParamName, newValue);
-        }
-
-        final String rolesParamName = "roles";
-        if (command.isChangeInArrayParameterNamed(rolesParamName, getRolesAsIdStringArray())) {
-            final String[] newValue = command.arrayValueOfParameterNamed(rolesParamName);
-            actualChanges.put(rolesParamName, newValue);
-        }
-
-        final String usernameParamName = "username";
-        if (command.isChangeInStringParameterNamed(usernameParamName, this.username)) {
-            final String newValue = command.stringValueOfParameterNamed(usernameParamName);
-            actualChanges.put(usernameParamName, newValue);
-            this.username = newValue;
-        }
-
-        final String firstnameParamName = "firstname";
-        if (command.isChangeInStringParameterNamed(firstnameParamName, this.firstname)) {
-            final String newValue = command.stringValueOfParameterNamed(firstnameParamName);
-            actualChanges.put(firstnameParamName, newValue);
-            this.firstname = newValue;
-        }
-
-        final String lastnameParamName = "lastname";
-        if (command.isChangeInStringParameterNamed(lastnameParamName, this.lastname)) {
-            final String newValue = command.stringValueOfParameterNamed(lastnameParamName);
-            actualChanges.put(lastnameParamName, newValue);
-            this.lastname = newValue;
-        }
-
-        final String emailParamName = "email";
-        if (command.isChangeInStringParameterNamed(emailParamName, this.email)) {
-            final String newValue = command.stringValueOfParameterNamed(emailParamName);
-            actualChanges.put(emailParamName, newValue);
-            this.email = newValue;
-        }
-
-        return actualChanges;
-    }
-
-    private String[] getRolesAsIdStringArray() {
-        List<String> roleIds = new ArrayList<String>();
-
-        for (Role role : this.roles) {
-            roleIds.add(role.getId().toString());
-        }
-
-        return roleIds.toArray(new String[roleIds.size()]);
-    }
-
-    /**
-     * Delete is a <i>soft delete</i>. Updates flag so it wont appear in
-     * query/report results.
-     * 
-     * Any fields with unique constraints and prepended with id of record.
-     */
-    public void delete() {
-        this.deleted = true;
-        this.enabled = false;
-        this.accountNonExpired = false;
-        this.firstTimeLoginRemaining = true;
-        this.username = this.getId() + "_DELETED_" + this.username;
-    }
-
-    public boolean isDeleted() {
-        return deleted;
-    }
-
-    @Override
-    public Collection<GrantedAuthority> getAuthorities() {
-        return this.populateGrantedAuthorities();
-    }
-
-    private List<GrantedAuthority> populateGrantedAuthorities() {
-        List<GrantedAuthority> grantedAuthorities = new ArrayList<GrantedAuthority>();
-        for (Role role : this.roles) {
-            Collection<Permission> permissions = role.getPermissions();
-            for (Permission permission : permissions) {
-                grantedAuthorities.add(new SimpleGrantedAuthority(permission.getCode()));
-            }
-        }
-        return grantedAuthorities;
-    }
-
-    @Override
-    public String getPassword() {
-        return this.password;
-    }
-
-    @Override
-    public String getUsername() {
-        return this.username;
-    }
-
-    @Override
-    public boolean isAccountNonExpired() {
-        return this.accountNonExpired;
-    }
-
-    @Override
-    public boolean isAccountNonLocked() {
-        return this.accountNonLocked;
-    }
-
-    @Override
-    public boolean isCredentialsNonExpired() {
-        return this.credentialsNonExpired;
-    }
-
-    @Override
-    public boolean isEnabled() {
-        return this.enabled;
-    }
-
-    public String getFirstname() {
-        return firstname;
-    }
-
-    public String getLastname() {
-        return lastname;
-    }
-
-    public String getEmail() {
-        return this.email;
-    }
-
-    public Set<Role> getRoles() {
-        return this.roles;
-    }
-
-    public Office getOffice() {
-        return this.office;
-    }
-
-    public boolean canNotApproveLoanInPast() {
-        return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "APPROVEINPAST_LOAN");
-    }
-
-    public boolean canNotRejectLoanInPast() {
-        return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "REJECTINPAST_LOAN");
-    }
-
-    public boolean canNotWithdrawByClientLoanInPast() {
-        return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "WITHDRAWINPAST_LOAN");
-    }
-
-    public boolean canNotDisburseLoanInPast() {
-        return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "DISBURSEINPAST_LOAN");
-    }
-
-    public boolean canNotMakeRepaymentOnLoanInPast() {
-        return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "REPAYMENTINPAST_LOAN");
-    }
-
-    public boolean hasNotPermissionForReport(final String reportName) {
-
-        if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ", "REPORTING_SUPER_USER", "READ_" + reportName)) return true;
-
-        return false;
-    }
-
-    public boolean hasNotPermissionForDatatable(final String datatable, final String accessType) {
-
-        String matchPermission = accessType + "_" + datatable;
-
-        if (accessType.equalsIgnoreCase("READ")) {
-
-            if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ", matchPermission)) return true;
-
-            return false;
-        }
-
-        if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", matchPermission)) return true;
-
-        return false;
-    }
-
-    public boolean hasNotPermissionForAnyOf(final String... permissionCodes) {
-        boolean hasNotPermission = true;
-        for (String permissionCode : permissionCodes) {
-            boolean checkPermission = this.hasPermissionTo(permissionCode);
-            if (checkPermission) {
-                hasNotPermission = false;
-                break;
-            }
-        }
-        return hasNotPermission;
-    }
-
-    public void validateHasReadPermission(final String entityType) {
-
-        String authorizationMessage = "User has no authority to view " + entityType.toLowerCase() + "s";
-        String matchPermission = "READ_" + entityType.toUpperCase();
-
-        if (!(hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ", matchPermission))) return;
-
-        throw new NoAuthorizationException(authorizationMessage);
-    }
-
-    private boolean hasNotPermissionTo(final String permissionCode) {
-        return !hasPermissionTo(permissionCode);
-    }
-
-    private boolean hasPermissionTo(final String permissionCode) {
-        boolean hasPermission = hasAllFunctionsPermission();
-        if (!hasPermission) {
-            for (Role role : this.roles) {
-                if (role.hasPermissionTo(permissionCode)) {
-                    hasPermission = true;
-                    break;
-                }
-            }
-        }
-        return hasPermission;
-    }
-
-    private boolean hasAllFunctionsPermission() {
-        boolean match = false;
-        for (Role role : this.roles) {
-            if (role.hasPermissionTo("ALL_FUNCTIONS")) {
-                match = true;
-                break;
-            }
-        }
-        return match;
-    }
-
-    public boolean hasIdOf(final Long userId) {
-        return getId().equals(userId);
-    }
-
-    private boolean hasNotAnyPermission(final List<String> permissions) {
-        return !hasAnyPermission(permissions);
-    }
-
-    private boolean hasAnyPermission(final List<String> permissions) {
-        boolean hasAtLeastOneOf = false;
-
-        for (final String permissionCode : permissions) {
-            if (hasPermissionTo(permissionCode)) {
-                hasAtLeastOneOf = true;
-                break;
-            }
-        }
-
-        return hasAtLeastOneOf;
-    }
-
-    public void validateHasPermissionTo(final String function, final List<String> allowedPermissions) {
-        if (hasNotAnyPermission(allowedPermissions)) {
-            final String authorizationMessage = "User has no authority to: " + function;
-            throw new NoAuthorizationException(authorizationMessage);
-        }
-    }
-
-    public void validateHasPermissionTo(final String function) {
-        if (hasNotPermissionTo(function)) {
-            final String authorizationMessage = "User has no authority to: " + function;
-            logger.info("Unauthorized access: userId: " + this.getId() + " action: " + function + " allowed: " + getAuthorities());
-            throw new NoAuthorizationException(authorizationMessage);
-        }
-    }
-
-    public void validateHasCheckerPermissionTo(final String function) {
-
-        final String checkerPermissionName = function.toUpperCase() + "_CHECKER";
-        if (hasNotPermissionTo(checkerPermissionName)) {
-            final String authorizationMessage = "User has no authority to be a checker for: " + function;
-            throw new NoAuthorizationException(authorizationMessage);
-        }
-    }
-
-    public void validateHasDatatableReadPermission(final String datatable) {
-        if (hasNotPermissionForDatatable(datatable, "READ")) { throw new NoAuthorizationException("Not authorised to read datatable: "
-                + datatable); }
-    }
+	private final static Logger logger = LoggerFactory.getLogger(AppUser.class);
+
+	@Column(name = "email", nullable = false, length = 100)
+	private String email;
+
+	@Column(name = "username", nullable = false, length = 100)
+	private String username;
+
+	@Column(name = "firstname", nullable = false, length = 100)
+	private String firstname;
+
+	@Column(name = "lastname", nullable = false, length = 100)
+	private String lastname;
+
+	@Column(name = "password", nullable = false)
+	private String password;
+
+	@Column(name = "nonexpired", nullable = false)
+	private boolean accountNonExpired;
+
+	@Column(name = "nonlocked", nullable = false)
+	private final boolean accountNonLocked;
+
+	@Column(name = "nonexpired_credentials", nullable = false)
+	private final boolean credentialsNonExpired;
+
+	@Column(name = "enabled", nullable = false)
+	private boolean enabled;
+
+	@SuppressWarnings("unused")
+	@Column(name = "firsttime_login_remaining", nullable = false)
+	private boolean firstTimeLoginRemaining;
+
+	@Column(name = "is_deleted", nullable = false)
+	private boolean deleted;
+
+	@ManyToOne
+	@JoinColumn(name = "office_id")
+	private Office office;
+
+	@ManyToMany(fetch = FetchType.EAGER)
+	@JoinTable(name = "m_appuser_role", joinColumns = @JoinColumn(name = "appuser_id"), inverseJoinColumns = @JoinColumn(name = "role_id"))
+	private Set<Role> roles;
+
+	public static AppUser fromJson(final Office userOffice,
+			final Set<Role> allRoles, final JsonCommand command) {
+
+		final String username = command.stringValueOfParameterNamed("username");
+		String password = command.stringValueOfParameterNamed("password");
+		if (StringUtils.isBlank(password)) {
+			password = "autogenerate";
+		}
+
+		boolean userEnabled = true;
+		boolean userAccountNonExpired = true;
+		boolean userCredentialsNonExpired = true;
+		boolean userAccountNonLocked = true;
+
+		Collection<SimpleGrantedAuthority> authorities = new ArrayList<SimpleGrantedAuthority>();
+		authorities.add(new SimpleGrantedAuthority(
+				"DUMMY_ROLE_NOT_USED_OR_PERSISTED_TO_AVOID_EXCEPTION"));
+
+		User user = new User(username, password, userEnabled,
+				userAccountNonExpired, userCredentialsNonExpired,
+				userAccountNonLocked, authorities);
+
+		final String email = command.stringValueOfParameterNamed("email");
+		final String firstname = command
+				.stringValueOfParameterNamed("firstname");
+		final String lastname = command.stringValueOfParameterNamed("lastname");
+
+		return new AppUser(userOffice, user, allRoles, email, firstname,
+				lastname);
+	}
+
+	protected AppUser() {
+		this.accountNonLocked = false;
+		this.credentialsNonExpired = false;
+		this.roles = new HashSet<Role>();
+	}
+
+	public AppUser(final Office office, final User user, final Set<Role> roles,
+			final String email, final String firstname, final String lastname) {
+		this.office = office;
+		this.email = email.trim();
+		this.username = user.getUsername().trim();
+		this.firstname = firstname.trim();
+		this.lastname = lastname.trim();
+		this.password = user.getPassword().trim();
+		this.accountNonExpired = user.isAccountNonExpired();
+		this.accountNonLocked = user.isAccountNonLocked();
+		this.credentialsNonExpired = user.isCredentialsNonExpired();
+		this.enabled = user.isEnabled();
+		this.roles = roles;
+		this.firstTimeLoginRemaining = true;
+	}
+
+	public void updatePassword(final String encodePassword) {
+		this.password = encodePassword;
+		this.firstTimeLoginRemaining = false;
+	}
+
+	public void changeOffice(final Office differentOffice) {
+		this.office = differentOffice;
+	}
+
+	public void updateRoles(final Set<Role> allRoles) {
+		if (!allRoles.isEmpty()) {
+			this.roles.clear();
+			this.roles = allRoles;
+		}
+	}
+
+	public Map<String, Object> update(final JsonCommand command,
+			final PlatformPasswordEncoder platformPasswordEncoder) {
+
+		final Map<String, Object> actualChanges = new LinkedHashMap<String, Object>(
+				7);
+
+		// unencoded password provided
+		final String passwordParamName = "password";
+		final String passwordEncodedParamName = "passwordEncoded";
+		if (command.hasParameter(passwordParamName)) {
+			if (command.isChangeInPasswordParameterNamed(passwordParamName,
+					this.password, platformPasswordEncoder, this.getId())) {
+				final String passwordEncodedValue = command
+						.passwordValueOfParameterNamed(passwordParamName,
+								platformPasswordEncoder, this.getId());
+				actualChanges.put(passwordEncodedParamName,
+						passwordEncodedValue);
+				updatePassword(passwordEncodedValue);
+			}
+		}
+
+		if (command.hasParameter(passwordEncodedParamName)) {
+			if (command.isChangeInStringParameterNamed(
+					passwordEncodedParamName, this.password)) {
+				final String newValue = command
+						.stringValueOfParameterNamed(passwordEncodedParamName);
+				actualChanges.put(passwordEncodedParamName, newValue);
+				updatePassword(newValue);
+			}
+		}
+
+		final String officeIdParamName = "officeId";
+		if (command.isChangeInLongParameterNamed(officeIdParamName,
+				this.office.getId())) {
+			final Long newValue = command
+					.longValueOfParameterNamed(officeIdParamName);
+			actualChanges.put(officeIdParamName, newValue);
+		}
+
+		final String rolesParamName = "roles";
+		if (command.isChangeInArrayParameterNamed(rolesParamName,
+				getRolesAsIdStringArray())) {
+			final String[] newValue = command
+					.arrayValueOfParameterNamed(rolesParamName);
+			actualChanges.put(rolesParamName, newValue);
+		}
+
+		final String usernameParamName = "username";
+		if (command.isChangeInStringParameterNamed(usernameParamName,
+				this.username)) {
+			final String newValue = command
+					.stringValueOfParameterNamed(usernameParamName);
+			actualChanges.put(usernameParamName, newValue);
+			this.username = newValue;
+		}
+
+		final String firstnameParamName = "firstname";
+		if (command.isChangeInStringParameterNamed(firstnameParamName,
+				this.firstname)) {
+			final String newValue = command
+					.stringValueOfParameterNamed(firstnameParamName);
+			actualChanges.put(firstnameParamName, newValue);
+			this.firstname = newValue;
+		}
+
+		final String lastnameParamName = "lastname";
+		if (command.isChangeInStringParameterNamed(lastnameParamName,
+				this.lastname)) {
+			final String newValue = command
+					.stringValueOfParameterNamed(lastnameParamName);
+			actualChanges.put(lastnameParamName, newValue);
+			this.lastname = newValue;
+		}
+
+		final String emailParamName = "email";
+		if (command.isChangeInStringParameterNamed(emailParamName, this.email)) {
+			final String newValue = command
+					.stringValueOfParameterNamed(emailParamName);
+			actualChanges.put(emailParamName, newValue);
+			this.email = newValue;
+		}
+
+		return actualChanges;
+	}
+
+	private String[] getRolesAsIdStringArray() {
+		List<String> roleIds = new ArrayList<String>();
+
+		for (Role role : this.roles) {
+			roleIds.add(role.getId().toString());
+		}
+
+		return roleIds.toArray(new String[roleIds.size()]);
+	}
+
+	/**
+	 * Delete is a <i>soft delete</i>. Updates flag so it wont appear in
+	 * query/report results.
+	 * 
+	 * Any fields with unique constraints and prepended with id of record.
+	 */
+	public void delete() {
+		this.deleted = true;
+		this.enabled = false;
+		this.accountNonExpired = false;
+		this.firstTimeLoginRemaining = true;
+		this.username = this.getId() + "_DELETED_" + this.username;
+	}
+
+	public boolean isDeleted() {
+		return deleted;
+	}
+
+	@Override
+	public Collection<GrantedAuthority> getAuthorities() {
+		return this.populateGrantedAuthorities();
+	}
+
+	private List<GrantedAuthority> populateGrantedAuthorities() {
+		List<GrantedAuthority> grantedAuthorities = new ArrayList<GrantedAuthority>();
+		for (Role role : this.roles) {
+			Collection<Permission> permissions = role.getPermissions();
+			for (Permission permission : permissions) {
+				grantedAuthorities.add(new SimpleGrantedAuthority(permission
+						.getCode()));
+			}
+		}
+		return grantedAuthorities;
+	}
+
+	@Override
+	public String getPassword() {
+		return this.password;
+	}
+
+	@Override
+	public String getUsername() {
+		return this.username;
+	}
+
+	@Override
+	public boolean isAccountNonExpired() {
+		return this.accountNonExpired;
+	}
+
+	@Override
+	public boolean isAccountNonLocked() {
+		return this.accountNonLocked;
+	}
+
+	@Override
+	public boolean isCredentialsNonExpired() {
+		return this.credentialsNonExpired;
+	}
+
+	@Override
+	public boolean isEnabled() {
+		return this.enabled;
+	}
+
+	public String getFirstname() {
+		return firstname;
+	}
+
+	public String getLastname() {
+		return lastname;
+	}
+
+	public String getEmail() {
+		return this.email;
+	}
+
+	public Set<Role> getRoles() {
+		return this.roles;
+	}
+
+	public Office getOffice() {
+		return this.office;
+	}
+
+	public boolean canNotApproveLoanInPast() {
+		return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "APPROVEINPAST_LOAN");
+	}
+
+	public boolean canNotRejectLoanInPast() {
+		return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "REJECTINPAST_LOAN");
+	}
+
+	public boolean canNotWithdrawByClientLoanInPast() {
+		return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "WITHDRAWINPAST_LOAN");
+	}
+
+	public boolean canNotDisburseLoanInPast() {
+		return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "DISBURSEINPAST_LOAN");
+	}
+
+	public boolean canNotMakeRepaymentOnLoanInPast() {
+		return hasNotPermissionForAnyOf("ALL_FUNCTIONS", "REPAYMENTINPAST_LOAN");
+	}
+
+	public boolean hasNotPermissionForReport(final String reportName) {
+
+		if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ",
+				"REPORTING_SUPER_USER", "READ_" + reportName))
+			return true;
+
+		return false;
+	}
+
+	public boolean hasNotPermissionForDatatable(final String datatable,
+			final String accessType) {
+
+		String matchPermission = accessType + "_" + datatable;
+
+		if (accessType.equalsIgnoreCase("READ")) {
+
+			if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ",
+					matchPermission))
+				return true;
+
+			return false;
+		}
+
+		if (hasNotPermissionForAnyOf("ALL_FUNCTIONS", matchPermission))
+			return true;
+
+		return false;
+	}
+
+	public boolean hasNotPermissionForAnyOf(final String... permissionCodes) {
+		boolean hasNotPermission = true;
+		for (String permissionCode : permissionCodes) {
+			boolean checkPermission = this.hasPermissionTo(permissionCode);
+			if (checkPermission) {
+				hasNotPermission = false;
+				break;
+			}
+		}
+		return hasNotPermission;
+	}
+
+	public void validateHasReadPermission(final String entityType) {
+
+		String authorizationMessage = "User has no authority to view "
+				+ entityType.toLowerCase() + "s";
+		String matchPermission = "READ_" + entityType.toUpperCase();
+
+		if (!(hasNotPermissionForAnyOf("ALL_FUNCTIONS", "ALL_FUNCTIONS_READ",
+				matchPermission)))
+			return;
+
+		throw new NoAuthorizationException(authorizationMessage);
+	}
+
+	private boolean hasNotPermissionTo(final String permissionCode) {
+		return !hasPermissionTo(permissionCode);
+	}
+
+	private boolean hasPermissionTo(final String permissionCode) {
+		boolean hasPermission = hasAllFunctionsPermission();
+		if (!hasPermission) {
+			for (Role role : this.roles) {
+				if (role.hasPermissionTo(permissionCode)) {
+					hasPermission = true;
+					break;
+				}
+			}
+		}
+		return hasPermission;
+	}
+
+	private boolean hasAllFunctionsPermission() {
+		boolean match = false;
+		for (Role role : this.roles) {
+			if (role.hasPermissionTo("ALL_FUNCTIONS")) {
+				match = true;
+				break;
+			}
+		}
+		return match;
+	}
+
+	public boolean hasIdOf(final Long userId) {
+		return getId().equals(userId);
+	}
+
+	private boolean hasNotAnyPermission(final List<String> permissions) {
+		return !hasAnyPermission(permissions);
+	}
+
+	private boolean hasAnyPermission(final List<String> permissions) {
+		boolean hasAtLeastOneOf = false;
+
+		for (final String permissionCode : permissions) {
+			if (hasPermissionTo(permissionCode)) {
+				hasAtLeastOneOf = true;
+				break;
+			}
+		}
+
+		return hasAtLeastOneOf;
+	}
+
+	public void validateHasPermissionTo(final String function,
+			final List<String> allowedPermissions) {
+		if (hasNotAnyPermission(allowedPermissions)) {
+			final String authorizationMessage = "User has no authority to: "
+					+ function;
+			throw new NoAuthorizationException(authorizationMessage);
+		}
+	}
+
+	public void validateHasPermissionTo(final String function) {
+		if (hasNotPermissionTo(function)) {
+			final String authorizationMessage = "User has no authority to: "
+					+ function;
+			logger.info("Unauthorized access: userId: " + this.getId()
+					+ " action: " + function + " allowed: " + getAuthorities());
+			throw new NoAuthorizationException(authorizationMessage);
+		}
+	}
+
+	public void validateHasCheckerPermissionTo(final String function) {
+
+		final String checkerPermissionName = function.toUpperCase()
+				+ "_CHECKER";
+		if (hasNotPermissionTo(checkerPermissionName)) {
+			final String authorizationMessage = "User has no authority to be a checker for: "
+					+ function;
+			throw new NoAuthorizationException(authorizationMessage);
+		}
+	}
+
+	public void validateHasDatatableReadPermission(final String datatable) {
+		if (hasNotPermissionForDatatable(datatable, "READ")) {
+			throw new NoAuthorizationException(
+					"Not authorised to read datatable: " + datatable);
+		}
+	}
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/rest/MainPost.java b/mifosng-provider/src/main/java/rest/MainPost.java
new file mode 100644
index 0000000..a6d66fc
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/MainPost.java
@@ -0,0 +1,79 @@
+package rest;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.support.ClassPathXmlApplicationContext;
+import org.springframework.http.HttpEntity;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.util.MultiValueMap;
+import org.springframework.web.client.HttpStatusCodeException;
+import org.springframework.web.client.RestOperations;
+
+
+
+import rest.reply.PaypalPayReply;
+import rest.request.PaypalPayDso;
+import rest.request.PaypalReciver;
+import rest.request.PaypalRequestEnvelope;
+
+
+public class MainPost {
+
+	@Autowired
+	private RestOperations restOperations;
+
+	public void makeRequest(){
+		PaypalPayDso payDso = generatePaypalDso();
+		try{
+
+			HttpEntity<PaypalPayDso> entity = new HttpEntity<PaypalPayDso>(payDso, generateHttpHeader());
+			ResponseEntity<PaypalPayReply> responseEntity = restOperations.postForEntity("https://svcs.sandbox.paypal.com/AdaptivePayments/Pay", entity, PaypalPayReply.class);
+			if (responseEntity.getStatusCode() != HttpStatus.OK){
+				System.out.println("Do summfink");
+			}else{
+				System.out.println(responseEntity.getBody().getPayKey());
+			}
+		}catch (HttpStatusCodeException ex) {
+			ex.printStackTrace();
+		}
+	}
+
+	private MultiValueMap<String, String> generateHttpHeader() {
+		HttpHeaders headers = new HttpHeaders();
+		headers.add("X-PAYPAL-SECURITY-USERID", "your test user id");
+		headers.add("X-PAYPAL-SECURITY-PASSWORD", "your test user password");
+		headers.add("X-PAYPAL-SECURITY-SIGNATURE", "signiture from your test account");
+		headers.add("X-PAYPAL-REQUEST-DATA-FORMAT", "XML");
+		headers.add("X-PAYPAL-RESPONSE-DATA-FORMAT", "XML");
+		headers.add("X-PAYPAL-APPLICATION-ID", "your app id from x.com");
+		return headers;
+
+	}
+
+	private PaypalPayDso generatePaypalDso() {
+		List<PaypalReciver> recivers = new ArrayList<PaypalReciver>();
+		recivers.add(new PaypalReciver("1.20", "<your test sender email>", "<a invoice id like a basket id>"));
+
+		PaypalPayDso payDso = new PaypalPayDso();
+		payDso.setRequestEnvelope(new PaypalRequestEnvelope());
+		payDso.setReciverList(recivers);
+		payDso.setCurrencyCode("USD");
+		//Not mandatory
+		payDso.setIpnNotificationUrl("your IPN URL");
+		payDso.setReturnUrl("customer return URL");
+		payDso.setCancelUrl("customer cancel URL");
+
+		return payDso;
+	}
+//
+	public static void main(String[] arg) {
+
+		ClassPathXmlApplicationContext ctx = new ClassPathXmlApplicationContext("spring-rest-template.xml");
+		MainPost mainPost = (MainPost) ctx.getBean("rest");
+		mainPost.makeRequest();
+	}
+}
diff --git a/mifosng-provider/src/main/java/rest/reply/OXMapper.java b/mifosng-provider/src/main/java/rest/reply/OXMapper.java
new file mode 100644
index 0000000..36b4d39
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/reply/OXMapper.java
@@ -0,0 +1,13 @@
+package rest.reply;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+/**
+ * User: charlie
+ * Date: Sep 25, 2010
+ */
+public interface OXMapper {
+     public String marshall(Object objToUnMarshall) throws IOException;
+    public Object unMarshall(InputStream content) throws IOException;
+}
diff --git a/mifosng-provider/src/main/java/rest/reply/PaypalAckStatus.java b/mifosng-provider/src/main/java/rest/reply/PaypalAckStatus.java
new file mode 100644
index 0000000..c439908
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/reply/PaypalAckStatus.java
@@ -0,0 +1,17 @@
+package rest.reply;
+
+public enum PaypalAckStatus {
+	SUCCESS("Success"),
+	FAILURE("Failure");
+
+	private String value;
+
+	private PaypalAckStatus(String value) {
+		this.value = value;
+	}
+
+	public String value() {
+		return value;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/rest/reply/PaypalFailureDetail.java b/mifosng-provider/src/main/java/rest/reply/PaypalFailureDetail.java
new file mode 100644
index 0000000..0fcc732
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/reply/PaypalFailureDetail.java
@@ -0,0 +1,74 @@
+package rest.reply;
+
+import java.util.List;
+
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlElements;
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "error")
+public class PaypalFailureDetail {
+	private String errorId;
+	private String domain;
+	private String severity;
+	private String category;
+	private String message;
+	private List<String> parameter;
+
+
+
+	@Override
+	public String toString() {
+		return "errorId" + errorId + "\\n" +
+		"domain: " + domain + "\\n" +
+		"severity: " + severity + "\\n" +
+		"category: " + category + "\\n" +
+		"message: " + message + "\\n" + paramStrings();
+	}
+	private String paramStrings() {
+		StringBuilder stringBuilder = new StringBuilder();
+		for (String param : parameter){
+			stringBuilder.append(param).append("\\n");
+		}
+		return stringBuilder.toString();
+	}
+	@XmlElements({
+		@XmlElement(name = "parameter", type = String.class)
+	})
+	public List<String> getParameter() {
+		return parameter;
+	}
+	public void setParameter(List<String> parameter) {
+		this.parameter = parameter;
+	}
+	public String getErrorId() {
+		return errorId;
+	}
+	public void setErrorId(String errorId) {
+		this.errorId = errorId;
+	}
+	public String getDomain() {
+		return domain;
+	}
+	public void setDomain(String domain) {
+		this.domain = domain;
+	}
+	public String getSeverity() {
+		return severity;
+	}
+	public void setSeverity(String severity) {
+		this.severity = severity;
+	}
+	public String getCategory() {
+		return category;
+	}
+	public void setCategory(String category) {
+		this.category = category;
+	}
+	public String getMessage() {
+		return message;
+	}
+	public void setMessage(String message) {
+		this.message = message;
+	}
+}
diff --git a/mifosng-provider/src/main/java/rest/reply/PaypalPayReply.java b/mifosng-provider/src/main/java/rest/reply/PaypalPayReply.java
new file mode 100644
index 0000000..975ee4f
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/reply/PaypalPayReply.java
@@ -0,0 +1,6 @@
+package rest.reply;
+
+
+public interface PaypalPayReply {
+	public String getPayKey();
+}
diff --git a/mifosng-provider/src/main/java/rest/request/PaypalPayDso.java b/mifosng-provider/src/main/java/rest/request/PaypalPayDso.java
new file mode 100644
index 0000000..94b6e23
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/request/PaypalPayDso.java
@@ -0,0 +1,92 @@
+package rest.request;
+
+import java.util.List;
+
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlElementWrapper;
+import javax.xml.bind.annotation.XmlElements;
+import javax.xml.bind.annotation.XmlRootElement;
+
+
+@XmlRootElement(name = "PayRequest")
+public class PaypalPayDso {
+
+	private PaypalRequestEnvelope requestEnvelope;
+	private String actionType = "PAY";
+	private String cancelUrl;
+	private String returnUrl;
+	private String ipnNotificationUrl;
+	private String currencyCode;
+	private String feesPayer = "EACHRECEIVER";
+	private List<PaypalReciver> reciverList;
+
+	@XmlElement(name = "requestEnvelope")
+	public PaypalRequestEnvelope getRequestEnvelope() {
+		return requestEnvelope;
+	}
+
+	public void setRequestEnvelope(PaypalRequestEnvelope requestEnvelope) {
+		this.requestEnvelope = requestEnvelope;
+	}
+
+	public String getActionType() {
+		return actionType;
+	}
+
+	public void setActionType(String actionType) {
+		this.actionType = actionType;
+	}
+
+	public String getCancelUrl() {
+		return cancelUrl;
+	}
+
+	public void setCancelUrl(String cancelUrl) {
+		this.cancelUrl = cancelUrl;
+	}
+
+	public String getReturnUrl() {
+		return returnUrl;
+	}
+
+	public void setReturnUrl(String returnUrl) {
+		this.returnUrl = returnUrl;
+	}
+
+	public String getIpnNotificationUrl() {
+		return ipnNotificationUrl;
+	}
+
+	public void setIpnNotificationUrl(String ipnNotificationUrl) {
+		this.ipnNotificationUrl = ipnNotificationUrl;
+	}
+
+	public String getCurrencyCode() {
+		return currencyCode;
+	}
+
+	public void setCurrencyCode(String currencyCode) {
+		this.currencyCode = currencyCode;
+	}
+
+	public String getFeesPayer() {
+		return feesPayer;
+	}
+
+	public void setFeesPayer(String feesPayer) {
+		this.feesPayer = feesPayer;
+	}
+
+	@XmlElementWrapper(name = "receiverList")
+	@XmlElements({
+		@XmlElement(name="receiver", type=PaypalReciver.class)
+	})
+	public List<PaypalReciver> getReciverList() {
+		return reciverList;
+	}
+
+	public void setReciverList(List<PaypalReciver> reciverList) {
+		this.reciverList = reciverList;
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/rest/request/PaypalReciver.java b/mifosng-provider/src/main/java/rest/request/PaypalReciver.java
new file mode 100644
index 0000000..b03f535
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/request/PaypalReciver.java
@@ -0,0 +1,38 @@
+package rest.request;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name = "receiver")
+public class PaypalReciver{
+	private String amount;
+	private String email;
+	private String invoiceId;
+
+	public PaypalReciver(String amount, String email, String invoiceId) {
+		super();
+		this.amount = amount;
+		this.email = email;
+		this.invoiceId = invoiceId;
+	}
+	public PaypalReciver() {
+		super();
+	}
+	public String getAmount() {
+		return amount;
+	}
+	public void setAmount(String amount) {
+		this.amount = amount;
+	}
+	public String getEmail() {
+		return email;
+	}
+	public void setEmail(String email) {
+		this.email = email;
+	}
+	public String getInvoiceId() {
+		return invoiceId;
+	}
+	public void setInvoiceId(String invoiceId) {
+		this.invoiceId = invoiceId;
+	}
+}
diff --git a/mifosng-provider/src/main/java/rest/request/PaypalRequestEnvelope.java b/mifosng-provider/src/main/java/rest/request/PaypalRequestEnvelope.java
new file mode 100644
index 0000000..9b511f2
--- /dev/null
+++ b/mifosng-provider/src/main/java/rest/request/PaypalRequestEnvelope.java
@@ -0,0 +1,17 @@
+package rest.request;
+
+import javax.xml.bind.annotation.XmlRootElement;
+
+@XmlRootElement(name="requestEnvelope")
+public class PaypalRequestEnvelope{
+
+	private String errorLanguage = "en_US";
+
+	public String getErrorLanguage() {
+		return errorLanguage;
+	}
+
+	public void setErrorLanguage(String errorLanguage) {
+		this.errorLanguage = errorLanguage;
+	}
+}
-- 
1.8.0.msysgit.0

